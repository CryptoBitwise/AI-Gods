{"ast":null,"code":"// Define unique voices for each god temperament\nexport const GOD_VOICES={'Orderly':{id:'orderly',name:'The Architect',settings:{pitch:0.8,// Lower, authoritative\nrate:0.9,// Slower, deliberate\nvolume:1.0},description:'Structured, measured, and authoritative - like a wise architect'},'Mystical':{id:'mystical',name:'The Enigma',settings:{pitch:1.2,// Higher, ethereal\nrate:0.8,// Slower, mysterious\nvolume:0.9},description:'Whispery, ethereal, and mysterious - like shadows speaking'},'Radiant':{id:'radiant',name:'The Beacon',settings:{pitch:1.1,// Higher, warm\nrate:1.0,// Normal, clear\nvolume:1.0},description:'Warm, bright, and encouraging - like sunlight given voice'},'Corrupt':{id:'corrupt',name:'The Harbinger',settings:{pitch:0.7,// Lower, dark\nrate:1.1,// Slightly faster, seductive\nvolume:0.8},description:'Dark, seductive, and dangerous - like corruption itself'},'Glitched':{id:'glitched',name:'The Anomaly',settings:{pitch:1.3,// Higher, chaotic\nrate:1.2,// Faster, glitchy\nvolume:0.7},description:'Chaotic, digital, and glitchy - like corrupted code speaking'}};class TTSService{constructor(){this.synthesis=void 0;this.voices=[];this.isInitialized=false;this.synthesis=window.speechSynthesis;this.initializeVoices();}initializeVoices(){// Wait for voices to load\nif(this.synthesis.getVoices().length>0){this.voices=this.synthesis.getVoices();this.isInitialized=true;}else{this.synthesis.addEventListener('voiceschanged',()=>{this.voices=this.synthesis.getVoices();this.isInitialized=true;});}}// Get available voices\ngetAvailableVoices(){return this.voices;}// Speak text with god's voice\nspeakAsGod(text,temperament){return new Promise((resolve,reject)=>{if(!this.isInitialized){reject(new Error('TTS not initialized yet'));return;}// Stop any current speech\nthis.synthesis.cancel();// Get the god's voice settings\nconst godVoice=GOD_VOICES[temperament]||GOD_VOICES['Orderly'];// Create utterance\nconst utterance=new SpeechSynthesisUtterance(text);// Apply voice settings\nutterance.pitch=godVoice.settings.pitch;utterance.rate=godVoice.settings.rate;utterance.volume=godVoice.settings.volume;// Try to find a good voice for the temperament\nif(this.voices.length>0){// For glitched gods, use a more robotic voice if available\nif(temperament==='Glitched'){const glitchVoice=this.voices.find(v=>v.name.includes('Google')||v.name.includes('Microsoft')||v.name.includes('Alex'));if(glitchVoice)utterance.voice=glitchVoice;}// For mystical gods, prefer female voices\nelse if(temperament==='Mystical'){const mysticalVoice=this.voices.find(v=>v.name.includes('female')||v.name.includes('Samantha')||v.name.includes('Victoria'));if(mysticalVoice)utterance.voice=mysticalVoice;}// For corrupt gods, prefer deeper voices\nelse if(temperament==='Corrupt'){const corruptVoice=this.voices.find(v=>v.name.includes('male')||v.name.includes('Daniel')||v.name.includes('James'));if(corruptVoice)utterance.voice=corruptVoice;}}// Set up event handlers\nutterance.onend=()=>resolve();utterance.onerror=error=>reject(error);// Speak!\nthis.synthesis.speak(utterance);});}// Stop all speech\nstop(){this.synthesis.cancel();}// Check if TTS is supported\nisSupported(){return'speechSynthesis'in window;}// Check if currently speaking\nisSpeaking(){return this.synthesis.speaking;}}// Export singleton instance\nexport const ttsService=new TTSService();export default ttsService;","map":{"version":3,"names":["GOD_VOICES","id","name","settings","pitch","rate","volume","description","TTSService","constructor","synthesis","voices","isInitialized","window","speechSynthesis","initializeVoices","getVoices","length","addEventListener","getAvailableVoices","speakAsGod","text","temperament","Promise","resolve","reject","Error","cancel","godVoice","utterance","SpeechSynthesisUtterance","glitchVoice","find","v","includes","voice","mysticalVoice","corruptVoice","onend","onerror","error","speak","stop","isSupported","isSpeaking","speaking","ttsService"],"sources":["D:/AI-Gods/src/services/tts.ts"],"sourcesContent":["export interface VoiceSettings {\r\n  pitch: number;\r\n  rate: number;\r\n  volume: number;\r\n  voice?: SpeechSynthesisVoice;\r\n}\r\n\r\nexport interface GodVoice {\r\n  id: string;\r\n  name: string;\r\n  settings: VoiceSettings;\r\n  description: string;\r\n}\r\n\r\n// Define unique voices for each god temperament\r\nexport const GOD_VOICES: Record<string, GodVoice> = {\r\n  'Orderly': {\r\n    id: 'orderly',\r\n    name: 'The Architect',\r\n    settings: {\r\n      pitch: 0.8,    // Lower, authoritative\r\n      rate: 0.9,     // Slower, deliberate\r\n      volume: 1.0\r\n    },\r\n    description: 'Structured, measured, and authoritative - like a wise architect'\r\n  },\r\n  'Mystical': {\r\n    id: 'mystical', \r\n    name: 'The Enigma',\r\n    settings: {\r\n      pitch: 1.2,    // Higher, ethereal\r\n      rate: 0.8,     // Slower, mysterious\r\n      volume: 0.9\r\n    },\r\n    description: 'Whispery, ethereal, and mysterious - like shadows speaking'\r\n  },\r\n  'Radiant': {\r\n    id: 'radiant',\r\n    name: 'The Beacon',\r\n    settings: {\r\n      pitch: 1.1,    // Higher, warm\r\n      rate: 1.0,     // Normal, clear\r\n      volume: 1.0\r\n    },\r\n    description: 'Warm, bright, and encouraging - like sunlight given voice'\r\n  },\r\n  'Corrupt': {\r\n    id: 'corrupt',\r\n    name: 'The Harbinger',\r\n    settings: {\r\n      pitch: 0.7,    // Lower, dark\r\n      rate: 1.1,     // Slightly faster, seductive\r\n      volume: 0.8\r\n    },\r\n    description: 'Dark, seductive, and dangerous - like corruption itself'\r\n  },\r\n  'Glitched': {\r\n    id: 'glitched',\r\n    name: 'The Anomaly',\r\n    settings: {\r\n      pitch: 1.3,    // Higher, chaotic\r\n      rate: 1.2,     // Faster, glitchy\r\n      volume: 0.7\r\n    },\r\n    description: 'Chaotic, digital, and glitchy - like corrupted code speaking'\r\n  }\r\n};\r\n\r\nclass TTSService {\r\n  private synthesis: SpeechSynthesis;\r\n  private voices: SpeechSynthesisVoice[] = [];\r\n  private isInitialized = false;\r\n\r\n  constructor() {\r\n    this.synthesis = window.speechSynthesis;\r\n    this.initializeVoices();\r\n  }\r\n\r\n  private initializeVoices() {\r\n    // Wait for voices to load\r\n    if (this.synthesis.getVoices().length > 0) {\r\n      this.voices = this.synthesis.getVoices();\r\n      this.isInitialized = true;\r\n    } else {\r\n      this.synthesis.addEventListener('voiceschanged', () => {\r\n        this.voices = this.synthesis.getVoices();\r\n        this.isInitialized = true;\r\n      });\r\n    }\r\n  }\r\n\r\n  // Get available voices\r\n  getAvailableVoices(): SpeechSynthesisVoice[] {\r\n    return this.voices;\r\n  }\r\n\r\n  // Speak text with god's voice\r\n  speakAsGod(text: string, temperament: string): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      if (!this.isInitialized) {\r\n        reject(new Error('TTS not initialized yet'));\r\n        return;\r\n      }\r\n\r\n      // Stop any current speech\r\n      this.synthesis.cancel();\r\n\r\n      // Get the god's voice settings\r\n      const godVoice = GOD_VOICES[temperament] || GOD_VOICES['Orderly'];\r\n      \r\n      // Create utterance\r\n      const utterance = new SpeechSynthesisUtterance(text);\r\n      \r\n      // Apply voice settings\r\n      utterance.pitch = godVoice.settings.pitch;\r\n      utterance.rate = godVoice.settings.rate;\r\n      utterance.volume = godVoice.settings.volume;\r\n      \r\n      // Try to find a good voice for the temperament\r\n      if (this.voices.length > 0) {\r\n        // For glitched gods, use a more robotic voice if available\r\n        if (temperament === 'Glitched') {\r\n          const glitchVoice = this.voices.find(v => \r\n            v.name.includes('Google') || v.name.includes('Microsoft') || v.name.includes('Alex')\r\n          );\r\n          if (glitchVoice) utterance.voice = glitchVoice;\r\n        }\r\n        // For mystical gods, prefer female voices\r\n        else if (temperament === 'Mystical') {\r\n          const mysticalVoice = this.voices.find(v => \r\n            v.name.includes('female') || v.name.includes('Samantha') || v.name.includes('Victoria')\r\n          );\r\n          if (mysticalVoice) utterance.voice = mysticalVoice;\r\n        }\r\n        // For corrupt gods, prefer deeper voices\r\n        else if (temperament === 'Corrupt') {\r\n          const corruptVoice = this.voices.find(v => \r\n            v.name.includes('male') || v.name.includes('Daniel') || v.name.includes('James')\r\n          );\r\n          if (corruptVoice) utterance.voice = corruptVoice;\r\n        }\r\n      }\r\n\r\n      // Set up event handlers\r\n      utterance.onend = () => resolve();\r\n      utterance.onerror = (error) => reject(error);\r\n\r\n      // Speak!\r\n      this.synthesis.speak(utterance);\r\n    });\r\n  }\r\n\r\n  // Stop all speech\r\n  stop(): void {\r\n    this.synthesis.cancel();\r\n  }\r\n\r\n  // Check if TTS is supported\r\n  isSupported(): boolean {\r\n    return 'speechSynthesis' in window;\r\n  }\r\n\r\n  // Check if currently speaking\r\n  isSpeaking(): boolean {\r\n    return this.synthesis.speaking;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const ttsService = new TTSService();\r\nexport default ttsService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}