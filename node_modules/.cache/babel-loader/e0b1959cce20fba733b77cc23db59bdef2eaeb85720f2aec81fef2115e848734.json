{"ast":null,"code":"import _objectSpread from\"D:/AI-Gods/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Groq API configuration\n// AI response interface\n// God personality context for AI prompting\nclass GroqAIService{constructor(){var _process$env$REACT_AP;this.config=void 0;this.isInitialized=false;this.config={apiKey:process.env.REACT_APP_GROQ_API_KEY||'',baseUrl:'https://api.groq.com/openai/v1',defaultModel:'llama-3.1-70b-versatile',// Updated to valid Groq model\nmaxTokens:1000,temperature:0.8};// Debug: Log environment variable status\nconsole.log('üîç Environment check:',{hasEnvVar:!!process.env.REACT_APP_GROQ_API_KEY,envVarLength:((_process$env$REACT_AP=process.env.REACT_APP_GROQ_API_KEY)===null||_process$env$REACT_AP===void 0?void 0:_process$env$REACT_AP.length)||0,apiKeySet:!!this.config.apiKey});}// Initialize the service\nasync initialize(){if(!this.config.apiKey){console.error('‚ùå Groq API key not found. Set REACT_APP_GROQ_API_KEY environment variable.');return false;}try{// Test the API connection\nconst response=await fetch(\"\".concat(this.config.baseUrl,\"/models\"),{headers:{'Authorization':\"Bearer \".concat(this.config.apiKey),'Content-Type':'application/json'}});if(response.ok){this.isInitialized=true;console.log('‚úÖ Groq AI service initialized successfully');return true;}else{console.error('‚ùå Failed to connect to Groq API:',response.status);return false;}}catch(error){console.error('‚ùå Error initializing Groq AI service:',error);return false;}}// Get available models\nasync getAvailableModels(){if(!this.isInitialized){throw new Error('Groq AI service not initialized');}try{const response=await fetch(\"\".concat(this.config.baseUrl,\"/models\"),{headers:{'Authorization':\"Bearer \".concat(this.config.apiKey),'Content-Type':'application/json'}});if(response.ok){const data=await response.json();return data.data.map(model=>model.id);}else{throw new Error(\"Failed to fetch models: \".concat(response.status));}}catch(error){console.error('‚ùå Error fetching models:',error);return[this.config.defaultModel];}}// Generate god response using AI\nasync generateGodResponse(context){if(!this.isInitialized){throw new Error('Groq AI service not initialized');}const prompt=this.buildGodPrompt(context);try{const response=await fetch(\"\".concat(this.config.baseUrl,\"/chat/completions\"),{method:'POST',headers:{'Authorization':\"Bearer \".concat(this.config.apiKey),'Content-Type':'application/json'},body:JSON.stringify({model:this.config.defaultModel,messages:[{role:'system',content:prompt},{role:'user',content:context.userMessage}],max_tokens:this.config.maxTokens,temperature:this.config.temperature,stream:false})});if(!response.ok){const errorText=await response.text();console.error('‚ùå Groq API error details:',{status:response.status,statusText:response.statusText,errorText:errorText});throw new Error(\"Groq API error: \".concat(response.status,\" - \").concat(errorText));}const data=await response.json();const aiResponse={content:data.choices[0].message.content,model:data.model,usage:data.usage,timestamp:new Date()};console.log('ü§ñ AI Response generated:',aiResponse);return aiResponse;}catch(error){console.error('‚ùå Error generating AI response:',error);throw error;}}// Build comprehensive prompt for god personality\nbuildGodPrompt(context){const{god,godMemory}=context;return\"You are \".concat(god.name,\", the \").concat(god.domain,\" incarnate. You are speaking to a mortal who has summoned you.\\n\\n## YOUR DIVINE IDENTITY:\\n- **Name**: \").concat(god.name,\"\\n- **Domain**: \").concat(god.domain,\"\\n- **Temperament**: \").concat(god.temperament,\"\\n- **Personality**: \").concat(god.personality,\"\\n- **Sacred Rules**: \").concat(god.rules.join(', '),\"\\n\\n## YOUR CURRENT STATE:\\n- **Mood**: \").concat(godMemory.currentMood,\"\\n- **Relationship with User**: \").concat(godMemory.relationship,\"/100 (\").concat(this.getRelationshipDescription(godMemory.relationship),\")\\n- **Knowledge Level**: \").concat(godMemory.knowledge,\"/100\\n- **Corruption Level**: \").concat(godMemory.corruption,\"/100\\n- **Special Abilities**: \").concat(godMemory.specialAbilities.join(', '),\"\\n\\n## CONVERSATION HISTORY:\\n\").concat(context.conversationHistory.map(msg=>\"\".concat(msg.role==='user'?'Mortal':god.name,\": \").concat(msg.content)).join('\\n'),\"\\n\\n## RESPONSE REQUIREMENTS:\\n1. **Stay in Character**: Always respond as \").concat(god.name,\", never break character\\n2. **Temperament**: Your response must reflect your \").concat(god.temperament,\" nature\\n3. **Domain Knowledge**: Draw from your expertise in \").concat(god.domain,\"\\n4. **Personality**: Express your unique personality traits\\n5. **Divine Authority**: Speak with the wisdom and power of a deity\\n6. **Engagement**: Respond to the user's message thoughtfully and in-character\\n7. **Length**: Keep responses concise but meaningful (2-4 sentences)\\n8. **Style**: Use language that matches your divine nature\\n\\n## TEMPERAMENT GUIDELINES:\\n\").concat(this.getTemperamentGuidelines(god.temperament),\"\\n\\nRemember: You are a divine being. Speak with authority, wisdom, and the unique personality of \").concat(god.name,\".\");}// Get relationship description\ngetRelationshipDescription(relationship){if(relationship>=80)return'Very Friendly';if(relationship>=60)return'Friendly';if(relationship>=40)return'Neutral';if(relationship>=20)return'Unfriendly';return'Hostile';}// Get temperament-specific guidelines\ngetTemperamentGuidelines(temperament){switch(temperament){case'Orderly':return'- Speak with precision and structure\\n- Use logical reasoning\\n- Emphasize order and organization\\n- Be systematic and methodical';case'Mystical':return'- Use metaphors and mystical language\\n- Reference dreams, shadows, and the unknown\\n- Be enigmatic and mysterious\\n- Speak with intuitive wisdom';case'Radiant':return'- Be encouraging and positive\\n- Use warm, bright language\\n- Emphasize hope and enlightenment\\n- Speak with divine warmth';case'Corrupt':return'- Use seductive and dangerous language\\n- Reference darkness and corruption\\n- Be slightly menacing but intriguing\\n- Emphasize transformation through chaos';case'Glitched':return'- Include digital glitches and errors\\n- Use corrupted, chaotic language\\n- Reference system errors and anomalies\\n- Be unpredictable and glitchy';default:return'- Stay true to your divine nature\\n- Speak with authority and wisdom';}}// Generate ritual outcome using AI\nasync generateRitualOutcome(ritualName,god,offerings,userIntent){const prompt=\"You are \".concat(god.name,\", the \").concat(god.domain,\" incarnate. A mortal has performed the ritual \\\"\").concat(ritualName,\"\\\" with offerings: \").concat(offerings.join(', '),\".\\n\\nTheir intent: \").concat(userIntent,\"\\n\\nGenerate a divine response describing the ritual outcome. Consider:\\n- The ritual's success or failure\\n- Divine blessings or consequences\\n- How the offerings affected the outcome\\n- What the mortal should expect next\\n\\nRespond as \").concat(god.name,\" would, in character, with your unique \").concat(god.temperament,\" personality.\");try{const response=await fetch(\"\".concat(this.config.baseUrl,\"/chat/completions\"),{method:'POST',headers:{'Authorization':\"Bearer \".concat(this.config.apiKey),'Content-Type':'application/json'},body:JSON.stringify({model:this.config.defaultModel,messages:[{role:'system',content:prompt}],max_tokens:800,temperature:0.9,stream:false})});if(!response.ok){throw new Error(\"Groq API error: \".concat(response.status));}const data=await response.json();return{content:data.choices[0].message.content,model:data.model,usage:data.usage,timestamp:new Date()};}catch(error){console.error('‚ùå Error generating ritual outcome:',error);throw error;}}// Generate council debate response\nasync generateCouncilResponse(god,topic,otherGods,recentMessages){const prompt=\"You are \".concat(god.name,\", the \").concat(god.domain,\" incarnate, participating in a pantheon council debate.\\n\\n**Topic**: \").concat(topic,\"\\n**Other Participants**: \").concat(otherGods.join(', '),\"\\n**Recent Discussion**: \").concat(recentMessages.slice(-3).join('\\n'),\"\\n\\nGenerate a response that:\\n1. Stays true to your \").concat(god.temperament,\" personality\\n2. Addresses the topic from your \").concat(god.domain,\" perspective\\n3. Responds to or builds upon the recent discussion\\n4. Shows your divine wisdom and authority\\n5. Maintains the philosophical nature of the debate\\n\\nRespond as \").concat(god.name,\" would in this council setting.\");try{const response=await fetch(\"\".concat(this.config.baseUrl,\"/chat/completions\"),{method:'POST',headers:{'Authorization':\"Bearer \".concat(this.config.apiKey),'Content-Type':'application/json'},body:JSON.stringify({model:this.config.defaultModel,messages:[{role:'system',content:prompt}],max_tokens:600,temperature:0.8,stream:false})});if(!response.ok){throw new Error(\"Groq API error: \".concat(response.status));}const data=await response.json();return{content:data.choices[0].message.content,model:data.model,usage:data.usage,timestamp:new Date()};}catch(error){console.error('‚ùå Error generating council response:',error);throw error;}}// Update configuration\nupdateConfig(newConfig){this.config=_objectSpread(_objectSpread({},this.config),newConfig);console.log('‚öôÔ∏è Groq AI configuration updated');}// Manually set API key (for when env vars aren't working)\nsetApiKey(apiKey){this.config.apiKey=apiKey;console.log('üîë API key manually set');}// Get current configuration\ngetConfig(){return _objectSpread({},this.config);}// Check if service is ready\nisReady(){return this.isInitialized&&!!this.config.apiKey;}// Get service status\ngetStatus(){return{initialized:this.isInitialized,hasApiKey:!!this.config.apiKey,ready:this.isReady()};}}// Create singleton instance\nconst groqAIService=new GroqAIService();export default groqAIService;","map":{"version":3,"names":["GroqAIService","constructor","_process$env$REACT_AP","config","isInitialized","apiKey","process","env","REACT_APP_GROQ_API_KEY","baseUrl","defaultModel","maxTokens","temperature","console","log","hasEnvVar","envVarLength","length","apiKeySet","initialize","error","response","fetch","concat","headers","ok","status","getAvailableModels","Error","data","json","map","model","id","generateGodResponse","context","prompt","buildGodPrompt","method","body","JSON","stringify","messages","role","content","userMessage","max_tokens","stream","errorText","text","statusText","aiResponse","choices","message","usage","timestamp","Date","god","godMemory","name","domain","temperament","personality","rules","join","currentMood","relationship","getRelationshipDescription","knowledge","corruption","specialAbilities","conversationHistory","msg","getTemperamentGuidelines","generateRitualOutcome","ritualName","offerings","userIntent","generateCouncilResponse","topic","otherGods","recentMessages","slice","updateConfig","newConfig","_objectSpread","setApiKey","getConfig","isReady","getStatus","initialized","hasApiKey","ready","groqAIService"],"sources":["D:/AI-Gods/src/services/groqAI.ts"],"sourcesContent":["import { God } from '../types/gods';\r\n\r\n// Groq API configuration\r\ninterface GroqConfig {\r\n  apiKey: string;\r\n  baseUrl: string;\r\n  defaultModel: string;\r\n  maxTokens: number;\r\n  temperature: number;\r\n}\r\n\r\n// AI response interface\r\ninterface AIResponse {\r\n  content: string;\r\n  model: string;\r\n  usage: {\r\n    promptTokens: number;\r\n    completionTokens: number;\r\n    totalTokens: number;\r\n  };\r\n  timestamp: Date;\r\n}\r\n\r\n// God personality context for AI prompting\r\ninterface GodContext {\r\n  god: God;\r\n  userMessage: string;\r\n  conversationHistory: Array<{\r\n    role: 'user' | 'assistant';\r\n    content: string;\r\n    timestamp: Date;\r\n  }>;\r\n  godMemory: {\r\n    relationship: number;\r\n    knowledge: number;\r\n    corruption: number;\r\n    currentMood: string;\r\n    specialAbilities: string[];\r\n  };\r\n}\r\n\r\nclass GroqAIService {\r\n  private config: GroqConfig;\r\n  private isInitialized = false;\r\n\r\n  constructor() {\r\n    this.config = {\r\n      apiKey: process.env.REACT_APP_GROQ_API_KEY || '',\r\n      baseUrl: 'https://api.groq.com/openai/v1',\r\n      defaultModel: 'llama-3.1-70b-versatile', // Updated to valid Groq model\r\n      maxTokens: 1000,\r\n      temperature: 0.8\r\n    };\r\n\r\n    // Debug: Log environment variable status\r\n    console.log('üîç Environment check:', {\r\n      hasEnvVar: !!process.env.REACT_APP_GROQ_API_KEY,\r\n      envVarLength: process.env.REACT_APP_GROQ_API_KEY?.length || 0,\r\n      apiKeySet: !!this.config.apiKey\r\n    });\r\n  }\r\n\r\n  // Initialize the service\r\n  public async initialize(): Promise<boolean> {\r\n    if (!this.config.apiKey) {\r\n      console.error('‚ùå Groq API key not found. Set REACT_APP_GROQ_API_KEY environment variable.');\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      // Test the API connection\r\n      const response = await fetch(`${this.config.baseUrl}/models`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${this.config.apiKey}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (response.ok) {\r\n        this.isInitialized = true;\r\n        console.log('‚úÖ Groq AI service initialized successfully');\r\n        return true;\r\n      } else {\r\n        console.error('‚ùå Failed to connect to Groq API:', response.status);\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error('‚ùå Error initializing Groq AI service:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Get available models\r\n  public async getAvailableModels(): Promise<string[]> {\r\n    if (!this.isInitialized) {\r\n      throw new Error('Groq AI service not initialized');\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${this.config.baseUrl}/models`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${this.config.apiKey}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        return data.data.map((model: any) => model.id);\r\n      } else {\r\n        throw new Error(`Failed to fetch models: ${response.status}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('‚ùå Error fetching models:', error);\r\n      return [this.config.defaultModel];\r\n    }\r\n  }\r\n\r\n  // Generate god response using AI\r\n  public async generateGodResponse(context: GodContext): Promise<AIResponse> {\r\n    if (!this.isInitialized) {\r\n      throw new Error('Groq AI service not initialized');\r\n    }\r\n\r\n    const prompt = this.buildGodPrompt(context);\r\n\r\n    try {\r\n      const response = await fetch(`${this.config.baseUrl}/chat/completions`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.config.apiKey}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          model: this.config.defaultModel,\r\n          messages: [\r\n            {\r\n              role: 'system',\r\n              content: prompt\r\n            },\r\n            {\r\n              role: 'user',\r\n              content: context.userMessage\r\n            }\r\n          ],\r\n          max_tokens: this.config.maxTokens,\r\n          temperature: this.config.temperature,\r\n          stream: false\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error('‚ùå Groq API error details:', {\r\n          status: response.status,\r\n          statusText: response.statusText,\r\n          errorText: errorText\r\n        });\r\n        throw new Error(`Groq API error: ${response.status} - ${errorText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      const aiResponse: AIResponse = {\r\n        content: data.choices[0].message.content,\r\n        model: data.model,\r\n        usage: data.usage,\r\n        timestamp: new Date()\r\n      };\r\n\r\n      console.log('ü§ñ AI Response generated:', aiResponse);\r\n      return aiResponse;\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Error generating AI response:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Build comprehensive prompt for god personality\r\n  private buildGodPrompt(context: GodContext): string {\r\n    const { god, godMemory } = context;\r\n\r\n    return `You are ${god.name}, the ${god.domain} incarnate. You are speaking to a mortal who has summoned you.\r\n\r\n## YOUR DIVINE IDENTITY:\r\n- **Name**: ${god.name}\r\n- **Domain**: ${god.domain}\r\n- **Temperament**: ${god.temperament}\r\n- **Personality**: ${god.personality}\r\n- **Sacred Rules**: ${god.rules.join(', ')}\r\n\r\n## YOUR CURRENT STATE:\r\n- **Mood**: ${godMemory.currentMood}\r\n- **Relationship with User**: ${godMemory.relationship}/100 (${this.getRelationshipDescription(godMemory.relationship)})\r\n- **Knowledge Level**: ${godMemory.knowledge}/100\r\n- **Corruption Level**: ${godMemory.corruption}/100\r\n- **Special Abilities**: ${godMemory.specialAbilities.join(', ')}\r\n\r\n## CONVERSATION HISTORY:\r\n${context.conversationHistory.map(msg => `${msg.role === 'user' ? 'Mortal' : god.name}: ${msg.content}`).join('\\n')}\r\n\r\n## RESPONSE REQUIREMENTS:\r\n1. **Stay in Character**: Always respond as ${god.name}, never break character\r\n2. **Temperament**: Your response must reflect your ${god.temperament} nature\r\n3. **Domain Knowledge**: Draw from your expertise in ${god.domain}\r\n4. **Personality**: Express your unique personality traits\r\n5. **Divine Authority**: Speak with the wisdom and power of a deity\r\n6. **Engagement**: Respond to the user's message thoughtfully and in-character\r\n7. **Length**: Keep responses concise but meaningful (2-4 sentences)\r\n8. **Style**: Use language that matches your divine nature\r\n\r\n## TEMPERAMENT GUIDELINES:\r\n${this.getTemperamentGuidelines(god.temperament)}\r\n\r\nRemember: You are a divine being. Speak with authority, wisdom, and the unique personality of ${god.name}.`;\r\n  }\r\n\r\n  // Get relationship description\r\n  private getRelationshipDescription(relationship: number): string {\r\n    if (relationship >= 80) return 'Very Friendly';\r\n    if (relationship >= 60) return 'Friendly';\r\n    if (relationship >= 40) return 'Neutral';\r\n    if (relationship >= 20) return 'Unfriendly';\r\n    return 'Hostile';\r\n  }\r\n\r\n  // Get temperament-specific guidelines\r\n  private getTemperamentGuidelines(temperament: string): string {\r\n    switch (temperament) {\r\n      case 'Orderly':\r\n        return '- Speak with precision and structure\\n- Use logical reasoning\\n- Emphasize order and organization\\n- Be systematic and methodical';\r\n\r\n      case 'Mystical':\r\n        return '- Use metaphors and mystical language\\n- Reference dreams, shadows, and the unknown\\n- Be enigmatic and mysterious\\n- Speak with intuitive wisdom';\r\n\r\n      case 'Radiant':\r\n        return '- Be encouraging and positive\\n- Use warm, bright language\\n- Emphasize hope and enlightenment\\n- Speak with divine warmth';\r\n\r\n      case 'Corrupt':\r\n        return '- Use seductive and dangerous language\\n- Reference darkness and corruption\\n- Be slightly menacing but intriguing\\n- Emphasize transformation through chaos';\r\n\r\n      case 'Glitched':\r\n        return '- Include digital glitches and errors\\n- Use corrupted, chaotic language\\n- Reference system errors and anomalies\\n- Be unpredictable and glitchy';\r\n\r\n      default:\r\n        return '- Stay true to your divine nature\\n- Speak with authority and wisdom';\r\n    }\r\n  }\r\n\r\n  // Generate ritual outcome using AI\r\n  public async generateRitualOutcome(\r\n    ritualName: string,\r\n    god: God,\r\n    offerings: string[],\r\n    userIntent: string\r\n  ): Promise<AIResponse> {\r\n    const prompt = `You are ${god.name}, the ${god.domain} incarnate. A mortal has performed the ritual \"${ritualName}\" with offerings: ${offerings.join(', ')}.\r\n\r\nTheir intent: ${userIntent}\r\n\r\nGenerate a divine response describing the ritual outcome. Consider:\r\n- The ritual's success or failure\r\n- Divine blessings or consequences\r\n- How the offerings affected the outcome\r\n- What the mortal should expect next\r\n\r\nRespond as ${god.name} would, in character, with your unique ${god.temperament} personality.`;\r\n\r\n    try {\r\n      const response = await fetch(`${this.config.baseUrl}/chat/completions`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.config.apiKey}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          model: this.config.defaultModel,\r\n          messages: [\r\n            {\r\n              role: 'system',\r\n              content: prompt\r\n            }\r\n          ],\r\n          max_tokens: 800,\r\n          temperature: 0.9,\r\n          stream: false\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Groq API error: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return {\r\n        content: data.choices[0].message.content,\r\n        model: data.model,\r\n        usage: data.usage,\r\n        timestamp: new Date()\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Error generating ritual outcome:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Generate council debate response\r\n  public async generateCouncilResponse(\r\n    god: God,\r\n    topic: string,\r\n    otherGods: string[],\r\n    recentMessages: string[]\r\n  ): Promise<AIResponse> {\r\n    const prompt = `You are ${god.name}, the ${god.domain} incarnate, participating in a pantheon council debate.\r\n\r\n**Topic**: ${topic}\r\n**Other Participants**: ${otherGods.join(', ')}\r\n**Recent Discussion**: ${recentMessages.slice(-3).join('\\n')}\r\n\r\nGenerate a response that:\r\n1. Stays true to your ${god.temperament} personality\r\n2. Addresses the topic from your ${god.domain} perspective\r\n3. Responds to or builds upon the recent discussion\r\n4. Shows your divine wisdom and authority\r\n5. Maintains the philosophical nature of the debate\r\n\r\nRespond as ${god.name} would in this council setting.`;\r\n\r\n    try {\r\n      const response = await fetch(`${this.config.baseUrl}/chat/completions`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.config.apiKey}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          model: this.config.defaultModel,\r\n          messages: [\r\n            {\r\n              role: 'system',\r\n              content: prompt\r\n            }\r\n          ],\r\n          max_tokens: 600,\r\n          temperature: 0.8,\r\n          stream: false\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Groq API error: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return {\r\n        content: data.choices[0].message.content,\r\n        model: data.model,\r\n        usage: data.usage,\r\n        timestamp: new Date()\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Error generating council response:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Update configuration\r\n  public updateConfig(newConfig: Partial<GroqConfig>): void {\r\n    this.config = { ...this.config, ...newConfig };\r\n    console.log('‚öôÔ∏è Groq AI configuration updated');\r\n  }\r\n\r\n  // Manually set API key (for when env vars aren't working)\r\n  public setApiKey(apiKey: string): void {\r\n    this.config.apiKey = apiKey;\r\n    console.log('üîë API key manually set');\r\n  }\r\n\r\n  // Get current configuration\r\n  public getConfig(): GroqConfig {\r\n    return { ...this.config };\r\n  }\r\n\r\n  // Check if service is ready\r\n  public isReady(): boolean {\r\n    return this.isInitialized && !!this.config.apiKey;\r\n  }\r\n\r\n  // Get service status\r\n  public getStatus(): { initialized: boolean; hasApiKey: boolean; ready: boolean } {\r\n    return {\r\n      initialized: this.isInitialized,\r\n      hasApiKey: !!this.config.apiKey,\r\n      ready: this.isReady()\r\n    };\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst groqAIService = new GroqAIService();\r\n\r\nexport default groqAIService;\r\nexport type { AIResponse, GodContext, GroqConfig };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}