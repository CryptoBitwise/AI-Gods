{"ast":null,"code":"import { memoryService } from './memory';\nclass PantheonCouncilService {\n  constructor() {\n    this.currentSession = null;\n    this.isRunning = false;\n    this.messageQueue = [];\n    this.turnTimer = null;\n    this.sessionTimer = null;\n    // Predefined topics for the council\n    this.topics = [{\n      id: 'creation-vs-destruction',\n      title: 'The Balance of Creation and Destruction',\n      description: 'A philosophical debate about the necessity of both creation and destruction in the cosmic order.',\n      category: 'philosophy',\n      complexity: 'complex',\n      gods: ['orderly', 'corrupt', 'radiant'],\n      prompts: ['What is the true purpose of creation?', 'Is destruction always necessary for new creation?', 'How do we maintain balance between order and chaos?']\n    }, {\n      id: 'mortality-divinity',\n      title: 'The Nature of Mortality and Divinity',\n      description: 'Exploring the relationship between mortal existence and divine nature.',\n      category: 'divinity',\n      complexity: 'moderate',\n      gods: ['mystical', 'radiant', 'glitched'],\n      prompts: ['What makes a being truly divine?', 'Is mortality a curse or a blessing?', 'Can mortals achieve divinity?']\n    }, {\n      id: 'cosmic-order',\n      title: 'The Structure of Cosmic Order',\n      description: 'Debating the fundamental laws that govern reality itself.',\n      category: 'order',\n      complexity: 'complex',\n      gods: ['orderly', 'mystical', 'glitched'],\n      prompts: ['What are the fundamental laws of reality?', 'Is chaos necessary for order to exist?', 'How do we define cosmic justice?']\n    }, {\n      id: 'divine-intervention',\n      title: 'The Ethics of Divine Intervention',\n      description: 'When should gods interfere in mortal affairs?',\n      category: 'politics',\n      complexity: 'moderate',\n      gods: ['radiant', 'corrupt', 'orderly'],\n      prompts: ['When is divine intervention justified?', 'What are the consequences of godly interference?', 'Should gods remain distant or actively guide mortals?']\n    }, {\n      id: 'reality-nature',\n      title: 'The True Nature of Reality',\n      description: 'A deep philosophical exploration of what reality truly is.',\n      category: 'philosophy',\n      complexity: 'complex',\n      gods: ['mystical', 'glitched', 'radiant'],\n      prompts: ['What is the fundamental nature of existence?', 'Are we all part of a greater consciousness?', 'Is reality objective or subjective?']\n    }];\n  }\n  // Get available topics\n  getTopics() {\n    return this.topics;\n  }\n\n  // Get topics suitable for given gods\n  getTopicsForGods(gods) {\n    const godIds = gods.map(god => god.temperament.toLowerCase());\n    return this.topics.filter(topic => topic.gods.some(godId => godIds.includes(godId)));\n  }\n\n  // Start a new council session\n  async startCouncil(gods, topic, settings = {}) {\n    if (this.currentSession) {\n      throw new Error('A council session is already active');\n    }\n    if (gods.length < 2) {\n      throw new Error('At least 2 gods are required for a council');\n    }\n    if (gods.length > 6) {\n      throw new Error('Maximum 6 gods allowed in council');\n    }\n    const defaultSettings = {\n      maxParticipants: 6,\n      sessionDuration: 30,\n      turnLength: 15,\n      allowInterruptions: true,\n      allowRituals: true,\n      topicComplexity: 'moderate',\n      moodIntensity: 'moderate'\n    };\n    const finalSettings = {\n      ...defaultSettings,\n      ...settings\n    };\n    const session = {\n      id: `council-${Date.now()}`,\n      gods,\n      topic: topic.title,\n      messages: [],\n      status: 'preparing',\n      startTime: new Date(),\n      settings: finalSettings\n    };\n    this.currentSession = session;\n    this.isRunning = false;\n\n    // Add opening message\n    const openingMessage = {\n      id: `msg-${Date.now()}`,\n      godId: 'system',\n      godName: 'Council Herald',\n      godTemperament: 'neutral',\n      content: `The Pantheon Council is now in session. Topic: \"${topic.title}\". ${gods.length} deities have gathered to discuss ${topic.description}`,\n      timestamp: new Date(),\n      type: 'speech',\n      emotion: 'neutral'\n    };\n    session.messages.push(openingMessage);\n\n    // Initialize god memories for this session\n    await this.initializeSessionMemories(session);\n    return session;\n  }\n\n  // Initialize memories for all gods in the session\n  async initializeSessionMemories(session) {\n    for (const god of session.gods) {\n      const memory = await memoryService.getGodMemory(god.id);\n      if (memory) {\n        // Add council session memory\n        await memoryService.addMemory(god.id, {\n          id: `council-${session.id}`,\n          type: 'council',\n          content: `Participating in Pantheon Council session \"${session.topic}\" with ${session.gods.length - 1} other deities`,\n          timestamp: new Date(),\n          importance: 'high',\n          tags: ['council', 'pantheon', 'debate', session.topic.toLowerCase().replace(/\\s+/g, '-')],\n          emotionalImpact: 'neutral',\n          relationships: session.gods.filter(g => g.id !== god.id).map(g => ({\n            godId: g.id,\n            impact: 'neutral'\n          }))\n        });\n      }\n    }\n  }\n\n  // Start the council discussion\n  async startDiscussion() {\n    if (!this.currentSession) {\n      throw new Error('No active council session');\n    }\n    if (this.isRunning) {\n      throw new Error('Council discussion is already running');\n    }\n    this.currentSession.status = 'active';\n    this.isRunning = true;\n\n    // Start the session timer\n    this.sessionTimer = setTimeout(() => {\n      this.endCouncil();\n    }, this.currentSession.settings.sessionDuration * 60 * 1000);\n\n    // Start the first turn\n    await this.nextTurn();\n  }\n\n  // Handle the next turn in the council\n  async nextTurn() {\n    if (!this.currentSession || !this.isRunning) return;\n\n    // Select next god to speak\n    const nextGod = this.selectNextSpeaker();\n    if (!nextGod) return;\n\n    // Generate AI response for the god\n    const response = await this.generateGodResponse(nextGod);\n    if (response) {\n      this.currentSession.messages.push(response);\n      this.messageQueue.push(response);\n\n      // Trigger TTS if available\n      this.speakMessage(response);\n    }\n\n    // Schedule next turn\n    this.turnTimer = setTimeout(() => {\n      this.nextTurn();\n    }, this.currentSession.settings.turnLength * 1000);\n  }\n\n  // Select the next god to speak\n  selectNextSpeaker() {\n    if (!this.currentSession) return null;\n    const {\n      gods,\n      messages,\n      settings\n    } = this.currentSession;\n\n    // Get the last few messages to see who has spoken recently\n    const recentSpeakers = messages.slice(-3).map(msg => msg.godId).filter(id => id !== 'system');\n\n    // Find gods who haven't spoken recently\n    const availableGods = gods.filter(god => !recentSpeakers.includes(god.id));\n    if (availableGods.length === 0) {\n      // If all gods have spoken recently, pick randomly\n      return gods[Math.floor(Math.random() * gods.length)];\n    }\n\n    // Pick from available gods, with some randomness\n    return availableGods[Math.floor(Math.random() * availableGods.length)];\n  }\n\n  // Generate AI response for a god\n  async generateGodResponse(god) {\n    if (!this.currentSession) return null;\n    try {\n      // Get god's memory and personality\n      const memory = await memoryService.getGodMemory(god.id);\n      const recentMessages = this.currentSession.messages.slice(-5);\n\n      // Build context for AI\n      const context = this.buildAIContext(god, recentMessages);\n\n      // Generate response using AI (placeholder for now)\n      const content = await this.callAI(god, context);\n      if (!content) return null;\n      const message = {\n        id: `msg-${Date.now()}-${god.id}`,\n        godId: god.id,\n        godName: god.name,\n        godTemperament: god.temperament,\n        content,\n        timestamp: new Date(),\n        type: 'speech',\n        emotion: this.determineEmotion(content, god.temperament)\n      };\n      return message;\n    } catch (error) {\n      console.error('Failed to generate god response:', error);\n      return null;\n    }\n  }\n\n  // Build context for AI generation\n  buildAIContext(god, recentMessages) {\n    var _this$currentSession, _this$currentSession2;\n    const topic = ((_this$currentSession = this.currentSession) === null || _this$currentSession === void 0 ? void 0 : _this$currentSession.topic) || '';\n    const otherGods = ((_this$currentSession2 = this.currentSession) === null || _this$currentSession2 === void 0 ? void 0 : _this$currentSession2.gods.filter(g => g.id !== god.id)) || [];\n    let context = `You are ${god.name}, the ${god.domain}. Your temperament is ${god.temperament}. `;\n    context += `You are participating in a Pantheon Council discussion about: \"${topic}\". `;\n    if (otherGods.length > 0) {\n      context += `Other participants include: ${otherGods.map(g => g.name).join(', ')}. `;\n    }\n    if (recentMessages.length > 0) {\n      context += `Recent discussion: ${recentMessages.map(msg => `${msg.godName}: \"${msg.content}\"`).join(' ')} `;\n    }\n    context += `Respond as ${god.name} would, considering your domain (${god.domain}) and temperament (${god.temperament}). `;\n    context += `Keep your response under 200 words and make it engaging for the council.`;\n    return context;\n  }\n\n  // Call AI service (placeholder - will be replaced with real AI)\n  async callAI(god, context) {\n    // For now, return a placeholder response\n    // This will be replaced with actual AI calls when Ollama is set up\n    const responses = {\n      'Orderly': [`As the embodiment of ${god.domain}, I must emphasize the importance of structure and order in this matter.`, `The principles of ${god.domain} demand that we consider the systematic implications of our discussion.`, `From my divine perspective on ${god.domain}, I see clear patterns that we must acknowledge.`],\n      'Mystical': [`The ancient wisdom of ${god.domain} reveals deeper truths beyond our current understanding.`, `Through the mystical lens of ${god.domain}, I perceive connections that others might miss.`, `The cosmic forces of ${god.domain} whisper secrets that we would do well to heed.`],\n      'Radiant': [`The light of ${god.domain} illuminates the path forward for us all.`, `Through the radiant power of ${god.domain}, I see hope and possibility in our discussion.`, `Let the divine energy of ${god.domain} guide us toward enlightenment.`],\n      'Corrupt': [`The dark truths of ${god.domain} reveal the flaws in your arguments.`, `You speak of order, but ${god.domain} shows us the beauty in chaos and corruption.`, `The corrupting influence of ${god.domain} exposes the weaknesses in your position.`],\n      'Glitched': [`ERROR: ${god.domain} protocols indicate... *static* ... unexpected variables in the equation.`, `The glitched nature of ${god.domain} suggests... *interference* ... alternative solutions.`, `*corruption* ... ${god.domain} analysis reveals... *error* ... interesting anomalies.`]\n    };\n    const godResponses = responses[god.temperament] || responses['Orderly'];\n    return godResponses[Math.floor(Math.random() * godResponses.length)];\n  }\n\n  // Determine emotion from content and temperament\n  determineEmotion(content, temperament) {\n    const lowerContent = content.toLowerCase();\n    if (lowerContent.includes('laugh') || lowerContent.includes('amuse')) return 'amused';\n    if (lowerContent.includes('anger') || lowerContent.includes('rage') || lowerContent.includes('fury')) return 'angry';\n    if (lowerContent.includes('curious') || lowerContent.includes('wonder') || lowerContent.includes('question')) return 'curious';\n    if (lowerContent.includes('dismiss') || lowerContent.includes('ignore') || lowerContent.includes('trivial')) return 'dismissive';\n    if (lowerContent.includes('respect') || lowerContent.includes('honor') || lowerContent.includes('revere')) return 'respectful';\n    if (lowerContent.includes('threat') || lowerContent.includes('warning') || lowerContent.includes('danger')) return 'threatening';\n    return 'neutral';\n  }\n\n  // Speak message using TTS\n  speakMessage(message) {\n    // This will integrate with the TTS service\n    console.log(`🎤 ${message.godName}: ${message.content}`);\n  }\n\n  // Pause the council\n  pauseCouncil() {\n    if (this.turnTimer) {\n      clearTimeout(this.turnTimer);\n      this.turnTimer = null;\n    }\n    if (this.currentSession) {\n      this.currentSession.status = 'paused';\n    }\n    this.isRunning = false;\n  }\n\n  // Resume the council\n  resumeCouncil() {\n    if (this.currentSession && this.currentSession.status === 'paused') {\n      this.currentSession.status = 'active';\n      this.isRunning = true;\n      this.nextTurn();\n    }\n  }\n\n  // End the council\n  endCouncil() {\n    if (this.turnTimer) {\n      clearTimeout(this.turnTimer);\n      this.turnTimer = null;\n    }\n    if (this.sessionTimer) {\n      clearTimeout(this.sessionTimer);\n      this.sessionTimer = null;\n    }\n    if (this.currentSession) {\n      this.currentSession.status = 'concluded';\n      this.currentSession.endTime = new Date();\n\n      // Add closing message\n      const closingMessage = {\n        id: `msg-${Date.now()}`,\n        godId: 'system',\n        godName: 'Council Herald',\n        godTemperament: 'neutral',\n        content: `The Pantheon Council session \"${this.currentSession.topic}\" has concluded. ${this.currentSession.messages.length - 1} divine insights were shared.`,\n        timestamp: new Date(),\n        type: 'speech',\n        emotion: 'neutral'\n      };\n      this.currentSession.messages.push(closingMessage);\n    }\n    this.isRunning = false;\n  }\n\n  // Get current session\n  getCurrentSession() {\n    return this.currentSession;\n  }\n\n  // Get session history\n  getSessionHistory() {\n    // This would load from storage\n    return [];\n  }\n\n  // Add a manual message (for user interaction)\n  addManualMessage(godId, content) {\n    if (!this.currentSession) return;\n    const god = this.currentSession.gods.find(g => g.id === godId);\n    if (!god) return;\n    const message = {\n      id: `msg-${Date.now()}-${godId}`,\n      godId,\n      godName: god.name,\n      godTemperament: god.temperament,\n      content,\n      timestamp: new Date(),\n      type: 'speech',\n      emotion: this.determineEmotion(content, god.temperament)\n    };\n    this.currentSession.messages.push(message);\n    this.speakMessage(message);\n  }\n\n  // Get message queue (for real-time updates)\n  getMessageQueue() {\n    return [...this.messageQueue];\n  }\n\n  // Clear message queue\n  clearMessageQueue() {\n    this.messageQueue = [];\n  }\n}\n\n// Export singleton instance\nexport const pantheonCouncilService = new PantheonCouncilService();\nexport default pantheonCouncilService;","map":{"version":3,"names":["memoryService","PantheonCouncilService","constructor","currentSession","isRunning","messageQueue","turnTimer","sessionTimer","topics","id","title","description","category","complexity","gods","prompts","getTopics","getTopicsForGods","godIds","map","god","temperament","toLowerCase","filter","topic","some","godId","includes","startCouncil","settings","Error","length","defaultSettings","maxParticipants","sessionDuration","turnLength","allowInterruptions","allowRituals","topicComplexity","moodIntensity","finalSettings","session","Date","now","messages","status","startTime","openingMessage","godName","godTemperament","content","timestamp","type","emotion","push","initializeSessionMemories","memory","getGodMemory","addMemory","importance","tags","replace","emotionalImpact","relationships","g","impact","startDiscussion","setTimeout","endCouncil","nextTurn","nextGod","selectNextSpeaker","response","generateGodResponse","speakMessage","recentSpeakers","slice","msg","availableGods","Math","floor","random","recentMessages","context","buildAIContext","callAI","message","name","determineEmotion","error","console","_this$currentSession","_this$currentSession2","otherGods","domain","join","responses","godResponses","lowerContent","log","pauseCouncil","clearTimeout","resumeCouncil","endTime","closingMessage","getCurrentSession","getSessionHistory","addManualMessage","find","getMessageQueue","clearMessageQueue","pantheonCouncilService"],"sources":["D:/AI-Gods/src/services/pantheonCouncil.ts"],"sourcesContent":["import { God } from '../types/gods';\r\nimport { memoryService } from './memory';\r\n\r\nexport interface CouncilSession {\r\n  id: string;\r\n  gods: God[];\r\n  topic: string;\r\n  messages: CouncilMessage[];\r\n  status: 'preparing' | 'active' | 'paused' | 'concluded';\r\n  startTime: Date;\r\n  endTime?: Date;\r\n  settings: CouncilSettings;\r\n}\r\n\r\nexport interface CouncilMessage {\r\n  id: string;\r\n  godId: string;\r\n  godName: string;\r\n  godTemperament: string;\r\n  content: string;\r\n  timestamp: Date;\r\n  type: 'speech' | 'reaction' | 'ritual' | 'interruption';\r\n  targetGodId?: string; // If addressing a specific god\r\n  emotion: 'neutral' | 'amused' | 'angry' | 'curious' | 'dismissive' | 'respectful' | 'threatening';\r\n}\r\n\r\nexport interface CouncilSettings {\r\n  maxParticipants: number;\r\n  sessionDuration: number; // minutes\r\n  turnLength: number; // seconds\r\n  allowInterruptions: boolean;\r\n  allowRituals: boolean;\r\n  topicComplexity: 'simple' | 'moderate' | 'complex';\r\n  moodIntensity: 'calm' | 'moderate' | 'intense';\r\n}\r\n\r\nexport interface CouncilTopic {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  category: 'philosophy' | 'politics' | 'creation' | 'destruction' | 'mortality' | 'divinity' | 'chaos' | 'order';\r\n  complexity: 'simple' | 'moderate' | 'complex';\r\n  gods: string[]; // God IDs that would be interested\r\n  prompts: string[];\r\n}\r\n\r\nclass PantheonCouncilService {\r\n  private currentSession: CouncilSession | null = null;\r\n  private isRunning = false;\r\n  private messageQueue: CouncilMessage[] = [];\r\n  private turnTimer: NodeJS.Timeout | null = null;\r\n  private sessionTimer: NodeJS.Timeout | null = null;\r\n\r\n  // Predefined topics for the council\r\n  private topics: CouncilTopic[] = [\r\n    {\r\n      id: 'creation-vs-destruction',\r\n      title: 'The Balance of Creation and Destruction',\r\n      description: 'A philosophical debate about the necessity of both creation and destruction in the cosmic order.',\r\n      category: 'philosophy',\r\n      complexity: 'complex',\r\n      gods: ['orderly', 'corrupt', 'radiant'],\r\n      prompts: [\r\n        'What is the true purpose of creation?',\r\n        'Is destruction always necessary for new creation?',\r\n        'How do we maintain balance between order and chaos?'\r\n      ]\r\n    },\r\n    {\r\n      id: 'mortality-divinity',\r\n      title: 'The Nature of Mortality and Divinity',\r\n      description: 'Exploring the relationship between mortal existence and divine nature.',\r\n      category: 'divinity',\r\n      complexity: 'moderate',\r\n      gods: ['mystical', 'radiant', 'glitched'],\r\n      prompts: [\r\n        'What makes a being truly divine?',\r\n        'Is mortality a curse or a blessing?',\r\n        'Can mortals achieve divinity?'\r\n      ]\r\n    },\r\n    {\r\n      id: 'cosmic-order',\r\n      title: 'The Structure of Cosmic Order',\r\n      description: 'Debating the fundamental laws that govern reality itself.',\r\n      category: 'order',\r\n      complexity: 'complex',\r\n      gods: ['orderly', 'mystical', 'glitched'],\r\n      prompts: [\r\n        'What are the fundamental laws of reality?',\r\n        'Is chaos necessary for order to exist?',\r\n        'How do we define cosmic justice?'\r\n      ]\r\n    },\r\n    {\r\n      id: 'divine-intervention',\r\n      title: 'The Ethics of Divine Intervention',\r\n      description: 'When should gods interfere in mortal affairs?',\r\n      category: 'politics',\r\n      complexity: 'moderate',\r\n      gods: ['radiant', 'corrupt', 'orderly'],\r\n      prompts: [\r\n        'When is divine intervention justified?',\r\n        'What are the consequences of godly interference?',\r\n        'Should gods remain distant or actively guide mortals?'\r\n      ]\r\n    },\r\n    {\r\n      id: 'reality-nature',\r\n      title: 'The True Nature of Reality',\r\n      description: 'A deep philosophical exploration of what reality truly is.',\r\n      category: 'philosophy',\r\n      complexity: 'complex',\r\n      gods: ['mystical', 'glitched', 'radiant'],\r\n      prompts: [\r\n        'What is the fundamental nature of existence?',\r\n        'Are we all part of a greater consciousness?',\r\n        'Is reality objective or subjective?'\r\n      ]\r\n    }\r\n  ];\r\n\r\n  // Get available topics\r\n  public getTopics(): CouncilTopic[] {\r\n    return this.topics;\r\n  }\r\n\r\n  // Get topics suitable for given gods\r\n  public getTopicsForGods(gods: God[]): CouncilTopic[] {\r\n    const godIds = gods.map(god => god.temperament.toLowerCase());\r\n    return this.topics.filter(topic => \r\n      topic.gods.some(godId => godIds.includes(godId))\r\n    );\r\n  }\r\n\r\n  // Start a new council session\r\n  public async startCouncil(\r\n    gods: God[], \r\n    topic: CouncilTopic, \r\n    settings: Partial<CouncilSettings> = {}\r\n  ): Promise<CouncilSession> {\r\n    if (this.currentSession) {\r\n      throw new Error('A council session is already active');\r\n    }\r\n\r\n    if (gods.length < 2) {\r\n      throw new Error('At least 2 gods are required for a council');\r\n    }\r\n\r\n    if (gods.length > 6) {\r\n      throw new Error('Maximum 6 gods allowed in council');\r\n    }\r\n\r\n    const defaultSettings: CouncilSettings = {\r\n      maxParticipants: 6,\r\n      sessionDuration: 30,\r\n      turnLength: 15,\r\n      allowInterruptions: true,\r\n      allowRituals: true,\r\n      topicComplexity: 'moderate',\r\n      moodIntensity: 'moderate'\r\n    };\r\n\r\n    const finalSettings = { ...defaultSettings, ...settings };\r\n\r\n    const session: CouncilSession = {\r\n      id: `council-${Date.now()}`,\r\n      gods,\r\n      topic: topic.title,\r\n      messages: [],\r\n      status: 'preparing',\r\n      startTime: new Date(),\r\n      settings: finalSettings\r\n    };\r\n\r\n    this.currentSession = session;\r\n    this.isRunning = false;\r\n\r\n    // Add opening message\r\n    const openingMessage: CouncilMessage = {\r\n      id: `msg-${Date.now()}`,\r\n      godId: 'system',\r\n      godName: 'Council Herald',\r\n      godTemperament: 'neutral',\r\n      content: `The Pantheon Council is now in session. Topic: \"${topic.title}\". ${gods.length} deities have gathered to discuss ${topic.description}`,\r\n      timestamp: new Date(),\r\n      type: 'speech',\r\n      emotion: 'neutral'\r\n    };\r\n\r\n    session.messages.push(openingMessage);\r\n\r\n    // Initialize god memories for this session\r\n    await this.initializeSessionMemories(session);\r\n\r\n    return session;\r\n  }\r\n\r\n  // Initialize memories for all gods in the session\r\n  private async initializeSessionMemories(session: CouncilSession): Promise<void> {\r\n    for (const god of session.gods) {\r\n      const memory = await memoryService.getGodMemory(god.id);\r\n      if (memory) {\r\n        // Add council session memory\r\n        await memoryService.addMemory(god.id, {\r\n          id: `council-${session.id}`,\r\n          type: 'council',\r\n          content: `Participating in Pantheon Council session \"${session.topic}\" with ${session.gods.length - 1} other deities`,\r\n          timestamp: new Date(),\r\n          importance: 'high',\r\n          tags: ['council', 'pantheon', 'debate', session.topic.toLowerCase().replace(/\\s+/g, '-')],\r\n          emotionalImpact: 'neutral',\r\n          relationships: session.gods\r\n            .filter(g => g.id !== god.id)\r\n            .map(g => ({ godId: g.id, impact: 'neutral' }))\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  // Start the council discussion\r\n  public async startDiscussion(): Promise<void> {\r\n    if (!this.currentSession) {\r\n      throw new Error('No active council session');\r\n    }\r\n\r\n    if (this.isRunning) {\r\n      throw new Error('Council discussion is already running');\r\n    }\r\n\r\n    this.currentSession.status = 'active';\r\n    this.isRunning = true;\r\n\r\n    // Start the session timer\r\n    this.sessionTimer = setTimeout(() => {\r\n      this.endCouncil();\r\n    }, this.currentSession.settings.sessionDuration * 60 * 1000);\r\n\r\n    // Start the first turn\r\n    await this.nextTurn();\r\n  }\r\n\r\n  // Handle the next turn in the council\r\n  private async nextTurn(): Promise<void> {\r\n    if (!this.currentSession || !this.isRunning) return;\r\n\r\n    // Select next god to speak\r\n    const nextGod = this.selectNextSpeaker();\r\n    if (!nextGod) return;\r\n\r\n    // Generate AI response for the god\r\n    const response = await this.generateGodResponse(nextGod);\r\n    \r\n    if (response) {\r\n      this.currentSession.messages.push(response);\r\n      this.messageQueue.push(response);\r\n\r\n      // Trigger TTS if available\r\n      this.speakMessage(response);\r\n    }\r\n\r\n    // Schedule next turn\r\n    this.turnTimer = setTimeout(() => {\r\n      this.nextTurn();\r\n    }, this.currentSession.settings.turnLength * 1000);\r\n  }\r\n\r\n  // Select the next god to speak\r\n  private selectNextSpeaker(): God | null {\r\n    if (!this.currentSession) return null;\r\n\r\n    const { gods, messages, settings } = this.currentSession;\r\n    \r\n    // Get the last few messages to see who has spoken recently\r\n    const recentSpeakers = messages\r\n      .slice(-3)\r\n      .map(msg => msg.godId)\r\n      .filter(id => id !== 'system');\r\n\r\n    // Find gods who haven't spoken recently\r\n    const availableGods = gods.filter(god => \r\n      !recentSpeakers.includes(god.id)\r\n    );\r\n\r\n    if (availableGods.length === 0) {\r\n      // If all gods have spoken recently, pick randomly\r\n      return gods[Math.floor(Math.random() * gods.length)];\r\n    }\r\n\r\n    // Pick from available gods, with some randomness\r\n    return availableGods[Math.floor(Math.random() * availableGods.length)];\r\n  }\r\n\r\n  // Generate AI response for a god\r\n  private async generateGodResponse(god: God): Promise<CouncilMessage | null> {\r\n    if (!this.currentSession) return null;\r\n\r\n    try {\r\n      // Get god's memory and personality\r\n      const memory = await memoryService.getGodMemory(god.id);\r\n      const recentMessages = this.currentSession.messages.slice(-5);\r\n      \r\n      // Build context for AI\r\n      const context = this.buildAIContext(god, recentMessages);\r\n      \r\n      // Generate response using AI (placeholder for now)\r\n      const content = await this.callAI(god, context);\r\n      \r\n      if (!content) return null;\r\n\r\n      const message: CouncilMessage = {\r\n        id: `msg-${Date.now()}-${god.id}`,\r\n        godId: god.id,\r\n        godName: god.name,\r\n        godTemperament: god.temperament,\r\n        content,\r\n        timestamp: new Date(),\r\n        type: 'speech',\r\n        emotion: this.determineEmotion(content, god.temperament)\r\n      };\r\n\r\n      return message;\r\n    } catch (error) {\r\n      console.error('Failed to generate god response:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Build context for AI generation\r\n  private buildAIContext(god: God, recentMessages: CouncilMessage[]): string {\r\n    const topic = this.currentSession?.topic || '';\r\n    const otherGods = this.currentSession?.gods.filter(g => g.id !== god.id) || [];\r\n    \r\n    let context = `You are ${god.name}, the ${god.domain}. Your temperament is ${god.temperament}. `;\r\n    context += `You are participating in a Pantheon Council discussion about: \"${topic}\". `;\r\n    \r\n    if (otherGods.length > 0) {\r\n      context += `Other participants include: ${otherGods.map(g => g.name).join(', ')}. `;\r\n    }\r\n\r\n    if (recentMessages.length > 0) {\r\n      context += `Recent discussion: ${recentMessages.map(msg => \r\n        `${msg.godName}: \"${msg.content}\"`\r\n      ).join(' ')} `;\r\n    }\r\n\r\n    context += `Respond as ${god.name} would, considering your domain (${god.domain}) and temperament (${god.temperament}). `;\r\n    context += `Keep your response under 200 words and make it engaging for the council.`;\r\n\r\n    return context;\r\n  }\r\n\r\n  // Call AI service (placeholder - will be replaced with real AI)\r\n  private async callAI(god: God, context: string): Promise<string | null> {\r\n    // For now, return a placeholder response\r\n    // This will be replaced with actual AI calls when Ollama is set up\r\n    const responses = {\r\n      'Orderly': [\r\n        `As the embodiment of ${god.domain}, I must emphasize the importance of structure and order in this matter.`,\r\n        `The principles of ${god.domain} demand that we consider the systematic implications of our discussion.`,\r\n        `From my divine perspective on ${god.domain}, I see clear patterns that we must acknowledge.`\r\n      ],\r\n      'Mystical': [\r\n        `The ancient wisdom of ${god.domain} reveals deeper truths beyond our current understanding.`,\r\n        `Through the mystical lens of ${god.domain}, I perceive connections that others might miss.`,\r\n        `The cosmic forces of ${god.domain} whisper secrets that we would do well to heed.`\r\n      ],\r\n      'Radiant': [\r\n        `The light of ${god.domain} illuminates the path forward for us all.`,\r\n        `Through the radiant power of ${god.domain}, I see hope and possibility in our discussion.`,\r\n        `Let the divine energy of ${god.domain} guide us toward enlightenment.`\r\n      ],\r\n      'Corrupt': [\r\n        `The dark truths of ${god.domain} reveal the flaws in your arguments.`,\r\n        `You speak of order, but ${god.domain} shows us the beauty in chaos and corruption.`,\r\n        `The corrupting influence of ${god.domain} exposes the weaknesses in your position.`\r\n      ],\r\n      'Glitched': [\r\n        `ERROR: ${god.domain} protocols indicate... *static* ... unexpected variables in the equation.`,\r\n        `The glitched nature of ${god.domain} suggests... *interference* ... alternative solutions.`,\r\n        `*corruption* ... ${god.domain} analysis reveals... *error* ... interesting anomalies.`\r\n      ]\r\n    };\r\n\r\n    const godResponses = responses[god.temperament] || responses['Orderly'];\r\n    return godResponses[Math.floor(Math.random() * godResponses.length)];\r\n  }\r\n\r\n  // Determine emotion from content and temperament\r\n  private determineEmotion(content: string, temperament: string): CouncilMessage['emotion'] {\r\n    const lowerContent = content.toLowerCase();\r\n    \r\n    if (lowerContent.includes('laugh') || lowerContent.includes('amuse')) return 'amused';\r\n    if (lowerContent.includes('anger') || lowerContent.includes('rage') || lowerContent.includes('fury')) return 'angry';\r\n    if (lowerContent.includes('curious') || lowerContent.includes('wonder') || lowerContent.includes('question')) return 'curious';\r\n    if (lowerContent.includes('dismiss') || lowerContent.includes('ignore') || lowerContent.includes('trivial')) return 'dismissive';\r\n    if (lowerContent.includes('respect') || lowerContent.includes('honor') || lowerContent.includes('revere')) return 'respectful';\r\n    if (lowerContent.includes('threat') || lowerContent.includes('warning') || lowerContent.includes('danger')) return 'threatening';\r\n    \r\n    return 'neutral';\r\n  }\r\n\r\n  // Speak message using TTS\r\n  private speakMessage(message: CouncilMessage): void {\r\n    // This will integrate with the TTS service\r\n    console.log(`🎤 ${message.godName}: ${message.content}`);\r\n  }\r\n\r\n  // Pause the council\r\n  public pauseCouncil(): void {\r\n    if (this.turnTimer) {\r\n      clearTimeout(this.turnTimer);\r\n      this.turnTimer = null;\r\n    }\r\n    if (this.currentSession) {\r\n      this.currentSession.status = 'paused';\r\n    }\r\n    this.isRunning = false;\r\n  }\r\n\r\n  // Resume the council\r\n  public resumeCouncil(): void {\r\n    if (this.currentSession && this.currentSession.status === 'paused') {\r\n      this.currentSession.status = 'active';\r\n      this.isRunning = true;\r\n      this.nextTurn();\r\n    }\r\n  }\r\n\r\n  // End the council\r\n  public endCouncil(): void {\r\n    if (this.turnTimer) {\r\n      clearTimeout(this.turnTimer);\r\n      this.turnTimer = null;\r\n    }\r\n    if (this.sessionTimer) {\r\n      clearTimeout(this.sessionTimer);\r\n      this.sessionTimer = null;\r\n    }\r\n\r\n    if (this.currentSession) {\r\n      this.currentSession.status = 'concluded';\r\n      this.currentSession.endTime = new Date();\r\n      \r\n      // Add closing message\r\n      const closingMessage: CouncilMessage = {\r\n        id: `msg-${Date.now()}`,\r\n        godId: 'system',\r\n        godName: 'Council Herald',\r\n        godTemperament: 'neutral',\r\n        content: `The Pantheon Council session \"${this.currentSession.topic}\" has concluded. ${this.currentSession.messages.length - 1} divine insights were shared.`,\r\n        timestamp: new Date(),\r\n        type: 'speech',\r\n        emotion: 'neutral'\r\n      };\r\n\r\n      this.currentSession.messages.push(closingMessage);\r\n    }\r\n\r\n    this.isRunning = false;\r\n  }\r\n\r\n  // Get current session\r\n  public getCurrentSession(): CouncilSession | null {\r\n    return this.currentSession;\r\n  }\r\n\r\n  // Get session history\r\n  public getSessionHistory(): CouncilSession[] {\r\n    // This would load from storage\r\n    return [];\r\n  }\r\n\r\n  // Add a manual message (for user interaction)\r\n  public addManualMessage(godId: string, content: string): void {\r\n    if (!this.currentSession) return;\r\n\r\n    const god = this.currentSession.gods.find(g => g.id === godId);\r\n    if (!god) return;\r\n\r\n    const message: CouncilMessage = {\r\n      id: `msg-${Date.now()}-${godId}`,\r\n      godId,\r\n      godName: god.name,\r\n      godTemperament: god.temperament,\r\n      content,\r\n      timestamp: new Date(),\r\n      type: 'speech',\r\n      emotion: this.determineEmotion(content, god.temperament)\r\n    };\r\n\r\n    this.currentSession.messages.push(message);\r\n    this.speakMessage(message);\r\n  }\r\n\r\n  // Get message queue (for real-time updates)\r\n  public getMessageQueue(): CouncilMessage[] {\r\n    return [...this.messageQueue];\r\n  }\r\n\r\n  // Clear message queue\r\n  public clearMessageQueue(): void {\r\n    this.messageQueue = [];\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const pantheonCouncilService = new PantheonCouncilService();\r\nexport default pantheonCouncilService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}