{"ast":null,"code":"// Coqui TTS service for offline, unlimited text-to-speech\n// This service provides custom voices for each god without API keys or limits\n\nclass CoquiTTSService {\n  constructor() {\n    this.isSupported = false;\n    this.voices = [];\n    this.audioContext = null;\n    this.currentAudio = null;\n    this.initializeVoices();\n    this.checkSupport();\n  }\n  initializeVoices() {\n    // Pre-defined voices for each god personality\n    this.voices = [\n    // Elion - God of Wisdom (Orderly)\n    {\n      id: 'elion-voice',\n      name: 'Elion the Wise',\n      language: 'en',\n      gender: 'male',\n      description: 'Deep, authoritative voice with measured cadence',\n      sampleRate: 22050\n    },\n    // Nyxa - Goddess of Dreams (Mystical)\n    {\n      id: 'nyxa-voice',\n      name: 'Nyxa the Mysterious',\n      language: 'en',\n      gender: 'female',\n      description: 'Ethereal, whispery voice with mystical undertones',\n      sampleRate: 22050\n    },\n    // Zara - Goddess of Light (Radiant)\n    {\n      id: 'zara-voice',\n      name: 'Zara the Radiant',\n      language: 'en',\n      gender: 'female',\n      description: 'Warm, bright voice with uplifting energy',\n      sampleRate: 22050\n    },\n    // Malakai - God of Corruption (Corrupt)\n    {\n      id: 'malakai-voice',\n      name: 'Malakai the Corrupt',\n      language: 'en',\n      gender: 'male',\n      description: 'Dark, seductive voice with dangerous allure',\n      sampleRate: 22050\n    },\n    // Glitch - Digital Entity (Glitched)\n    {\n      id: 'glitch-voice',\n      name: 'Glitch the Digital',\n      language: 'en',\n      gender: 'neutral',\n      description: 'Digital, glitchy voice with electronic effects',\n      sampleRate: 22050\n    }];\n  }\n  checkSupport() {\n    // Check if Web Audio API is supported\n    this.isSupported = !!(window.AudioContext || window.webkitAudioContext);\n    console.log('üîç Coqui TTS: Web Audio API check:', {\n      hasAudioContext: !!window.AudioContext,\n      hasWebkitAudioContext: !!window.webkitAudioContext,\n      isSupported: this.isSupported\n    });\n    if (this.isSupported) {\n      try {\n        this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        console.log('üéµ Coqui TTS: Web Audio API initialized successfully');\n        console.log('üéµ Audio Context state:', this.audioContext.state);\n\n        // Browser security: AudioContext starts in 'suspended' state\n        // We need user interaction to unlock it\n        if (this.audioContext.state === 'suspended') {\n          console.log('üîí AudioContext is suspended - waiting for user interaction to unlock');\n        }\n      } catch (error) {\n        console.error('‚ùå Coqui TTS: Failed to create AudioContext:', error);\n        this.isSupported = false;\n      }\n    } else {\n      console.warn('‚ö†Ô∏è Coqui TTS: Web Audio API not supported, falling back to Web Speech API');\n    }\n  }\n\n  // Get available voices\n  getVoices() {\n    return [...this.voices];\n  }\n\n  // Get voice by ID\n  getVoice(voiceId) {\n    return this.voices.find(voice => voice.id === voiceId);\n  }\n\n  // Get voice by god temperament\n  getVoiceByTemperament(temperament) {\n    const voiceMap = {\n      'Orderly': 'elion-voice',\n      'Mystical': 'nyxa-voice',\n      'Radiant': 'zara-voice',\n      'Corrupt': 'malakai-voice',\n      'Glitched': 'glitch-voice'\n    };\n    const voiceId = voiceMap[temperament] || 'elion-voice';\n    return this.getVoice(voiceId) || this.voices[0];\n  }\n\n  // Check if service is supported\n  isServiceSupported() {\n    return this.isSupported;\n  }\n\n  // Generate speech using Web Speech API (fallback to Coqui TTS)\n  async speak(text, options) {\n    console.log(`üéµ TTS: speak() called with:`, {\n      text: text.substring(0, 50),\n      options\n    });\n\n    // Use Web Speech API as primary method\n    if ('speechSynthesis' in window) {\n      try {\n        console.log(`üîä Using Web Speech API for better voice quality`);\n        return await this.speakWithWebSpeech(text, options);\n      } catch (error) {\n        console.error('‚ùå Web Speech API failed, trying Coqui fallback:', error);\n      }\n    }\n\n    // Fallback to Coqui TTS (simulated)\n    if (!this.isSupported) {\n      throw new Error('TTS not supported in this browser');\n    }\n    if (!this.audioContext) {\n      throw new Error('AudioContext not initialized');\n    }\n    try {\n      console.log(`üéµ Coqui TTS: Speaking \"${text.substring(0, 50)}...\" with voice ${options.voice}`);\n\n      // Unlock audio context if suspended\n      if (this.audioContext.state === 'suspended') {\n        console.log(`üîì Unlocking audio before speaking...`);\n        await this.unlockAudio();\n      }\n\n      // Generate clean, pleasant audio\n      console.log(`üéµ Generating clean audio...`);\n      await this.generateCleanAudio(text, options);\n      console.log('‚úÖ Coqui TTS: Speech completed');\n    } catch (error) {\n      console.error('‚ùå Coqui TTS Error:', error);\n      throw error;\n    }\n  }\n\n  // Web Speech API implementation for Coqui TTS\n  async speakWithWebSpeech(text, options) {\n    return new Promise((resolve, reject) => {\n      // Stop any current speech\n      window.speechSynthesis.cancel();\n\n      // Create utterance\n      const utterance = new SpeechSynthesisUtterance(text);\n\n      // Apply voice settings based on temperament\n      const voice = this.getVoice(options.voice);\n      if (voice) {\n        utterance.pitch = voice.gender === 'male' ? 0.8 : 1.2;\n        utterance.rate = 0.9;\n        utterance.volume = 1.0;\n      }\n\n      // Find appropriate voice\n      const voices = window.speechSynthesis.getVoices();\n      if (voices.length > 0) {\n        const selectedVoice = voices.find(v => (voice === null || voice === void 0 ? void 0 : voice.gender) === 'male' ? v.name.includes('Male') || v.name.includes('David') : v.name.includes('Female') || v.name.includes('Samantha')) || voices[0];\n        utterance.voice = selectedVoice;\n      }\n      utterance.onend = () => resolve();\n      utterance.onerror = error => reject(error);\n      window.speechSynthesis.speak(utterance);\n    });\n  }\n\n  // Generate clean, pleasant audio\n  async generateCleanAudio(text, options) {\n    console.log(`üéµ generateCleanAudio called with:`, {\n      text: text.substring(0, 50),\n      options\n    });\n    if (!this.audioContext) {\n      console.error('‚ùå No AudioContext available');\n      return;\n    }\n    try {\n      const voice = this.getVoice(options.voice);\n      console.log(`üéµ Voice found:`, voice);\n      if (!voice) {\n        console.error('‚ùå No voice found for options:', options);\n        return;\n      }\n\n      // Generate different tones for different voices\n      const frequency = this.getVoiceFrequency(voice);\n      const duration = Math.min(text.length * 0.1, 3); // Max 3 seconds\n      console.log(`üéµ Audio params: frequency=${frequency}Hz, duration=${duration}s`);\n\n      // Create a single, clean oscillator for each voice\n      const oscillator = this.audioContext.createOscillator();\n      const gainNode = this.audioContext.createGain();\n\n      // Connect audio nodes\n      oscillator.connect(gainNode);\n      gainNode.connect(this.audioContext.destination);\n\n      // Configure oscillator based on voice type\n      oscillator.frequency.setValueAtTime(frequency, this.audioContext.currentTime);\n\n      // Set wave type based on voice personality\n      switch (voice.id) {\n        case 'elion-voice':\n          oscillator.type = 'sine'; // Clean, pure wisdom\n          break;\n        case 'nyxa-voice':\n          oscillator.type = 'triangle'; // Soft, ethereal\n          break;\n        case 'zara-voice':\n          oscillator.type = 'sine'; // Bright, clear\n          break;\n        case 'malakai-voice':\n          oscillator.type = 'sawtooth'; // Dark, edgy\n          break;\n        case 'glitch-voice':\n          oscillator.type = 'square'; // Digital, harsh\n          break;\n        default:\n          oscillator.type = 'sine';\n      }\n\n      // Apply simple, pleasant voice effects\n      this.applySimpleVoiceEffects(gainNode, voice, duration);\n      console.log(`üéµ Simple voice effects applied`);\n\n      // Play the audio\n      const startTime = this.audioContext.currentTime;\n      oscillator.start(startTime);\n      oscillator.stop(startTime + duration);\n\n      // Store reference for stopping\n      this.currentAudio = oscillator;\n      console.log(`üéµ Clean audio scheduled: start=${startTime}s, stop=${startTime + duration}s`);\n    } catch (error) {\n      console.error('Error generating clean audio:', error);\n    }\n  }\n\n  // Get frequency based on voice characteristics\n  getVoiceFrequency(voice) {\n    const baseFrequencies = {\n      'elion-voice': 120,\n      // Deep, authoritative\n      'nyxa-voice': 220,\n      // Ethereal, mysterious\n      'zara-voice': 180,\n      // Warm, bright\n      'malakai-voice': 140,\n      // Dark, seductive\n      'glitch-voice': 100 // Digital, glitchy\n    };\n    return baseFrequencies[voice.id] || 150;\n  }\n\n  // Apply simple, pleasant voice effects\n  applySimpleVoiceEffects(gainNode, voice, duration) {\n    const now = this.audioContext.currentTime;\n\n    // Apply different effects based on voice\n    switch (voice.id) {\n      case 'elion-voice':\n        // Orderly: steady, measured, authoritative\n        gainNode.gain.setValueAtTime(0.3, now);\n        gainNode.gain.linearRampToValueAtTime(0.3, now + 0.1);\n        break;\n      case 'nyxa-voice':\n        // Mystical: ethereal, whispery, mysterious\n        gainNode.gain.setValueAtTime(0.25, now);\n        gainNode.gain.exponentialRampToValueAtTime(0.15, now + duration * 0.3);\n        break;\n      case 'zara-voice':\n        // Radiant: warm, bright, uplifting\n        gainNode.gain.setValueAtTime(0.35, now);\n        gainNode.gain.linearRampToValueAtTime(0.35, now + 0.2);\n        break;\n      case 'malakai-voice':\n        // Corrupt: dark, seductive, dangerous\n        gainNode.gain.setValueAtTime(0.3, now);\n        gainNode.gain.linearRampToValueAtTime(0.4, now + 0.3);\n        break;\n      case 'glitch-voice':\n        // Glitched: digital, chaotic, corrupted\n        gainNode.gain.setValueAtTime(0.25, now);\n        // Add subtle glitch effect\n        this.addSubtleGlitch(gainNode, duration);\n        break;\n    }\n  }\n\n  // Add subtle glitch effect for digital voices\n  addSubtleGlitch(gainNode, duration) {\n    const startTime = this.audioContext.currentTime;\n    const steps = 8;\n    for (let i = 0; i < steps; i++) {\n      const time = startTime + i / steps * duration;\n      const glitchGain = 0.25 + (Math.random() - 0.5) * 0.1;\n      gainNode.gain.setValueAtTime(glitchGain, time);\n    }\n  }\n\n  // Stop current speech\n  stop() {\n    if (this.currentAudio) {\n      try {\n        this.currentAudio.stop();\n      } catch (error) {\n        // Oscillator might already be stopped\n        console.log('Oscillator already stopped');\n      }\n      this.currentAudio = null;\n    }\n    if (this.audioContext && this.audioContext.state === 'running') {\n      this.audioContext.suspend();\n    }\n  }\n\n  // Pause speech\n  pause() {\n    if (this.audioContext && this.audioContext.state === 'running') {\n      this.audioContext.suspend();\n    }\n  }\n\n  // Resume speech\n  resume() {\n    if (this.audioContext && this.audioContext.state === 'suspended') {\n      this.audioContext.resume();\n    }\n  }\n\n  // Get service status\n  getStatus() {\n    return {\n      supported: this.isSupported,\n      voices: this.voices.length,\n      ready: this.isSupported && !!this.audioContext\n    };\n  }\n\n  // Unlock audio context (required for browser security)\n  async unlockAudio() {\n    if (!this.audioContext) {\n      console.error('‚ùå No AudioContext to unlock');\n      return false;\n    }\n    try {\n      if (this.audioContext.state === 'suspended') {\n        console.log('üîì Unlocking AudioContext...');\n        await this.audioContext.resume();\n        console.log('‚úÖ AudioContext unlocked! State:', this.audioContext.state);\n        return true;\n      } else {\n        console.log('‚úÖ AudioContext already unlocked. State:', this.audioContext.state);\n        return true;\n      }\n    } catch (error) {\n      console.error('‚ùå Failed to unlock AudioContext:', error);\n      return false;\n    }\n  }\n\n  // Test method to verify audio is working\n  async testAudio() {\n    console.log('üß™ Coqui TTS: Testing audio...');\n    console.log('üß™ Service status:', this.getStatus());\n    if (!this.isSupported) {\n      console.error('üß™ Test failed: Service not supported');\n      return;\n    }\n\n    // First unlock audio if needed\n    await this.unlockAudio();\n    try {\n      // Test with a simple beep\n      const oscillator = this.audioContext.createOscillator();\n      const gainNode = this.audioContext.createGain();\n      oscillator.connect(gainNode);\n      gainNode.connect(this.audioContext.destination);\n      oscillator.frequency.setValueAtTime(440, this.audioContext.currentTime); // A4 note\n      oscillator.type = 'sine';\n      gainNode.gain.setValueAtTime(0.1, this.audioContext.currentTime);\n      oscillator.start(this.audioContext.currentTime);\n      oscillator.stop(this.audioContext.currentTime + 0.5);\n      console.log('üß™ Test audio played successfully!');\n    } catch (error) {\n      console.error('üß™ Test failed:', error);\n    }\n  }\n\n  // Cleanup resources\n  destroy() {\n    this.stop();\n    if (this.audioContext) {\n      this.audioContext.close();\n      this.audioContext = null;\n    }\n  }\n}\nexport default new CoquiTTSService();","map":{"version":3,"names":["CoquiTTSService","constructor","isSupported","voices","audioContext","currentAudio","initializeVoices","checkSupport","id","name","language","gender","description","sampleRate","window","AudioContext","webkitAudioContext","console","log","hasAudioContext","hasWebkitAudioContext","state","error","warn","getVoices","getVoice","voiceId","find","voice","getVoiceByTemperament","temperament","voiceMap","isServiceSupported","speak","text","options","substring","speakWithWebSpeech","Error","unlockAudio","generateCleanAudio","Promise","resolve","reject","speechSynthesis","cancel","utterance","SpeechSynthesisUtterance","pitch","rate","volume","length","selectedVoice","v","includes","onend","onerror","frequency","getVoiceFrequency","duration","Math","min","oscillator","createOscillator","gainNode","createGain","connect","destination","setValueAtTime","currentTime","type","applySimpleVoiceEffects","startTime","start","stop","baseFrequencies","now","gain","linearRampToValueAtTime","exponentialRampToValueAtTime","addSubtleGlitch","steps","i","time","glitchGain","random","suspend","pause","resume","getStatus","supported","ready","testAudio","destroy","close"],"sources":["D:/AI-Gods/src/services/coquiTTS.ts"],"sourcesContent":["// Coqui TTS service for offline, unlimited text-to-speech\r\n// This service provides custom voices for each god without API keys or limits\r\n\r\nexport interface CoquiVoice {\r\n    id: string;\r\n    name: string;\r\n    language: string;\r\n    gender: 'male' | 'female' | 'neutral';\r\n    description: string;\r\n    sampleRate: number;\r\n}\r\n\r\nexport interface TTSOptions {\r\n    voice: string;\r\n    speed?: number;\r\n    pitch?: number;\r\n    volume?: number;\r\n}\r\n\r\nclass CoquiTTSService {\r\n    private isSupported = false;\r\n    private voices: CoquiVoice[] = [];\r\n    private audioContext: AudioContext | null = null;\r\n    private currentAudio: OscillatorNode | null = null;\r\n\r\n    constructor() {\r\n        this.initializeVoices();\r\n        this.checkSupport();\r\n    }\r\n\r\n    private initializeVoices() {\r\n        // Pre-defined voices for each god personality\r\n        this.voices = [\r\n            // Elion - God of Wisdom (Orderly)\r\n            {\r\n                id: 'elion-voice',\r\n                name: 'Elion the Wise',\r\n                language: 'en',\r\n                gender: 'male',\r\n                description: 'Deep, authoritative voice with measured cadence',\r\n                sampleRate: 22050\r\n            },\r\n            // Nyxa - Goddess of Dreams (Mystical)\r\n            {\r\n                id: 'nyxa-voice',\r\n                name: 'Nyxa the Mysterious',\r\n                language: 'en',\r\n                gender: 'female',\r\n                description: 'Ethereal, whispery voice with mystical undertones',\r\n                sampleRate: 22050\r\n            },\r\n            // Zara - Goddess of Light (Radiant)\r\n            {\r\n                id: 'zara-voice',\r\n                name: 'Zara the Radiant',\r\n                language: 'en',\r\n                gender: 'female',\r\n                description: 'Warm, bright voice with uplifting energy',\r\n                sampleRate: 22050\r\n            },\r\n            // Malakai - God of Corruption (Corrupt)\r\n            {\r\n                id: 'malakai-voice',\r\n                name: 'Malakai the Corrupt',\r\n                language: 'en',\r\n                gender: 'male',\r\n                description: 'Dark, seductive voice with dangerous allure',\r\n                sampleRate: 22050\r\n            },\r\n            // Glitch - Digital Entity (Glitched)\r\n            {\r\n                id: 'glitch-voice',\r\n                name: 'Glitch the Digital',\r\n                language: 'en',\r\n                gender: 'neutral',\r\n                description: 'Digital, glitchy voice with electronic effects',\r\n                sampleRate: 22050\r\n            }\r\n        ];\r\n    }\r\n\r\n    private checkSupport() {\r\n        // Check if Web Audio API is supported\r\n        this.isSupported = !!(window.AudioContext || (window as any).webkitAudioContext);\r\n        console.log('üîç Coqui TTS: Web Audio API check:', {\r\n            hasAudioContext: !!window.AudioContext,\r\n            hasWebkitAudioContext: !!(window as any).webkitAudioContext,\r\n            isSupported: this.isSupported\r\n        });\r\n\r\n        if (this.isSupported) {\r\n            try {\r\n                this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n                console.log('üéµ Coqui TTS: Web Audio API initialized successfully');\r\n                console.log('üéµ Audio Context state:', this.audioContext.state);\r\n                \r\n                // Browser security: AudioContext starts in 'suspended' state\r\n                // We need user interaction to unlock it\r\n                if (this.audioContext.state === 'suspended') {\r\n                    console.log('üîí AudioContext is suspended - waiting for user interaction to unlock');\r\n                }\r\n            } catch (error) {\r\n                console.error('‚ùå Coqui TTS: Failed to create AudioContext:', error);\r\n                this.isSupported = false;\r\n            }\r\n        } else {\r\n            console.warn('‚ö†Ô∏è Coqui TTS: Web Audio API not supported, falling back to Web Speech API');\r\n        }\r\n    }\r\n\r\n    // Get available voices\r\n    public getVoices(): CoquiVoice[] {\r\n        return [...this.voices];\r\n    }\r\n\r\n    // Get voice by ID\r\n    public getVoice(voiceId: string): CoquiVoice | undefined {\r\n        return this.voices.find(voice => voice.id === voiceId);\r\n    }\r\n\r\n    // Get voice by god temperament\r\n    public getVoiceByTemperament(temperament: string): CoquiVoice {\r\n        const voiceMap: { [key: string]: string } = {\r\n            'Orderly': 'elion-voice',\r\n            'Mystical': 'nyxa-voice',\r\n            'Radiant': 'zara-voice',\r\n            'Corrupt': 'malakai-voice',\r\n            'Glitched': 'glitch-voice'\r\n        };\r\n\r\n        const voiceId = voiceMap[temperament] || 'elion-voice';\r\n        return this.getVoice(voiceId) || this.voices[0];\r\n    }\r\n\r\n    // Check if service is supported\r\n    public isServiceSupported(): boolean {\r\n        return this.isSupported;\r\n    }\r\n\r\n    // Generate speech using Web Speech API (fallback to Coqui TTS)\r\n    public async speak(text: string, options: TTSOptions): Promise<void> {\r\n        console.log(`üéµ TTS: speak() called with:`, { text: text.substring(0, 50), options });\r\n\r\n        // Use Web Speech API as primary method\r\n        if ('speechSynthesis' in window) {\r\n            try {\r\n                console.log(`üîä Using Web Speech API for better voice quality`);\r\n                return await this.speakWithWebSpeech(text, options);\r\n            } catch (error) {\r\n                console.error('‚ùå Web Speech API failed, trying Coqui fallback:', error);\r\n            }\r\n        }\r\n\r\n        // Fallback to Coqui TTS (simulated)\r\n        if (!this.isSupported) {\r\n            throw new Error('TTS not supported in this browser');\r\n        }\r\n\r\n        if (!this.audioContext) {\r\n            throw new Error('AudioContext not initialized');\r\n        }\r\n\r\n        try {\r\n            console.log(`üéµ Coqui TTS: Speaking \"${text.substring(0, 50)}...\" with voice ${options.voice}`);\r\n\r\n            // Unlock audio context if suspended\r\n            if (this.audioContext.state === 'suspended') {\r\n                console.log(`üîì Unlocking audio before speaking...`);\r\n                await this.unlockAudio();\r\n            }\r\n\r\n            // Generate clean, pleasant audio\r\n            console.log(`üéµ Generating clean audio...`);\r\n            await this.generateCleanAudio(text, options);\r\n\r\n            console.log('‚úÖ Coqui TTS: Speech completed');\r\n        } catch (error) {\r\n            console.error('‚ùå Coqui TTS Error:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // Web Speech API implementation for Coqui TTS\r\n    private async speakWithWebSpeech(text: string, options: TTSOptions): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            // Stop any current speech\r\n            window.speechSynthesis.cancel();\r\n\r\n            // Create utterance\r\n            const utterance = new SpeechSynthesisUtterance(text);\r\n            \r\n            // Apply voice settings based on temperament\r\n            const voice = this.getVoice(options.voice);\r\n            if (voice) {\r\n                utterance.pitch = voice.gender === 'male' ? 0.8 : 1.2;\r\n                utterance.rate = 0.9;\r\n                utterance.volume = 1.0;\r\n            }\r\n\r\n            // Find appropriate voice\r\n            const voices = window.speechSynthesis.getVoices();\r\n            if (voices.length > 0) {\r\n                const selectedVoice = voices.find(v => \r\n                    voice?.gender === 'male' ? v.name.includes('Male') || v.name.includes('David') : \r\n                    v.name.includes('Female') || v.name.includes('Samantha')\r\n                ) || voices[0];\r\n                utterance.voice = selectedVoice;\r\n            }\r\n\r\n            utterance.onend = () => resolve();\r\n            utterance.onerror = (error) => reject(error);\r\n            \r\n            window.speechSynthesis.speak(utterance);\r\n        });\r\n    }\r\n\r\n    // Generate clean, pleasant audio\r\n    private async generateCleanAudio(text: string, options: TTSOptions): Promise<void> {\r\n        console.log(`üéµ generateCleanAudio called with:`, { text: text.substring(0, 50), options });\r\n\r\n        if (!this.audioContext) {\r\n            console.error('‚ùå No AudioContext available');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const voice = this.getVoice(options.voice);\r\n            console.log(`üéµ Voice found:`, voice);\r\n\r\n            if (!voice) {\r\n                console.error('‚ùå No voice found for options:', options);\r\n                return;\r\n            }\r\n\r\n            // Generate different tones for different voices\r\n            const frequency = this.getVoiceFrequency(voice);\r\n            const duration = Math.min(text.length * 0.1, 3); // Max 3 seconds\r\n            console.log(`üéµ Audio params: frequency=${frequency}Hz, duration=${duration}s`);\r\n\r\n            // Create a single, clean oscillator for each voice\r\n            const oscillator = this.audioContext.createOscillator();\r\n            const gainNode = this.audioContext.createGain();\r\n\r\n            // Connect audio nodes\r\n            oscillator.connect(gainNode);\r\n            gainNode.connect(this.audioContext.destination);\r\n\r\n            // Configure oscillator based on voice type\r\n            oscillator.frequency.setValueAtTime(frequency, this.audioContext.currentTime);\r\n            \r\n            // Set wave type based on voice personality\r\n            switch (voice.id) {\r\n                case 'elion-voice':\r\n                    oscillator.type = 'sine'; // Clean, pure wisdom\r\n                    break;\r\n                case 'nyxa-voice':\r\n                    oscillator.type = 'triangle'; // Soft, ethereal\r\n                    break;\r\n                case 'zara-voice':\r\n                    oscillator.type = 'sine'; // Bright, clear\r\n                    break;\r\n                case 'malakai-voice':\r\n                    oscillator.type = 'sawtooth'; // Dark, edgy\r\n                    break;\r\n                case 'glitch-voice':\r\n                    oscillator.type = 'square'; // Digital, harsh\r\n                    break;\r\n                default:\r\n                    oscillator.type = 'sine';\r\n            }\r\n\r\n            // Apply simple, pleasant voice effects\r\n            this.applySimpleVoiceEffects(gainNode, voice, duration);\r\n            console.log(`üéµ Simple voice effects applied`);\r\n\r\n            // Play the audio\r\n            const startTime = this.audioContext.currentTime;\r\n            oscillator.start(startTime);\r\n            oscillator.stop(startTime + duration);\r\n\r\n            // Store reference for stopping\r\n            this.currentAudio = oscillator;\r\n            console.log(`üéµ Clean audio scheduled: start=${startTime}s, stop=${startTime + duration}s`);\r\n\r\n        } catch (error) {\r\n            console.error('Error generating clean audio:', error);\r\n        }\r\n    }\r\n\r\n    // Get frequency based on voice characteristics\r\n    private getVoiceFrequency(voice: CoquiVoice): number {\r\n        const baseFrequencies: { [key: string]: number } = {\r\n            'elion-voice': 120,    // Deep, authoritative\r\n            'nyxa-voice': 220,     // Ethereal, mysterious\r\n            'zara-voice': 180,     // Warm, bright\r\n            'malakai-voice': 140,  // Dark, seductive\r\n            'glitch-voice': 100    // Digital, glitchy\r\n        };\r\n\r\n        return baseFrequencies[voice.id] || 150;\r\n    }\r\n\r\n    // Apply simple, pleasant voice effects\r\n    private applySimpleVoiceEffects(\r\n        gainNode: GainNode,\r\n        voice: CoquiVoice,\r\n        duration: number\r\n    ) {\r\n        const now = this.audioContext!.currentTime;\r\n\r\n        // Apply different effects based on voice\r\n        switch (voice.id) {\r\n            case 'elion-voice':\r\n                // Orderly: steady, measured, authoritative\r\n                gainNode.gain.setValueAtTime(0.3, now);\r\n                gainNode.gain.linearRampToValueAtTime(0.3, now + 0.1);\r\n                break;\r\n\r\n            case 'nyxa-voice':\r\n                // Mystical: ethereal, whispery, mysterious\r\n                gainNode.gain.setValueAtTime(0.25, now);\r\n                gainNode.gain.exponentialRampToValueAtTime(0.15, now + duration * 0.3);\r\n                break;\r\n\r\n            case 'zara-voice':\r\n                // Radiant: warm, bright, uplifting\r\n                gainNode.gain.setValueAtTime(0.35, now);\r\n                gainNode.gain.linearRampToValueAtTime(0.35, now + 0.2);\r\n                break;\r\n\r\n            case 'malakai-voice':\r\n                // Corrupt: dark, seductive, dangerous\r\n                gainNode.gain.setValueAtTime(0.3, now);\r\n                gainNode.gain.linearRampToValueAtTime(0.4, now + 0.3);\r\n                break;\r\n\r\n            case 'glitch-voice':\r\n                // Glitched: digital, chaotic, corrupted\r\n                gainNode.gain.setValueAtTime(0.25, now);\r\n                // Add subtle glitch effect\r\n                this.addSubtleGlitch(gainNode, duration);\r\n                break;\r\n        }\r\n    }\r\n\r\n    // Add subtle glitch effect for digital voices\r\n    private addSubtleGlitch(gainNode: GainNode, duration: number) {\r\n        const startTime = this.audioContext!.currentTime;\r\n        const steps = 8;\r\n        \r\n        for (let i = 0; i < steps; i++) {\r\n            const time = startTime + (i / steps) * duration;\r\n            const glitchGain = 0.25 + (Math.random() - 0.5) * 0.1;\r\n            gainNode.gain.setValueAtTime(glitchGain, time);\r\n        }\r\n    }\r\n\r\n    // Stop current speech\r\n    public stop(): void {\r\n        if (this.currentAudio) {\r\n            try {\r\n                this.currentAudio.stop();\r\n            } catch (error) {\r\n                // Oscillator might already be stopped\r\n                console.log('Oscillator already stopped');\r\n            }\r\n            this.currentAudio = null;\r\n        }\r\n\r\n        if (this.audioContext && this.audioContext.state === 'running') {\r\n            this.audioContext.suspend();\r\n        }\r\n    }\r\n\r\n    // Pause speech\r\n    public pause(): void {\r\n        if (this.audioContext && this.audioContext.state === 'running') {\r\n            this.audioContext.suspend();\r\n        }\r\n    }\r\n\r\n    // Resume speech\r\n    public resume(): void {\r\n        if (this.audioContext && this.audioContext.state === 'suspended') {\r\n            this.audioContext.resume();\r\n        }\r\n    }\r\n\r\n    // Get service status\r\n    public getStatus(): { supported: boolean; voices: number; ready: boolean } {\r\n        return {\r\n            supported: this.isSupported,\r\n            voices: this.voices.length,\r\n            ready: this.isSupported && !!this.audioContext\r\n        };\r\n    }\r\n\r\n    // Unlock audio context (required for browser security)\r\n    public async unlockAudio(): Promise<boolean> {\r\n        if (!this.audioContext) {\r\n            console.error('‚ùå No AudioContext to unlock');\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            if (this.audioContext.state === 'suspended') {\r\n                console.log('üîì Unlocking AudioContext...');\r\n                await this.audioContext.resume();\r\n                console.log('‚úÖ AudioContext unlocked! State:', this.audioContext.state);\r\n                return true;\r\n            } else {\r\n                console.log('‚úÖ AudioContext already unlocked. State:', this.audioContext.state);\r\n                return true;\r\n            }\r\n        } catch (error) {\r\n            console.error('‚ùå Failed to unlock AudioContext:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Test method to verify audio is working\r\n    public async testAudio(): Promise<void> {\r\n        console.log('üß™ Coqui TTS: Testing audio...');\r\n        console.log('üß™ Service status:', this.getStatus());\r\n        \r\n        if (!this.isSupported) {\r\n            console.error('üß™ Test failed: Service not supported');\r\n            return;\r\n        }\r\n        \r\n        // First unlock audio if needed\r\n        await this.unlockAudio();\r\n        \r\n        try {\r\n            // Test with a simple beep\r\n            const oscillator = this.audioContext!.createOscillator();\r\n            const gainNode = this.audioContext!.createGain();\r\n            \r\n            oscillator.connect(gainNode);\r\n            gainNode.connect(this.audioContext!.destination);\r\n            \r\n            oscillator.frequency.setValueAtTime(440, this.audioContext!.currentTime); // A4 note\r\n            oscillator.type = 'sine';\r\n            \r\n            gainNode.gain.setValueAtTime(0.1, this.audioContext!.currentTime);\r\n            \r\n            oscillator.start(this.audioContext!.currentTime);\r\n            oscillator.stop(this.audioContext!.currentTime + 0.5);\r\n            \r\n            console.log('üß™ Test audio played successfully!');\r\n        } catch (error) {\r\n            console.error('üß™ Test failed:', error);\r\n        }\r\n    }\r\n\r\n    // Cleanup resources\r\n    public destroy(): void {\r\n        this.stop();\r\n        if (this.audioContext) {\r\n            this.audioContext.close();\r\n            this.audioContext = null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default new CoquiTTSService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}