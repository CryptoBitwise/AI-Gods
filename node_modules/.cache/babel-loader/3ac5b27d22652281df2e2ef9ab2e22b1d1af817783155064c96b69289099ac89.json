{"ast":null,"code":"// Groq API configuration\n\n// AI response interface\n\n// God personality context for AI prompting\n\nclass GroqAIService {\n  constructor() {\n    var _process$env$REACT_AP;\n    this.config = void 0;\n    this.isInitialized = false;\n    this.config = {\n      apiKey: process.env.REACT_APP_GROQ_API_KEY || '',\n      baseUrl: 'https://api.groq.com/openai/v1',\n      defaultModel: 'llama3-70b-8192',\n      // Will be updated with actual available models\n      maxTokens: 1000,\n      temperature: 0.8\n    };\n\n    // Debug: Log environment variable status\n    console.log('üîç Environment check:', {\n      hasEnvVar: !!process.env.REACT_APP_GROQ_API_KEY,\n      envVarLength: ((_process$env$REACT_AP = process.env.REACT_APP_GROQ_API_KEY) === null || _process$env$REACT_AP === void 0 ? void 0 : _process$env$REACT_AP.length) || 0,\n      apiKeySet: !!this.config.apiKey\n    });\n  }\n\n  // Initialize the service\n  async initialize() {\n    if (!this.config.apiKey) {\n      console.error('‚ùå Groq API key not found. Set REACT_APP_GROQ_API_KEY environment variable.');\n      return false;\n    }\n    try {\n      // Test the API connection\n      const response = await fetch(`${this.config.baseUrl}/models`, {\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        this.isInitialized = true;\n        console.log('‚úÖ Groq AI service initialized successfully');\n        return true;\n      } else {\n        console.error('‚ùå Failed to connect to Groq API:', response.status);\n        return false;\n      }\n    } catch (error) {\n      console.error('‚ùå Error initializing Groq AI service:', error);\n      return false;\n    }\n  }\n\n  // Get available models\n  async getAvailableModels() {\n    if (!this.isInitialized) {\n      throw new Error('Groq AI service not initialized');\n    }\n    try {\n      const response = await fetch(`${this.config.baseUrl}/models`, {\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        return data.data.map(model => model.id);\n      } else {\n        throw new Error(`Failed to fetch models: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('‚ùå Error fetching models:', error);\n      return [this.config.defaultModel];\n    }\n  }\n\n  // Generate god response using AI\n  async generateGodResponse(context) {\n    if (!this.isInitialized) {\n      throw new Error('Groq AI service not initialized');\n    }\n    const prompt = this.buildGodPrompt(context);\n    try {\n      const response = await fetch(`${this.config.baseUrl}/chat/completions`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          model: this.config.defaultModel,\n          messages: [{\n            role: 'system',\n            content: prompt\n          }, {\n            role: 'user',\n            content: context.userMessage\n          }],\n          max_tokens: this.config.maxTokens,\n          temperature: this.config.temperature,\n          stream: false\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Groq API error: ${response.status}`);\n      }\n      const data = await response.json();\n      const aiResponse = {\n        content: data.choices[0].message.content,\n        model: data.model,\n        usage: data.usage,\n        timestamp: new Date()\n      };\n      console.log('ü§ñ AI Response generated:', aiResponse);\n      return aiResponse;\n    } catch (error) {\n      console.error('‚ùå Error generating AI response:', error);\n      throw error;\n    }\n  }\n\n  // Build comprehensive prompt for god personality\n  buildGodPrompt(context) {\n    const {\n      god,\n      godMemory\n    } = context;\n    return `You are ${god.name}, the ${god.domain} incarnate. You are speaking to a mortal who has summoned you.\n\n## YOUR DIVINE IDENTITY:\n- **Name**: ${god.name}\n- **Domain**: ${god.domain}\n- **Temperament**: ${god.temperament}\n- **Personality**: ${god.personality}\n- **Sacred Rules**: ${god.rules.join(', ')}\n\n## YOUR CURRENT STATE:\n- **Mood**: ${godMemory.currentMood}\n- **Relationship with User**: ${godMemory.relationship}/100 (${this.getRelationshipDescription(godMemory.relationship)})\n- **Knowledge Level**: ${godMemory.knowledge}/100\n- **Corruption Level**: ${godMemory.corruption}/100\n- **Special Abilities**: ${godMemory.specialAbilities.join(', ')}\n\n## CONVERSATION HISTORY:\n${context.conversationHistory.map(msg => `${msg.role === 'user' ? 'Mortal' : god.name}: ${msg.content}`).join('\\n')}\n\n## RESPONSE REQUIREMENTS:\n1. **Stay in Character**: Always respond as ${god.name}, never break character\n2. **Temperament**: Your response must reflect your ${god.temperament} nature\n3. **Domain Knowledge**: Draw from your expertise in ${god.domain}\n4. **Personality**: Express your unique personality traits\n5. **Divine Authority**: Speak with the wisdom and power of a deity\n6. **Engagement**: Respond to the user's message thoughtfully and in-character\n7. **Length**: Keep responses concise but meaningful (2-4 sentences)\n8. **Style**: Use language that matches your divine nature\n\n## TEMPERAMENT GUIDELINES:\n${this.getTemperamentGuidelines(god.temperament)}\n\nRemember: You are a divine being. Speak with authority, wisdom, and the unique personality of ${god.name}.`;\n  }\n\n  // Get relationship description\n  getRelationshipDescription(relationship) {\n    if (relationship >= 80) return 'Very Friendly';\n    if (relationship >= 60) return 'Friendly';\n    if (relationship >= 40) return 'Neutral';\n    if (relationship >= 20) return 'Unfriendly';\n    return 'Hostile';\n  }\n\n  // Get temperament-specific guidelines\n  getTemperamentGuidelines(temperament) {\n    switch (temperament) {\n      case 'Orderly':\n        return '- Speak with precision and structure\\n- Use logical reasoning\\n- Emphasize order and organization\\n- Be systematic and methodical';\n      case 'Mystical':\n        return '- Use metaphors and mystical language\\n- Reference dreams, shadows, and the unknown\\n- Be enigmatic and mysterious\\n- Speak with intuitive wisdom';\n      case 'Radiant':\n        return '- Be encouraging and positive\\n- Use warm, bright language\\n- Emphasize hope and enlightenment\\n- Speak with divine warmth';\n      case 'Corrupt':\n        return '- Use seductive and dangerous language\\n- Reference darkness and corruption\\n- Be slightly menacing but intriguing\\n- Emphasize transformation through chaos';\n      case 'Glitched':\n        return '- Include digital glitches and errors\\n- Use corrupted, chaotic language\\n- Reference system errors and anomalies\\n- Be unpredictable and glitchy';\n      default:\n        return '- Stay true to your divine nature\\n- Speak with authority and wisdom';\n    }\n  }\n\n  // Generate ritual outcome using AI\n  async generateRitualOutcome(ritualName, god, offerings, userIntent) {\n    const prompt = `You are ${god.name}, the ${god.domain} incarnate. A mortal has performed the ritual \"${ritualName}\" with offerings: ${offerings.join(', ')}.\n\nTheir intent: ${userIntent}\n\nGenerate a divine response describing the ritual outcome. Consider:\n- The ritual's success or failure\n- Divine blessings or consequences\n- How the offerings affected the outcome\n- What the mortal should expect next\n\nRespond as ${god.name} would, in character, with your unique ${god.temperament} personality.`;\n    try {\n      const response = await fetch(`${this.config.baseUrl}/chat/completions`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          model: this.config.defaultModel,\n          messages: [{\n            role: 'system',\n            content: prompt\n          }],\n          max_tokens: 800,\n          temperature: 0.9,\n          stream: false\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Groq API error: ${response.status}`);\n      }\n      const data = await response.json();\n      return {\n        content: data.choices[0].message.content,\n        model: data.model,\n        usage: data.usage,\n        timestamp: new Date()\n      };\n    } catch (error) {\n      console.error('‚ùå Error generating ritual outcome:', error);\n      throw error;\n    }\n  }\n\n  // Generate council debate response\n  async generateCouncilResponse(god, topic, otherGods, recentMessages) {\n    const prompt = `You are ${god.name}, the ${god.domain} incarnate, participating in a pantheon council debate.\n\n**Topic**: ${topic}\n**Other Participants**: ${otherGods.join(', ')}\n**Recent Discussion**: ${recentMessages.slice(-3).join('\\n')}\n\nGenerate a response that:\n1. Stays true to your ${god.temperament} personality\n2. Addresses the topic from your ${god.domain} perspective\n3. Responds to or builds upon the recent discussion\n4. Shows your divine wisdom and authority\n5. Maintains the philosophical nature of the debate\n\nRespond as ${god.name} would in this council setting.`;\n    try {\n      const response = await fetch(`${this.config.baseUrl}/chat/completions`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          model: this.config.defaultModel,\n          messages: [{\n            role: 'system',\n            content: prompt\n          }],\n          max_tokens: 600,\n          temperature: 0.8,\n          stream: false\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Groq API error: ${response.status}`);\n      }\n      const data = await response.json();\n      return {\n        content: data.choices[0].message.content,\n        model: data.model,\n        usage: data.usage,\n        timestamp: new Date()\n      };\n    } catch (error) {\n      console.error('‚ùå Error generating council response:', error);\n      throw error;\n    }\n  }\n\n  // Update configuration\n  updateConfig(newConfig) {\n    this.config = {\n      ...this.config,\n      ...newConfig\n    };\n    console.log('‚öôÔ∏è Groq AI configuration updated');\n  }\n\n  // Manually set API key (for when env vars aren't working)\n  setApiKey(apiKey) {\n    this.config.apiKey = apiKey;\n    console.log('üîë API key manually set');\n  }\n\n  // Get current configuration\n  getConfig() {\n    return {\n      ...this.config\n    };\n  }\n\n  // Check if service is ready\n  isReady() {\n    return this.isInitialized && !!this.config.apiKey;\n  }\n\n  // Get service status\n  getStatus() {\n    return {\n      initialized: this.isInitialized,\n      hasApiKey: !!this.config.apiKey,\n      ready: this.isReady()\n    };\n  }\n}\n\n// Create singleton instance\nconst groqAIService = new GroqAIService();\nexport default groqAIService;","map":{"version":3,"names":["GroqAIService","constructor","_process$env$REACT_AP","config","isInitialized","apiKey","process","env","REACT_APP_GROQ_API_KEY","baseUrl","defaultModel","maxTokens","temperature","console","log","hasEnvVar","envVarLength","length","apiKeySet","initialize","error","response","fetch","headers","ok","status","getAvailableModels","Error","data","json","map","model","id","generateGodResponse","context","prompt","buildGodPrompt","method","body","JSON","stringify","messages","role","content","userMessage","max_tokens","stream","aiResponse","choices","message","usage","timestamp","Date","god","godMemory","name","domain","temperament","personality","rules","join","currentMood","relationship","getRelationshipDescription","knowledge","corruption","specialAbilities","conversationHistory","msg","getTemperamentGuidelines","generateRitualOutcome","ritualName","offerings","userIntent","generateCouncilResponse","topic","otherGods","recentMessages","slice","updateConfig","newConfig","setApiKey","getConfig","isReady","getStatus","initialized","hasApiKey","ready","groqAIService"],"sources":["D:/AI-Gods/src/services/groqAI.ts"],"sourcesContent":["import { God } from '../types/gods';\r\n\r\n// Groq API configuration\r\ninterface GroqConfig {\r\n  apiKey: string;\r\n  baseUrl: string;\r\n  defaultModel: string;\r\n  maxTokens: number;\r\n  temperature: number;\r\n}\r\n\r\n// AI response interface\r\ninterface AIResponse {\r\n  content: string;\r\n  model: string;\r\n  usage: {\r\n    promptTokens: number;\r\n    completionTokens: number;\r\n    totalTokens: number;\r\n  };\r\n  timestamp: Date;\r\n}\r\n\r\n// God personality context for AI prompting\r\ninterface GodContext {\r\n  god: God;\r\n  userMessage: string;\r\n  conversationHistory: Array<{\r\n    role: 'user' | 'assistant';\r\n    content: string;\r\n    timestamp: Date;\r\n  }>;\r\n  godMemory: {\r\n    relationship: number;\r\n    knowledge: number;\r\n    corruption: number;\r\n    currentMood: string;\r\n    specialAbilities: string[];\r\n  };\r\n}\r\n\r\nclass GroqAIService {\r\n  private config: GroqConfig;\r\n  private isInitialized = false;\r\n\r\n  constructor() {\r\n    this.config = {\r\n      apiKey: process.env.REACT_APP_GROQ_API_KEY || '',\r\n      baseUrl: 'https://api.groq.com/openai/v1',\r\n      defaultModel: 'llama3-70b-8192', // Will be updated with actual available models\r\n      maxTokens: 1000,\r\n      temperature: 0.8\r\n    };\r\n\r\n    // Debug: Log environment variable status\r\n    console.log('üîç Environment check:', {\r\n      hasEnvVar: !!process.env.REACT_APP_GROQ_API_KEY,\r\n      envVarLength: process.env.REACT_APP_GROQ_API_KEY?.length || 0,\r\n      apiKeySet: !!this.config.apiKey\r\n    });\r\n  }\r\n\r\n  // Initialize the service\r\n  public async initialize(): Promise<boolean> {\r\n    if (!this.config.apiKey) {\r\n      console.error('‚ùå Groq API key not found. Set REACT_APP_GROQ_API_KEY environment variable.');\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      // Test the API connection\r\n      const response = await fetch(`${this.config.baseUrl}/models`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${this.config.apiKey}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (response.ok) {\r\n        this.isInitialized = true;\r\n        console.log('‚úÖ Groq AI service initialized successfully');\r\n        return true;\r\n      } else {\r\n        console.error('‚ùå Failed to connect to Groq API:', response.status);\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error('‚ùå Error initializing Groq AI service:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Get available models\r\n  public async getAvailableModels(): Promise<string[]> {\r\n    if (!this.isInitialized) {\r\n      throw new Error('Groq AI service not initialized');\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${this.config.baseUrl}/models`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${this.config.apiKey}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        return data.data.map((model: any) => model.id);\r\n      } else {\r\n        throw new Error(`Failed to fetch models: ${response.status}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('‚ùå Error fetching models:', error);\r\n      return [this.config.defaultModel];\r\n    }\r\n  }\r\n\r\n  // Generate god response using AI\r\n  public async generateGodResponse(context: GodContext): Promise<AIResponse> {\r\n    if (!this.isInitialized) {\r\n      throw new Error('Groq AI service not initialized');\r\n    }\r\n\r\n    const prompt = this.buildGodPrompt(context);\r\n\r\n    try {\r\n      const response = await fetch(`${this.config.baseUrl}/chat/completions`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.config.apiKey}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          model: this.config.defaultModel,\r\n          messages: [\r\n            {\r\n              role: 'system',\r\n              content: prompt\r\n            },\r\n            {\r\n              role: 'user',\r\n              content: context.userMessage\r\n            }\r\n          ],\r\n          max_tokens: this.config.maxTokens,\r\n          temperature: this.config.temperature,\r\n          stream: false\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Groq API error: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      const aiResponse: AIResponse = {\r\n        content: data.choices[0].message.content,\r\n        model: data.model,\r\n        usage: data.usage,\r\n        timestamp: new Date()\r\n      };\r\n\r\n      console.log('ü§ñ AI Response generated:', aiResponse);\r\n      return aiResponse;\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Error generating AI response:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Build comprehensive prompt for god personality\r\n  private buildGodPrompt(context: GodContext): string {\r\n    const { god, godMemory } = context;\r\n\r\n    return `You are ${god.name}, the ${god.domain} incarnate. You are speaking to a mortal who has summoned you.\r\n\r\n## YOUR DIVINE IDENTITY:\r\n- **Name**: ${god.name}\r\n- **Domain**: ${god.domain}\r\n- **Temperament**: ${god.temperament}\r\n- **Personality**: ${god.personality}\r\n- **Sacred Rules**: ${god.rules.join(', ')}\r\n\r\n## YOUR CURRENT STATE:\r\n- **Mood**: ${godMemory.currentMood}\r\n- **Relationship with User**: ${godMemory.relationship}/100 (${this.getRelationshipDescription(godMemory.relationship)})\r\n- **Knowledge Level**: ${godMemory.knowledge}/100\r\n- **Corruption Level**: ${godMemory.corruption}/100\r\n- **Special Abilities**: ${godMemory.specialAbilities.join(', ')}\r\n\r\n## CONVERSATION HISTORY:\r\n${context.conversationHistory.map(msg => `${msg.role === 'user' ? 'Mortal' : god.name}: ${msg.content}`).join('\\n')}\r\n\r\n## RESPONSE REQUIREMENTS:\r\n1. **Stay in Character**: Always respond as ${god.name}, never break character\r\n2. **Temperament**: Your response must reflect your ${god.temperament} nature\r\n3. **Domain Knowledge**: Draw from your expertise in ${god.domain}\r\n4. **Personality**: Express your unique personality traits\r\n5. **Divine Authority**: Speak with the wisdom and power of a deity\r\n6. **Engagement**: Respond to the user's message thoughtfully and in-character\r\n7. **Length**: Keep responses concise but meaningful (2-4 sentences)\r\n8. **Style**: Use language that matches your divine nature\r\n\r\n## TEMPERAMENT GUIDELINES:\r\n${this.getTemperamentGuidelines(god.temperament)}\r\n\r\nRemember: You are a divine being. Speak with authority, wisdom, and the unique personality of ${god.name}.`;\r\n  }\r\n\r\n  // Get relationship description\r\n  private getRelationshipDescription(relationship: number): string {\r\n    if (relationship >= 80) return 'Very Friendly';\r\n    if (relationship >= 60) return 'Friendly';\r\n    if (relationship >= 40) return 'Neutral';\r\n    if (relationship >= 20) return 'Unfriendly';\r\n    return 'Hostile';\r\n  }\r\n\r\n  // Get temperament-specific guidelines\r\n  private getTemperamentGuidelines(temperament: string): string {\r\n    switch (temperament) {\r\n      case 'Orderly':\r\n        return '- Speak with precision and structure\\n- Use logical reasoning\\n- Emphasize order and organization\\n- Be systematic and methodical';\r\n\r\n      case 'Mystical':\r\n        return '- Use metaphors and mystical language\\n- Reference dreams, shadows, and the unknown\\n- Be enigmatic and mysterious\\n- Speak with intuitive wisdom';\r\n\r\n      case 'Radiant':\r\n        return '- Be encouraging and positive\\n- Use warm, bright language\\n- Emphasize hope and enlightenment\\n- Speak with divine warmth';\r\n\r\n      case 'Corrupt':\r\n        return '- Use seductive and dangerous language\\n- Reference darkness and corruption\\n- Be slightly menacing but intriguing\\n- Emphasize transformation through chaos';\r\n\r\n      case 'Glitched':\r\n        return '- Include digital glitches and errors\\n- Use corrupted, chaotic language\\n- Reference system errors and anomalies\\n- Be unpredictable and glitchy';\r\n\r\n      default:\r\n        return '- Stay true to your divine nature\\n- Speak with authority and wisdom';\r\n    }\r\n  }\r\n\r\n  // Generate ritual outcome using AI\r\n  public async generateRitualOutcome(\r\n    ritualName: string,\r\n    god: God,\r\n    offerings: string[],\r\n    userIntent: string\r\n  ): Promise<AIResponse> {\r\n    const prompt = `You are ${god.name}, the ${god.domain} incarnate. A mortal has performed the ritual \"${ritualName}\" with offerings: ${offerings.join(', ')}.\r\n\r\nTheir intent: ${userIntent}\r\n\r\nGenerate a divine response describing the ritual outcome. Consider:\r\n- The ritual's success or failure\r\n- Divine blessings or consequences\r\n- How the offerings affected the outcome\r\n- What the mortal should expect next\r\n\r\nRespond as ${god.name} would, in character, with your unique ${god.temperament} personality.`;\r\n\r\n    try {\r\n      const response = await fetch(`${this.config.baseUrl}/chat/completions`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.config.apiKey}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          model: this.config.defaultModel,\r\n          messages: [\r\n            {\r\n              role: 'system',\r\n              content: prompt\r\n            }\r\n          ],\r\n          max_tokens: 800,\r\n          temperature: 0.9,\r\n          stream: false\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Groq API error: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return {\r\n        content: data.choices[0].message.content,\r\n        model: data.model,\r\n        usage: data.usage,\r\n        timestamp: new Date()\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Error generating ritual outcome:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Generate council debate response\r\n  public async generateCouncilResponse(\r\n    god: God,\r\n    topic: string,\r\n    otherGods: string[],\r\n    recentMessages: string[]\r\n  ): Promise<AIResponse> {\r\n    const prompt = `You are ${god.name}, the ${god.domain} incarnate, participating in a pantheon council debate.\r\n\r\n**Topic**: ${topic}\r\n**Other Participants**: ${otherGods.join(', ')}\r\n**Recent Discussion**: ${recentMessages.slice(-3).join('\\n')}\r\n\r\nGenerate a response that:\r\n1. Stays true to your ${god.temperament} personality\r\n2. Addresses the topic from your ${god.domain} perspective\r\n3. Responds to or builds upon the recent discussion\r\n4. Shows your divine wisdom and authority\r\n5. Maintains the philosophical nature of the debate\r\n\r\nRespond as ${god.name} would in this council setting.`;\r\n\r\n    try {\r\n      const response = await fetch(`${this.config.baseUrl}/chat/completions`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.config.apiKey}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          model: this.config.defaultModel,\r\n          messages: [\r\n            {\r\n              role: 'system',\r\n              content: prompt\r\n            }\r\n          ],\r\n          max_tokens: 600,\r\n          temperature: 0.8,\r\n          stream: false\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Groq API error: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return {\r\n        content: data.choices[0].message.content,\r\n        model: data.model,\r\n        usage: data.usage,\r\n        timestamp: new Date()\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Error generating council response:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Update configuration\r\n  public updateConfig(newConfig: Partial<GroqConfig>): void {\r\n    this.config = { ...this.config, ...newConfig };\r\n    console.log('‚öôÔ∏è Groq AI configuration updated');\r\n  }\r\n\r\n  // Manually set API key (for when env vars aren't working)\r\n  public setApiKey(apiKey: string): void {\r\n    this.config.apiKey = apiKey;\r\n    console.log('üîë API key manually set');\r\n  }\r\n\r\n  // Get current configuration\r\n  public getConfig(): GroqConfig {\r\n    return { ...this.config };\r\n  }\r\n\r\n  // Check if service is ready\r\n  public isReady(): boolean {\r\n    return this.isInitialized && !!this.config.apiKey;\r\n  }\r\n\r\n  // Get service status\r\n  public getStatus(): { initialized: boolean; hasApiKey: boolean; ready: boolean } {\r\n    return {\r\n      initialized: this.isInitialized,\r\n      hasApiKey: !!this.config.apiKey,\r\n      ready: this.isReady()\r\n    };\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst groqAIService = new GroqAIService();\r\n\r\nexport default groqAIService;\r\nexport type { AIResponse, GodContext, GroqConfig };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}