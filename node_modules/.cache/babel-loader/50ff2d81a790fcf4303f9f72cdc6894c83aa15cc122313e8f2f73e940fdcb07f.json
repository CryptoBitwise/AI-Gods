{"ast":null,"code":"class PWAService{constructor(){this.deferredPrompt=null;this.isInstalled=false;this.onlineStatus=navigator.onLine;this.updateAvailable=false;this.swRegistration=null;this.initialize();}async initialize(){// Check if app is already installed\nthis.isInstalled=this.checkIfInstalled();// Listen for online/offline events\nwindow.addEventListener('online',()=>this.handleOnline());window.addEventListener('offline',()=>this.handleOffline());// Listen for beforeinstallprompt event\nwindow.addEventListener('beforeinstallprompt',e=>{e.preventDefault();this.deferredPrompt=e;this.dispatchEvent('installPromptAvailable');});// Listen for app installed event\nwindow.addEventListener('appinstalled',()=>{this.isInstalled=true;this.deferredPrompt=null;this.dispatchEvent('appInstalled');});// Register service worker\nawait this.registerServiceWorker();// Check for updates\nthis.checkForUpdates();}checkIfInstalled(){// Check if running in standalone mode (installed PWA)\nif(window.matchMedia('(display-mode: standalone)').matches){return true;}// Check if running in fullscreen mode\nif(window.matchMedia('(display-mode: fullscreen)').matches){return true;}// Check if running in minimal-ui mode\nif(window.matchMedia('(display-mode: minimal-ui)').matches){return true;}return false;}async registerServiceWorker(){if('serviceWorker'in navigator){try{this.swRegistration=await navigator.serviceWorker.register('/sw.js');console.log('‚úÖ Service Worker registered successfully:',this.swRegistration);// Listen for service worker updates\nthis.swRegistration.addEventListener('updatefound',()=>{const newWorker=this.swRegistration.installing;if(newWorker){newWorker.addEventListener('statechange',()=>{if(newWorker.state==='installed'&&navigator.serviceWorker.controller){this.updateAvailable=true;this.dispatchEvent('updateAvailable');}});}});// Listen for controller change (new service worker activated)\nnavigator.serviceWorker.addEventListener('controllerchange',()=>{this.updateAvailable=false;this.dispatchEvent('updateInstalled');});}catch(error){console.error('‚ùå Service Worker registration failed:',error);}}}handleOnline(){this.onlineStatus=true;this.dispatchEvent('online');// Sync any offline data\nthis.syncOfflineData();}handleOffline(){this.onlineStatus=false;this.dispatchEvent('offline');}async syncOfflineData(){if('serviceWorker'in navigator&&navigator.serviceWorker.controller){try{// Request background sync for offline actions\n// const registration = await navigator.serviceWorker.ready;\n// Note: Background sync API is not widely supported yet\n// await registration.sync.register('offline-ritual');\nconsole.log('üîÑ Background sync would be registered here when supported');}catch(error){console.error('‚ùå Background sync registration failed:',error);}}}checkForUpdates(){if(this.swRegistration){this.swRegistration.update();}}// Public methods\nasync installApp(){if(!this.deferredPrompt){console.log('‚ùå No install prompt available');return false;}try{// Show the install prompt\nawait this.deferredPrompt.prompt();// Wait for user choice\nconst choiceResult=await this.deferredPrompt.userChoice;if(choiceResult.outcome==='accepted'){console.log('‚úÖ App installation accepted');this.deferredPrompt=null;return true;}else{console.log('‚ùå App installation dismissed');return false;}}catch(error){console.error('‚ùå Install prompt failed:',error);return false;}}async updateApp(){if(this.swRegistration&&this.updateAvailable){try{// Send message to service worker to skip waiting\nif(this.swRegistration.waiting){this.swRegistration.waiting.postMessage({type:'SKIP_WAITING'});}// Reload the page to activate new service worker\nwindow.location.reload();}catch(error){console.error('‚ùå App update failed:',error);}}}getInstallPrompt(){if(!this.deferredPrompt){return null;}return{event:this.deferredPrompt,showPrompt:async()=>{await this.installApp();}};}isAppInstallable(){return!this.isInstalled&&this.deferredPrompt!==null;}isAppInstalled(){return this.isInstalled;}isOnline(){return this.onlineStatus;}hasUpdate(){return this.updateAvailable;}getServiceWorkerRegistration(){return this.swRegistration;}// Offline functionality\nasync cacheData(key,data){if('caches'in window){try{const cache=await caches.open('ai-gods-data');const response=new Response(JSON.stringify(data));await cache.put(\"/data/\".concat(key),response);console.log('üíæ Data cached successfully:',key);}catch(error){console.error('‚ùå Failed to cache data:',error);}}}async getCachedData(key){if('caches'in window){try{const cache=await caches.open('ai-gods-data');const response=await cache.match(\"/data/\".concat(key));if(response){const data=await response.json();console.log('üì¶ Data retrieved from cache:',key);return data;}}catch(error){console.error('‚ùå Failed to retrieve cached data:',error);}}return null;}// Event dispatching\ndispatchEvent(eventName,data){const event=new CustomEvent(\"pwa:\".concat(eventName),{detail:data});window.dispatchEvent(event);}// Event listening\non(eventName,callback){window.addEventListener(\"pwa:\".concat(eventName),callback);}off(eventName,callback){window.removeEventListener(\"pwa:\".concat(eventName),callback);}// Utility methods\nasync getAppVersion(){if(this.swRegistration&&this.swRegistration.active){try{const messageChannel=new MessageChannel();return new Promise(resolve=>{messageChannel.port1.onmessage=event=>{resolve(event.data.version);};this.swRegistration.active.postMessage({type:'GET_VERSION'},[messageChannel.port2]);});}catch(error){console.error('‚ùå Failed to get app version:',error);return'unknown';}}return'unknown';}async clearCache(){if('caches'in window){try{const cacheNames=await caches.keys();await Promise.all(cacheNames.map(cacheName=>caches.delete(cacheName)));console.log('üóëÔ∏è All caches cleared successfully');}catch(error){console.error('‚ùå Failed to clear caches:',error);}}}async unregisterServiceWorker(){if(this.swRegistration){try{await this.swRegistration.unregister();this.swRegistration=null;console.log('‚úÖ Service Worker unregistered successfully');}catch(error){console.error('‚ùå Failed to unregister Service Worker:',error);}}}}// Export singleton instance\nexport const pwaService=new PWAService();export default pwaService;","map":{"version":3,"names":["PWAService","constructor","deferredPrompt","isInstalled","onlineStatus","navigator","onLine","updateAvailable","swRegistration","initialize","checkIfInstalled","window","addEventListener","handleOnline","handleOffline","e","preventDefault","dispatchEvent","registerServiceWorker","checkForUpdates","matchMedia","matches","serviceWorker","register","console","log","newWorker","installing","state","controller","error","syncOfflineData","update","installApp","prompt","choiceResult","userChoice","outcome","updateApp","waiting","postMessage","type","location","reload","getInstallPrompt","event","showPrompt","isAppInstallable","isAppInstalled","isOnline","hasUpdate","getServiceWorkerRegistration","cacheData","key","data","cache","caches","open","response","Response","JSON","stringify","put","concat","getCachedData","match","json","eventName","CustomEvent","detail","on","callback","off","removeEventListener","getAppVersion","active","messageChannel","MessageChannel","Promise","resolve","port1","onmessage","version","port2","clearCache","cacheNames","keys","all","map","cacheName","delete","unregisterServiceWorker","unregister","pwaService"],"sources":["D:/AI-Gods/src/services/pwaService.ts"],"sourcesContent":["interface BeforeInstallPromptEvent extends Event {\r\n    readonly platforms: string[];\r\n    readonly userChoice: Promise<{\r\n        outcome: 'accepted' | 'dismissed';\r\n        platform: string;\r\n    }>;\r\n    prompt(): Promise<void>;\r\n}\r\n\r\ninterface PWAInstallPrompt {\r\n    event: BeforeInstallPromptEvent;\r\n    showPrompt(): Promise<void>;\r\n}\r\n\r\nclass PWAService {\r\n    private deferredPrompt: BeforeInstallPromptEvent | null = null;\r\n    private isInstalled = false;\r\n    private onlineStatus = navigator.onLine;\r\n    private updateAvailable = false;\r\n    private swRegistration: ServiceWorkerRegistration | null = null;\r\n\r\n    constructor() {\r\n        this.initialize();\r\n    }\r\n\r\n    private async initialize() {\r\n        // Check if app is already installed\r\n        this.isInstalled = this.checkIfInstalled();\r\n\r\n        // Listen for online/offline events\r\n        window.addEventListener('online', () => this.handleOnline());\r\n        window.addEventListener('offline', () => this.handleOffline());\r\n\r\n        // Listen for beforeinstallprompt event\r\n        window.addEventListener('beforeinstallprompt', (e) => {\r\n            e.preventDefault();\r\n            this.deferredPrompt = e as BeforeInstallPromptEvent;\r\n            this.dispatchEvent('installPromptAvailable');\r\n        });\r\n\r\n        // Listen for app installed event\r\n        window.addEventListener('appinstalled', () => {\r\n            this.isInstalled = true;\r\n            this.deferredPrompt = null;\r\n            this.dispatchEvent('appInstalled');\r\n        });\r\n\r\n        // Register service worker\r\n        await this.registerServiceWorker();\r\n\r\n        // Check for updates\r\n        this.checkForUpdates();\r\n    }\r\n\r\n    private checkIfInstalled(): boolean {\r\n        // Check if running in standalone mode (installed PWA)\r\n        if (window.matchMedia('(display-mode: standalone)').matches) {\r\n            return true;\r\n        }\r\n\r\n        // Check if running in fullscreen mode\r\n        if (window.matchMedia('(display-mode: fullscreen)').matches) {\r\n            return true;\r\n        }\r\n\r\n        // Check if running in minimal-ui mode\r\n        if (window.matchMedia('(display-mode: minimal-ui)').matches) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private async registerServiceWorker(): Promise<void> {\r\n        if ('serviceWorker' in navigator) {\r\n            try {\r\n                this.swRegistration = await navigator.serviceWorker.register('/sw.js');\r\n                console.log('‚úÖ Service Worker registered successfully:', this.swRegistration);\r\n\r\n                // Listen for service worker updates\r\n                this.swRegistration.addEventListener('updatefound', () => {\r\n                    const newWorker = this.swRegistration!.installing;\r\n                    if (newWorker) {\r\n                        newWorker.addEventListener('statechange', () => {\r\n                            if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\r\n                                this.updateAvailable = true;\r\n                                this.dispatchEvent('updateAvailable');\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n\r\n                // Listen for controller change (new service worker activated)\r\n                navigator.serviceWorker.addEventListener('controllerchange', () => {\r\n                    this.updateAvailable = false;\r\n                    this.dispatchEvent('updateInstalled');\r\n                });\r\n\r\n            } catch (error) {\r\n                console.error('‚ùå Service Worker registration failed:', error);\r\n            }\r\n        }\r\n    }\r\n\r\n    private handleOnline(): void {\r\n        this.onlineStatus = true;\r\n        this.dispatchEvent('online');\r\n\r\n        // Sync any offline data\r\n        this.syncOfflineData();\r\n    }\r\n\r\n    private handleOffline(): void {\r\n        this.onlineStatus = false;\r\n        this.dispatchEvent('offline');\r\n    }\r\n\r\n    private async syncOfflineData(): Promise<void> {\r\n        if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {\r\n            try {\r\n                // Request background sync for offline actions\r\n                // const registration = await navigator.serviceWorker.ready;\r\n                // Note: Background sync API is not widely supported yet\r\n                // await registration.sync.register('offline-ritual');\r\n                console.log('üîÑ Background sync would be registered here when supported');\r\n            } catch (error) {\r\n                console.error('‚ùå Background sync registration failed:', error);\r\n            }\r\n        }\r\n    }\r\n\r\n    private checkForUpdates(): void {\r\n        if (this.swRegistration) {\r\n            this.swRegistration.update();\r\n        }\r\n    }\r\n\r\n    // Public methods\r\n    public async installApp(): Promise<boolean> {\r\n        if (!this.deferredPrompt) {\r\n            console.log('‚ùå No install prompt available');\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            // Show the install prompt\r\n            await this.deferredPrompt.prompt();\r\n\r\n            // Wait for user choice\r\n            const choiceResult = await this.deferredPrompt.userChoice;\r\n\r\n            if (choiceResult.outcome === 'accepted') {\r\n                console.log('‚úÖ App installation accepted');\r\n                this.deferredPrompt = null;\r\n                return true;\r\n            } else {\r\n                console.log('‚ùå App installation dismissed');\r\n                return false;\r\n            }\r\n        } catch (error) {\r\n            console.error('‚ùå Install prompt failed:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public async updateApp(): Promise<void> {\r\n        if (this.swRegistration && this.updateAvailable) {\r\n            try {\r\n                // Send message to service worker to skip waiting\r\n                if (this.swRegistration.waiting) {\r\n                    this.swRegistration.waiting.postMessage({ type: 'SKIP_WAITING' });\r\n                }\r\n\r\n                // Reload the page to activate new service worker\r\n                window.location.reload();\r\n            } catch (error) {\r\n                console.error('‚ùå App update failed:', error);\r\n            }\r\n        }\r\n    }\r\n\r\n    public getInstallPrompt(): PWAInstallPrompt | null {\r\n        if (!this.deferredPrompt) {\r\n            return null;\r\n        }\r\n\r\n        return {\r\n            event: this.deferredPrompt,\r\n            showPrompt: async () => {\r\n                await this.installApp();\r\n            }\r\n        };\r\n    }\r\n\r\n    public isAppInstallable(): boolean {\r\n        return !this.isInstalled && this.deferredPrompt !== null;\r\n    }\r\n\r\n    public isAppInstalled(): boolean {\r\n        return this.isInstalled;\r\n    }\r\n\r\n    public isOnline(): boolean {\r\n        return this.onlineStatus;\r\n    }\r\n\r\n    public hasUpdate(): boolean {\r\n        return this.updateAvailable;\r\n    }\r\n\r\n    public getServiceWorkerRegistration(): ServiceWorkerRegistration | null {\r\n        return this.swRegistration;\r\n    }\r\n\r\n    // Offline functionality\r\n    public async cacheData(key: string, data: any): Promise<void> {\r\n        if ('caches' in window) {\r\n            try {\r\n                const cache = await caches.open('ai-gods-data');\r\n                const response = new Response(JSON.stringify(data));\r\n                await cache.put(`/data/${key}`, response);\r\n                console.log('üíæ Data cached successfully:', key);\r\n            } catch (error) {\r\n                console.error('‚ùå Failed to cache data:', error);\r\n            }\r\n        }\r\n    }\r\n\r\n    public async getCachedData(key: string): Promise<any | null> {\r\n        if ('caches' in window) {\r\n            try {\r\n                const cache = await caches.open('ai-gods-data');\r\n                const response = await cache.match(`/data/${key}`);\r\n                if (response) {\r\n                    const data = await response.json();\r\n                    console.log('üì¶ Data retrieved from cache:', key);\r\n                    return data;\r\n                }\r\n            } catch (error) {\r\n                console.error('‚ùå Failed to retrieve cached data:', error);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // Event dispatching\r\n    private dispatchEvent(eventName: string, data?: any): void {\r\n        const event = new CustomEvent(`pwa:${eventName}`, { detail: data });\r\n        window.dispatchEvent(event);\r\n    }\r\n\r\n    // Event listening\r\n    public on(eventName: string, callback: (event: CustomEvent) => void): void {\r\n        window.addEventListener(`pwa:${eventName}`, callback as EventListener);\r\n    }\r\n\r\n    public off(eventName: string, callback: (event: CustomEvent) => void): void {\r\n        window.removeEventListener(`pwa:${eventName}`, callback as EventListener);\r\n    }\r\n\r\n    // Utility methods\r\n    public async getAppVersion(): Promise<string> {\r\n        if (this.swRegistration && this.swRegistration.active) {\r\n            try {\r\n                const messageChannel = new MessageChannel();\r\n                return new Promise((resolve) => {\r\n                    messageChannel.port1.onmessage = (event) => {\r\n                        resolve(event.data.version);\r\n                    };\r\n\r\n                    this.swRegistration!.active!.postMessage(\r\n                        { type: 'GET_VERSION' },\r\n                        [messageChannel.port2]\r\n                    );\r\n                });\r\n            } catch (error) {\r\n                console.error('‚ùå Failed to get app version:', error);\r\n                return 'unknown';\r\n            }\r\n        }\r\n        return 'unknown';\r\n    }\r\n\r\n    public async clearCache(): Promise<void> {\r\n        if ('caches' in window) {\r\n            try {\r\n                const cacheNames = await caches.keys();\r\n                await Promise.all(\r\n                    cacheNames.map(cacheName => caches.delete(cacheName))\r\n                );\r\n                console.log('üóëÔ∏è All caches cleared successfully');\r\n            } catch (error) {\r\n                console.error('‚ùå Failed to clear caches:', error);\r\n            }\r\n        }\r\n    }\r\n\r\n    public async unregisterServiceWorker(): Promise<void> {\r\n        if (this.swRegistration) {\r\n            try {\r\n                await this.swRegistration.unregister();\r\n                this.swRegistration = null;\r\n                console.log('‚úÖ Service Worker unregistered successfully');\r\n            } catch (error) {\r\n                console.error('‚ùå Failed to unregister Service Worker:', error);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Export singleton instance\r\nexport const pwaService = new PWAService();\r\nexport default pwaService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}