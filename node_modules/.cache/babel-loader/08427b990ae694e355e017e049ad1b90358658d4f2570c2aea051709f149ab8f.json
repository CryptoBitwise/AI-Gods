{"ast":null,"code":"// Coqui TTS service for offline, unlimited text-to-speech\n// This service provides custom voices for each god without API keys or limits\n\nclass CoquiTTSService {\n  constructor() {\n    this.isSupported = false;\n    this.voices = [];\n    this.audioContext = null;\n    this.currentAudio = null;\n    this.initializeVoices();\n    this.checkSupport();\n  }\n  initializeVoices() {\n    // Pre-defined voices for each god personality\n    this.voices = [\n    // Elion - God of Wisdom (Orderly)\n    {\n      id: 'elion-voice',\n      name: 'Elion the Wise',\n      language: 'en',\n      gender: 'male',\n      description: 'Deep, authoritative voice with measured cadence',\n      sampleRate: 22050\n    },\n    // Nyxa - Goddess of Dreams (Mystical)\n    {\n      id: 'nyxa-voice',\n      name: 'Nyxa the Mysterious',\n      language: 'en',\n      gender: 'female',\n      description: 'Ethereal, whispery voice with mystical undertones',\n      sampleRate: 22050\n    },\n    // Zara - Goddess of Light (Radiant)\n    {\n      id: 'zara-voice',\n      name: 'Zara the Radiant',\n      language: 'en',\n      gender: 'female',\n      description: 'Warm, bright voice with uplifting energy',\n      sampleRate: 22050\n    },\n    // Malakai - God of Corruption (Corrupt)\n    {\n      id: 'malakai-voice',\n      name: 'Malakai the Corrupt',\n      language: 'en',\n      gender: 'male',\n      description: 'Dark, seductive voice with dangerous allure',\n      sampleRate: 22050\n    },\n    // Glitch - Digital Entity (Glitched)\n    {\n      id: 'glitch-voice',\n      name: 'Glitch the Digital',\n      language: 'en',\n      gender: 'neutral',\n      description: 'Digital, glitchy voice with electronic effects',\n      sampleRate: 22050\n    }];\n  }\n  checkSupport() {\n    // Check if Web Audio API is supported\n    this.isSupported = !!(window.AudioContext || window.webkitAudioContext);\n    console.log('🔍 Coqui TTS: Web Audio API check:', {\n      hasAudioContext: !!window.AudioContext,\n      hasWebkitAudioContext: !!window.webkitAudioContext,\n      isSupported: this.isSupported\n    });\n    if (this.isSupported) {\n      try {\n        this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        console.log('🎵 Coqui TTS: Web Audio API initialized successfully');\n        console.log('🎵 Audio Context state:', this.audioContext.state);\n\n        // Browser security: AudioContext starts in 'suspended' state\n        // We need user interaction to unlock it\n        if (this.audioContext.state === 'suspended') {\n          console.log('🔒 AudioContext is suspended - waiting for user interaction to unlock');\n        }\n      } catch (error) {\n        console.error('❌ Coqui TTS: Failed to create AudioContext:', error);\n        this.isSupported = false;\n      }\n    } else {\n      console.warn('⚠️ Coqui TTS: Web Audio API not supported, falling back to Web Speech API');\n    }\n  }\n\n  // Get available voices\n  getVoices() {\n    return [...this.voices];\n  }\n\n  // Get voice by ID\n  getVoice(voiceId) {\n    return this.voices.find(voice => voice.id === voiceId);\n  }\n\n  // Get voice by god temperament\n  getVoiceByTemperament(temperament) {\n    const voiceMap = {\n      'Orderly': 'elion-voice',\n      'Mystical': 'nyxa-voice',\n      'Radiant': 'zara-voice',\n      'Corrupt': 'malakai-voice',\n      'Glitched': 'glitch-voice'\n    };\n    const voiceId = voiceMap[temperament] || 'elion-voice';\n    return this.getVoice(voiceId) || this.voices[0];\n  }\n\n  // Check if service is supported\n  isServiceSupported() {\n    return this.isSupported;\n  }\n\n  // Generate speech using Coqui TTS (simulated for now)\n  async speak(text, options) {\n    console.log(`🎵 Coqui TTS: speak() called with:`, {\n      text: text.substring(0, 50),\n      options\n    });\n    console.log(`🎵 Coqui TTS: isSupported = ${this.isSupported}, audioContext = ${!!this.audioContext}`);\n    if (!this.isSupported) {\n      throw new Error('Coqui TTS not supported in this browser');\n    }\n    if (!this.audioContext) {\n      throw new Error('AudioContext not initialized');\n    }\n    try {\n      console.log(`🎵 Coqui TTS: Speaking \"${text.substring(0, 50)}...\" with voice ${options.voice}`);\n      console.log(`🎵 Audio Context state: ${this.audioContext.state}`);\n\n      // Unlock audio context if suspended\n      if (this.audioContext.state === 'suspended') {\n        console.log(`🔓 Unlocking audio before speaking...`);\n        await this.unlockAudio();\n      }\n\n      // For now, we'll simulate the TTS with a delay and audio generation\n      // In a real implementation, this would call the Coqui TTS API or local model\n\n      // Simulate processing time\n      console.log(`🎵 Simulating processing time...`);\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Generate a simple audio tone as placeholder\n      console.log(`🎵 Generating placeholder audio...`);\n      await this.generatePlaceholderAudio(text, options);\n      console.log('✅ Coqui TTS: Speech completed');\n    } catch (error) {\n      console.error('❌ Coqui TTS Error:', error);\n      throw error;\n    }\n  }\n\n  // Generate placeholder audio (this would be replaced with real Coqui TTS)\n  async generatePlaceholderAudio(text, options) {\n    console.log(`🎵 generatePlaceholderAudio called with:`, {\n      text: text.substring(0, 50),\n      options\n    });\n    if (!this.audioContext) {\n      console.error('❌ No AudioContext available');\n      return;\n    }\n    try {\n      // Create a simple audio tone based on the voice characteristics\n      const voice = this.getVoice(options.voice);\n      console.log(`🎵 Voice found:`, voice);\n      if (!voice) {\n        console.error('❌ No voice found for options:', options);\n        return;\n      }\n\n      // Generate different tones for different voices\n      const frequency = this.getVoiceFrequency(voice);\n      const duration = Math.min(text.length * 0.1, 3); // Max 3 seconds\n      console.log(`🎵 Audio params: frequency=${frequency}Hz, duration=${duration}s`);\n\n      // Create multiple oscillators for richer sound\n      const oscillators = [];\n      const gainNodes = [];\n\n      // Main voice oscillator\n      const mainOsc = this.audioContext.createOscillator();\n      const mainGain = this.audioContext.createGain();\n      oscillators.push(mainOsc);\n      gainNodes.push(mainGain);\n\n      // Harmonics for richer sound\n      const harmonicOsc = this.audioContext.createOscillator();\n      const harmonicGain = this.audioContext.createGain();\n      oscillators.push(harmonicOsc);\n      gainNodes.push(harmonicGain);\n\n      // Bass undertone\n      const bassOsc = this.audioContext.createOscillator();\n      const bassGain = this.audioContext.createGain();\n      oscillators.push(bassOsc);\n      gainNodes.push(bassGain);\n\n      // Connect all nodes\n      oscillators.forEach((osc, index) => {\n        osc.connect(gainNodes[index]);\n        gainNodes[index].connect(this.audioContext.destination);\n      });\n\n      // Configure main voice\n      mainOsc.frequency.setValueAtTime(frequency, this.audioContext.currentTime);\n      mainOsc.type = 'sine';\n\n      // Configure harmonics (octave up)\n      harmonicOsc.frequency.setValueAtTime(frequency * 2, this.audioContext.currentTime);\n      harmonicOsc.type = 'triangle';\n\n      // Configure bass (octave down)\n      bassOsc.frequency.setValueAtTime(frequency * 0.5, this.audioContext.currentTime);\n      bassOsc.type = 'sawtooth';\n\n      // Apply voice-specific effects and patterns\n      this.applyEnhancedVoiceEffects(oscillators, gainNodes, voice, options, duration);\n      console.log(`🎵 Enhanced voice effects applied`);\n\n      // Play all oscillators\n      const startTime = this.audioContext.currentTime;\n      oscillators.forEach(osc => {\n        osc.start(startTime);\n        osc.stop(startTime + duration);\n      });\n\n      // Store reference for stopping\n      this.currentAudio = mainOsc;\n      console.log(`🎵 Enhanced audio scheduled: start=${startTime}s, stop=${startTime + duration}s`);\n    } catch (error) {\n      console.error('Error generating enhanced placeholder audio:', error);\n    }\n  }\n\n  // Get frequency based on voice characteristics\n  getVoiceFrequency(voice) {\n    const baseFrequencies = {\n      'elion-voice': 120,\n      // Deep, authoritative\n      'nyxa-voice': 220,\n      // Ethereal, mysterious\n      'zara-voice': 180,\n      // Warm, bright\n      'malakai-voice': 140,\n      // Dark, seductive\n      'glitch-voice': 100 // Digital, glitchy\n    };\n    return baseFrequencies[voice.id] || 150;\n  }\n\n  // Apply enhanced voice-specific audio effects\n  applyEnhancedVoiceEffects(oscillators, gainNodes, voice, options, duration) {\n    const now = this.audioContext.currentTime;\n    const [mainGain, harmonicGain, bassGain] = gainNodes;\n\n    // Apply different effects based on voice\n    switch (voice.id) {\n      case 'elion-voice':\n        // Orderly: steady, measured, authoritative\n        mainGain.gain.setValueAtTime(0.4, now);\n        mainGain.gain.linearRampToValueAtTime(0.4, now + 0.1);\n        harmonicGain.gain.setValueAtTime(0.2, now);\n        bassGain.gain.setValueAtTime(0.3, now);\n\n        // Add subtle modulation for wisdom\n        this.addSubtleModulation(oscillators[0], 0.5, 2);\n        break;\n      case 'nyxa-voice':\n        // Mystical: ethereal, whispery, mysterious\n        mainGain.gain.setValueAtTime(0.3, now);\n        mainGain.gain.exponentialRampToValueAtTime(0.1, now + duration * 0.5);\n        harmonicGain.gain.setValueAtTime(0.4, now);\n        harmonicGain.gain.exponentialRampToValueAtTime(0.2, now + duration * 0.3);\n        bassGain.gain.setValueAtTime(0.1, now);\n\n        // Add ethereal reverb-like effect\n        this.addEtherealEffect(oscillators[0], duration);\n        break;\n      case 'zara-voice':\n        // Radiant: warm, bright, uplifting\n        mainGain.gain.setValueAtTime(0.5, now);\n        mainGain.gain.linearRampToValueAtTime(0.5, now + 0.2);\n        harmonicGain.gain.setValueAtTime(0.3, now);\n        bassGain.gain.setValueAtTime(0.2, now);\n\n        // Add bright sparkle effect\n        this.addSparkleEffect(oscillators[0], duration);\n        break;\n      case 'malakai-voice':\n        // Corrupt: dark, seductive, dangerous\n        mainGain.gain.setValueAtTime(0.35, now);\n        mainGain.gain.linearRampToValueAtTime(0.45, now + 0.3);\n        harmonicGain.gain.setValueAtTime(0.25, now);\n        bassGain.gain.setValueAtTime(0.4, now);\n\n        // Add dark resonance\n        this.addDarkResonance(oscillators[0], duration);\n        break;\n      case 'glitch-voice':\n        // Glitched: digital, chaotic, corrupted\n        mainGain.gain.setValueAtTime(0.4, now);\n        harmonicGain.gain.setValueAtTime(0.3, now);\n        bassGain.gain.setValueAtTime(0.2, now);\n\n        // Add intense glitch effects\n        this.addGlitchEffects(oscillators, duration);\n        break;\n    }\n  }\n\n  // Add subtle modulation for wisdom voices\n  addSubtleModulation(oscillator, depth, rate) {\n    const startTime = this.audioContext.currentTime;\n    const duration = 0.1;\n    for (let i = 0; i < 10; i++) {\n      const time = startTime + i * duration;\n      const modFreq = oscillator.frequency.value + Math.sin(i * 0.5) * depth;\n      oscillator.frequency.setValueAtTime(modFreq, time);\n    }\n  }\n\n  // Add ethereal effect for mystical voices\n  addEtherealEffect(oscillator, duration) {\n    const startTime = this.audioContext.currentTime;\n    const steps = 20;\n    for (let i = 0; i < steps; i++) {\n      const time = startTime + i / steps * duration;\n      const modFreq = oscillator.frequency.value + Math.sin(i * 0.3) * 15;\n      oscillator.frequency.setValueAtTime(modFreq, time);\n    }\n  }\n\n  // Add sparkle effect for radiant voices\n  addSparkleEffect(oscillator, duration) {\n    const startTime = this.audioContext.currentTime;\n    const steps = 15;\n    for (let i = 0; i < steps; i++) {\n      const time = startTime + i / steps * duration;\n      const modFreq = oscillator.frequency.value + Math.sin(i * 0.8) * 25;\n      oscillator.frequency.setValueAtTime(modFreq, time);\n    }\n  }\n\n  // Add dark resonance for corrupt voices\n  addDarkResonance(oscillator, duration) {\n    const startTime = this.audioContext.currentTime;\n    const steps = 12;\n    for (let i = 0; i < steps; i++) {\n      const time = startTime + i / steps * duration;\n      const modFreq = oscillator.frequency.value + Math.sin(i * 0.4) * 20;\n      oscillator.frequency.setValueAtTime(modFreq, time);\n    }\n  }\n\n  // Add glitch effects for digital voices\n  addGlitchEffects(oscillators, duration) {\n    const startTime = this.audioContext.currentTime;\n    const glitchInterval = setInterval(() => {\n      if (this.audioContext) {\n        const now = this.audioContext.currentTime;\n        if (now < startTime + duration) {\n          // Random frequency jumps\n          oscillators.forEach(osc => {\n            const currentFreq = osc.frequency.value;\n            const newFreq = currentFreq + (Math.random() - 0.5) * 100;\n            osc.frequency.setValueAtTime(newFreq, now);\n          });\n        } else {\n          clearInterval(glitchInterval);\n        }\n      }\n    }, 50);\n\n    // Clean up interval when done\n    setTimeout(() => clearInterval(glitchInterval), duration * 1000);\n  }\n\n  // Stop current speech\n  stop() {\n    if (this.currentAudio) {\n      try {\n        this.currentAudio.stop();\n      } catch (error) {\n        // Oscillator might already be stopped\n        console.log('Oscillator already stopped');\n      }\n      this.currentAudio = null;\n    }\n    if (this.audioContext && this.audioContext.state === 'running') {\n      this.audioContext.suspend();\n    }\n  }\n\n  // Pause speech\n  pause() {\n    if (this.audioContext && this.audioContext.state === 'running') {\n      this.audioContext.suspend();\n    }\n  }\n\n  // Resume speech\n  resume() {\n    if (this.audioContext && this.audioContext.state === 'suspended') {\n      this.audioContext.resume();\n    }\n  }\n\n  // Get service status\n  getStatus() {\n    return {\n      supported: this.isSupported,\n      voices: this.voices.length,\n      ready: this.isSupported && !!this.audioContext\n    };\n  }\n\n  // Unlock audio context (required for browser security)\n  async unlockAudio() {\n    if (!this.audioContext) {\n      console.error('❌ No AudioContext to unlock');\n      return false;\n    }\n    try {\n      if (this.audioContext.state === 'suspended') {\n        console.log('🔓 Unlocking AudioContext...');\n        await this.audioContext.resume();\n        console.log('✅ AudioContext unlocked! State:', this.audioContext.state);\n        return true;\n      } else {\n        console.log('✅ AudioContext already unlocked. State:', this.audioContext.state);\n        return true;\n      }\n    } catch (error) {\n      console.error('❌ Failed to unlock AudioContext:', error);\n      return false;\n    }\n  }\n\n  // Test method to verify audio is working\n  async testAudio() {\n    console.log('🧪 Coqui TTS: Testing audio...');\n    console.log('🧪 Service status:', this.getStatus());\n    if (!this.isSupported) {\n      console.error('🧪 Test failed: Service not supported');\n      return;\n    }\n\n    // First unlock audio if needed\n    await this.unlockAudio();\n    try {\n      // Test with a simple beep\n      const oscillator = this.audioContext.createOscillator();\n      const gainNode = this.audioContext.createGain();\n      oscillator.connect(gainNode);\n      gainNode.connect(this.audioContext.destination);\n      oscillator.frequency.setValueAtTime(440, this.audioContext.currentTime); // A4 note\n      oscillator.type = 'sine';\n      gainNode.gain.setValueAtTime(0.1, this.audioContext.currentTime);\n      oscillator.start(this.audioContext.currentTime);\n      oscillator.stop(this.audioContext.currentTime + 0.5);\n      console.log('🧪 Test audio played successfully!');\n    } catch (error) {\n      console.error('🧪 Test failed:', error);\n    }\n  }\n\n  // Cleanup resources\n  destroy() {\n    this.stop();\n    if (this.audioContext) {\n      this.audioContext.close();\n      this.audioContext = null;\n    }\n  }\n}\nexport default new CoquiTTSService();","map":{"version":3,"names":["CoquiTTSService","constructor","isSupported","voices","audioContext","currentAudio","initializeVoices","checkSupport","id","name","language","gender","description","sampleRate","window","AudioContext","webkitAudioContext","console","log","hasAudioContext","hasWebkitAudioContext","state","error","warn","getVoices","getVoice","voiceId","find","voice","getVoiceByTemperament","temperament","voiceMap","isServiceSupported","speak","text","options","substring","Error","unlockAudio","Promise","resolve","setTimeout","generatePlaceholderAudio","frequency","getVoiceFrequency","duration","Math","min","length","oscillators","gainNodes","mainOsc","createOscillator","mainGain","createGain","push","harmonicOsc","harmonicGain","bassOsc","bassGain","forEach","osc","index","connect","destination","setValueAtTime","currentTime","type","applyEnhancedVoiceEffects","startTime","start","stop","baseFrequencies","now","gain","linearRampToValueAtTime","addSubtleModulation","exponentialRampToValueAtTime","addEtherealEffect","addSparkleEffect","addDarkResonance","addGlitchEffects","oscillator","depth","rate","i","time","modFreq","value","sin","steps","glitchInterval","setInterval","currentFreq","newFreq","random","clearInterval","suspend","pause","resume","getStatus","supported","ready","testAudio","gainNode","destroy","close"],"sources":["D:/AI-Gods/src/services/coquiTTS.ts"],"sourcesContent":["// Coqui TTS service for offline, unlimited text-to-speech\r\n// This service provides custom voices for each god without API keys or limits\r\n\r\nexport interface CoquiVoice {\r\n    id: string;\r\n    name: string;\r\n    language: string;\r\n    gender: 'male' | 'female' | 'neutral';\r\n    description: string;\r\n    sampleRate: number;\r\n}\r\n\r\nexport interface TTSOptions {\r\n    voice: string;\r\n    speed?: number;\r\n    pitch?: number;\r\n    volume?: number;\r\n}\r\n\r\nclass CoquiTTSService {\r\n    private isSupported = false;\r\n    private voices: CoquiVoice[] = [];\r\n    private audioContext: AudioContext | null = null;\r\n    private currentAudio: OscillatorNode | null = null;\r\n\r\n    constructor() {\r\n        this.initializeVoices();\r\n        this.checkSupport();\r\n    }\r\n\r\n    private initializeVoices() {\r\n        // Pre-defined voices for each god personality\r\n        this.voices = [\r\n            // Elion - God of Wisdom (Orderly)\r\n            {\r\n                id: 'elion-voice',\r\n                name: 'Elion the Wise',\r\n                language: 'en',\r\n                gender: 'male',\r\n                description: 'Deep, authoritative voice with measured cadence',\r\n                sampleRate: 22050\r\n            },\r\n            // Nyxa - Goddess of Dreams (Mystical)\r\n            {\r\n                id: 'nyxa-voice',\r\n                name: 'Nyxa the Mysterious',\r\n                language: 'en',\r\n                gender: 'female',\r\n                description: 'Ethereal, whispery voice with mystical undertones',\r\n                sampleRate: 22050\r\n            },\r\n            // Zara - Goddess of Light (Radiant)\r\n            {\r\n                id: 'zara-voice',\r\n                name: 'Zara the Radiant',\r\n                language: 'en',\r\n                gender: 'female',\r\n                description: 'Warm, bright voice with uplifting energy',\r\n                sampleRate: 22050\r\n            },\r\n            // Malakai - God of Corruption (Corrupt)\r\n            {\r\n                id: 'malakai-voice',\r\n                name: 'Malakai the Corrupt',\r\n                language: 'en',\r\n                gender: 'male',\r\n                description: 'Dark, seductive voice with dangerous allure',\r\n                sampleRate: 22050\r\n            },\r\n            // Glitch - Digital Entity (Glitched)\r\n            {\r\n                id: 'glitch-voice',\r\n                name: 'Glitch the Digital',\r\n                language: 'en',\r\n                gender: 'neutral',\r\n                description: 'Digital, glitchy voice with electronic effects',\r\n                sampleRate: 22050\r\n            }\r\n        ];\r\n    }\r\n\r\n    private checkSupport() {\r\n        // Check if Web Audio API is supported\r\n        this.isSupported = !!(window.AudioContext || (window as any).webkitAudioContext);\r\n        console.log('🔍 Coqui TTS: Web Audio API check:', {\r\n            hasAudioContext: !!window.AudioContext,\r\n            hasWebkitAudioContext: !!(window as any).webkitAudioContext,\r\n            isSupported: this.isSupported\r\n        });\r\n\r\n        if (this.isSupported) {\r\n            try {\r\n                this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n                console.log('🎵 Coqui TTS: Web Audio API initialized successfully');\r\n                console.log('🎵 Audio Context state:', this.audioContext.state);\r\n\r\n                // Browser security: AudioContext starts in 'suspended' state\r\n                // We need user interaction to unlock it\r\n                if (this.audioContext.state === 'suspended') {\r\n                    console.log('🔒 AudioContext is suspended - waiting for user interaction to unlock');\r\n                }\r\n            } catch (error) {\r\n                console.error('❌ Coqui TTS: Failed to create AudioContext:', error);\r\n                this.isSupported = false;\r\n            }\r\n        } else {\r\n            console.warn('⚠️ Coqui TTS: Web Audio API not supported, falling back to Web Speech API');\r\n        }\r\n    }\r\n\r\n    // Get available voices\r\n    public getVoices(): CoquiVoice[] {\r\n        return [...this.voices];\r\n    }\r\n\r\n    // Get voice by ID\r\n    public getVoice(voiceId: string): CoquiVoice | undefined {\r\n        return this.voices.find(voice => voice.id === voiceId);\r\n    }\r\n\r\n    // Get voice by god temperament\r\n    public getVoiceByTemperament(temperament: string): CoquiVoice {\r\n        const voiceMap: { [key: string]: string } = {\r\n            'Orderly': 'elion-voice',\r\n            'Mystical': 'nyxa-voice',\r\n            'Radiant': 'zara-voice',\r\n            'Corrupt': 'malakai-voice',\r\n            'Glitched': 'glitch-voice'\r\n        };\r\n\r\n        const voiceId = voiceMap[temperament] || 'elion-voice';\r\n        return this.getVoice(voiceId) || this.voices[0];\r\n    }\r\n\r\n    // Check if service is supported\r\n    public isServiceSupported(): boolean {\r\n        return this.isSupported;\r\n    }\r\n\r\n    // Generate speech using Coqui TTS (simulated for now)\r\n    public async speak(text: string, options: TTSOptions): Promise<void> {\r\n        console.log(`🎵 Coqui TTS: speak() called with:`, { text: text.substring(0, 50), options });\r\n        console.log(`🎵 Coqui TTS: isSupported = ${this.isSupported}, audioContext = ${!!this.audioContext}`);\r\n\r\n        if (!this.isSupported) {\r\n            throw new Error('Coqui TTS not supported in this browser');\r\n        }\r\n\r\n        if (!this.audioContext) {\r\n            throw new Error('AudioContext not initialized');\r\n        }\r\n\r\n        try {\r\n            console.log(`🎵 Coqui TTS: Speaking \"${text.substring(0, 50)}...\" with voice ${options.voice}`);\r\n            console.log(`🎵 Audio Context state: ${this.audioContext.state}`);\r\n\r\n            // Unlock audio context if suspended\r\n            if (this.audioContext.state === 'suspended') {\r\n                console.log(`🔓 Unlocking audio before speaking...`);\r\n                await this.unlockAudio();\r\n            }\r\n\r\n            // For now, we'll simulate the TTS with a delay and audio generation\r\n            // In a real implementation, this would call the Coqui TTS API or local model\r\n\r\n            // Simulate processing time\r\n            console.log(`🎵 Simulating processing time...`);\r\n            await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n            // Generate a simple audio tone as placeholder\r\n            console.log(`🎵 Generating placeholder audio...`);\r\n            await this.generatePlaceholderAudio(text, options);\r\n\r\n            console.log('✅ Coqui TTS: Speech completed');\r\n        } catch (error) {\r\n            console.error('❌ Coqui TTS Error:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // Generate placeholder audio (this would be replaced with real Coqui TTS)\r\n    private async generatePlaceholderAudio(text: string, options: TTSOptions): Promise<void> {\r\n        console.log(`🎵 generatePlaceholderAudio called with:`, { text: text.substring(0, 50), options });\r\n\r\n        if (!this.audioContext) {\r\n            console.error('❌ No AudioContext available');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Create a simple audio tone based on the voice characteristics\r\n            const voice = this.getVoice(options.voice);\r\n            console.log(`🎵 Voice found:`, voice);\r\n\r\n            if (!voice) {\r\n                console.error('❌ No voice found for options:', options);\r\n                return;\r\n            }\r\n\r\n            // Generate different tones for different voices\r\n            const frequency = this.getVoiceFrequency(voice);\r\n            const duration = Math.min(text.length * 0.1, 3); // Max 3 seconds\r\n            console.log(`🎵 Audio params: frequency=${frequency}Hz, duration=${duration}s`);\r\n\r\n            // Create multiple oscillators for richer sound\r\n            const oscillators: OscillatorNode[] = [];\r\n            const gainNodes: GainNode[] = [];\r\n            \r\n            // Main voice oscillator\r\n            const mainOsc = this.audioContext.createOscillator();\r\n            const mainGain = this.audioContext.createGain();\r\n            oscillators.push(mainOsc);\r\n            gainNodes.push(mainGain);\r\n            \r\n            // Harmonics for richer sound\r\n            const harmonicOsc = this.audioContext.createOscillator();\r\n            const harmonicGain = this.audioContext.createGain();\r\n            oscillators.push(harmonicOsc);\r\n            gainNodes.push(harmonicGain);\r\n            \r\n            // Bass undertone\r\n            const bassOsc = this.audioContext.createOscillator();\r\n            const bassGain = this.audioContext.createGain();\r\n            oscillators.push(bassOsc);\r\n            gainNodes.push(bassGain);\r\n\r\n            // Connect all nodes\r\n            oscillators.forEach((osc, index) => {\r\n                osc.connect(gainNodes[index]);\r\n                gainNodes[index].connect(this.audioContext!.destination);\r\n            });\r\n\r\n            // Configure main voice\r\n            mainOsc.frequency.setValueAtTime(frequency, this.audioContext.currentTime);\r\n            mainOsc.type = 'sine';\r\n            \r\n            // Configure harmonics (octave up)\r\n            harmonicOsc.frequency.setValueAtTime(frequency * 2, this.audioContext.currentTime);\r\n            harmonicOsc.type = 'triangle';\r\n            \r\n            // Configure bass (octave down)\r\n            bassOsc.frequency.setValueAtTime(frequency * 0.5, this.audioContext.currentTime);\r\n            bassOsc.type = 'sawtooth';\r\n\r\n            // Apply voice-specific effects and patterns\r\n            this.applyEnhancedVoiceEffects(oscillators, gainNodes, voice, options, duration);\r\n            console.log(`🎵 Enhanced voice effects applied`);\r\n\r\n            // Play all oscillators\r\n            const startTime = this.audioContext.currentTime;\r\n            oscillators.forEach(osc => {\r\n                osc.start(startTime);\r\n                osc.stop(startTime + duration);\r\n            });\r\n\r\n            // Store reference for stopping\r\n            this.currentAudio = mainOsc;\r\n            console.log(`🎵 Enhanced audio scheduled: start=${startTime}s, stop=${startTime + duration}s`);\r\n\r\n        } catch (error) {\r\n            console.error('Error generating enhanced placeholder audio:', error);\r\n        }\r\n    }\r\n\r\n    // Get frequency based on voice characteristics\r\n    private getVoiceFrequency(voice: CoquiVoice): number {\r\n        const baseFrequencies: { [key: string]: number } = {\r\n            'elion-voice': 120,    // Deep, authoritative\r\n            'nyxa-voice': 220,     // Ethereal, mysterious\r\n            'zara-voice': 180,     // Warm, bright\r\n            'malakai-voice': 140,  // Dark, seductive\r\n            'glitch-voice': 100    // Digital, glitchy\r\n        };\r\n\r\n        return baseFrequencies[voice.id] || 150;\r\n    }\r\n\r\n    // Apply enhanced voice-specific audio effects\r\n    private applyEnhancedVoiceEffects(\r\n        oscillators: OscillatorNode[],\r\n        gainNodes: GainNode[],\r\n        voice: CoquiVoice,\r\n        options: TTSOptions,\r\n        duration: number\r\n    ) {\r\n        const now = this.audioContext!.currentTime;\r\n        const [mainGain, harmonicGain, bassGain] = gainNodes;\r\n\r\n        // Apply different effects based on voice\r\n        switch (voice.id) {\r\n            case 'elion-voice':\r\n                // Orderly: steady, measured, authoritative\r\n                mainGain.gain.setValueAtTime(0.4, now);\r\n                mainGain.gain.linearRampToValueAtTime(0.4, now + 0.1);\r\n                harmonicGain.gain.setValueAtTime(0.2, now);\r\n                bassGain.gain.setValueAtTime(0.3, now);\r\n                \r\n                // Add subtle modulation for wisdom\r\n                this.addSubtleModulation(oscillators[0], 0.5, 2);\r\n                break;\r\n\r\n            case 'nyxa-voice':\r\n                // Mystical: ethereal, whispery, mysterious\r\n                mainGain.gain.setValueAtTime(0.3, now);\r\n                mainGain.gain.exponentialRampToValueAtTime(0.1, now + duration * 0.5);\r\n                harmonicGain.gain.setValueAtTime(0.4, now);\r\n                harmonicGain.gain.exponentialRampToValueAtTime(0.2, now + duration * 0.3);\r\n                bassGain.gain.setValueAtTime(0.1, now);\r\n                \r\n                // Add ethereal reverb-like effect\r\n                this.addEtherealEffect(oscillators[0], duration);\r\n                break;\r\n\r\n            case 'zara-voice':\r\n                // Radiant: warm, bright, uplifting\r\n                mainGain.gain.setValueAtTime(0.5, now);\r\n                mainGain.gain.linearRampToValueAtTime(0.5, now + 0.2);\r\n                harmonicGain.gain.setValueAtTime(0.3, now);\r\n                bassGain.gain.setValueAtTime(0.2, now);\r\n                \r\n                // Add bright sparkle effect\r\n                this.addSparkleEffect(oscillators[0], duration);\r\n                break;\r\n\r\n            case 'malakai-voice':\r\n                // Corrupt: dark, seductive, dangerous\r\n                mainGain.gain.setValueAtTime(0.35, now);\r\n                mainGain.gain.linearRampToValueAtTime(0.45, now + 0.3);\r\n                harmonicGain.gain.setValueAtTime(0.25, now);\r\n                bassGain.gain.setValueAtTime(0.4, now);\r\n                \r\n                // Add dark resonance\r\n                this.addDarkResonance(oscillators[0], duration);\r\n                break;\r\n\r\n            case 'glitch-voice':\r\n                // Glitched: digital, chaotic, corrupted\r\n                mainGain.gain.setValueAtTime(0.4, now);\r\n                harmonicGain.gain.setValueAtTime(0.3, now);\r\n                bassGain.gain.setValueAtTime(0.2, now);\r\n                \r\n                // Add intense glitch effects\r\n                this.addGlitchEffects(oscillators, duration);\r\n                break;\r\n        }\r\n    }\r\n\r\n    // Add subtle modulation for wisdom voices\r\n    private addSubtleModulation(oscillator: OscillatorNode, depth: number, rate: number) {\r\n        const startTime = this.audioContext!.currentTime;\r\n        const duration = 0.1;\r\n        \r\n        for (let i = 0; i < 10; i++) {\r\n            const time = startTime + i * duration;\r\n            const modFreq = oscillator.frequency.value + Math.sin(i * 0.5) * depth;\r\n            oscillator.frequency.setValueAtTime(modFreq, time);\r\n        }\r\n    }\r\n\r\n    // Add ethereal effect for mystical voices\r\n    private addEtherealEffect(oscillator: OscillatorNode, duration: number) {\r\n        const startTime = this.audioContext!.currentTime;\r\n        const steps = 20;\r\n        \r\n        for (let i = 0; i < steps; i++) {\r\n            const time = startTime + (i / steps) * duration;\r\n            const modFreq = oscillator.frequency.value + Math.sin(i * 0.3) * 15;\r\n            oscillator.frequency.setValueAtTime(modFreq, time);\r\n        }\r\n    }\r\n\r\n    // Add sparkle effect for radiant voices\r\n    private addSparkleEffect(oscillator: OscillatorNode, duration: number) {\r\n        const startTime = this.audioContext!.currentTime;\r\n        const steps = 15;\r\n        \r\n        for (let i = 0; i < steps; i++) {\r\n            const time = startTime + (i / steps) * duration;\r\n            const modFreq = oscillator.frequency.value + Math.sin(i * 0.8) * 25;\r\n            oscillator.frequency.setValueAtTime(modFreq, time);\r\n        }\r\n    }\r\n\r\n    // Add dark resonance for corrupt voices\r\n    private addDarkResonance(oscillator: OscillatorNode, duration: number) {\r\n        const startTime = this.audioContext!.currentTime;\r\n        const steps = 12;\r\n        \r\n        for (let i = 0; i < steps; i++) {\r\n            const time = startTime + (i / steps) * duration;\r\n            const modFreq = oscillator.frequency.value + Math.sin(i * 0.4) * 20;\r\n            oscillator.frequency.setValueAtTime(modFreq, time);\r\n        }\r\n    }\r\n\r\n    // Add glitch effects for digital voices\r\n    private addGlitchEffects(oscillators: OscillatorNode[], duration: number) {\r\n        const startTime = this.audioContext!.currentTime;\r\n        const glitchInterval = setInterval(() => {\r\n            if (this.audioContext) {\r\n                const now = this.audioContext.currentTime;\r\n                if (now < startTime + duration) {\r\n                    // Random frequency jumps\r\n                    oscillators.forEach(osc => {\r\n                        const currentFreq = osc.frequency.value;\r\n                        const newFreq = currentFreq + (Math.random() - 0.5) * 100;\r\n                        osc.frequency.setValueAtTime(newFreq, now);\r\n                    });\r\n                } else {\r\n                    clearInterval(glitchInterval);\r\n                }\r\n            }\r\n        }, 50);\r\n\r\n        // Clean up interval when done\r\n        setTimeout(() => clearInterval(glitchInterval), duration * 1000);\r\n    }\r\n\r\n    // Stop current speech\r\n    public stop(): void {\r\n        if (this.currentAudio) {\r\n            try {\r\n                this.currentAudio.stop();\r\n            } catch (error) {\r\n                // Oscillator might already be stopped\r\n                console.log('Oscillator already stopped');\r\n            }\r\n            this.currentAudio = null;\r\n        }\r\n\r\n        if (this.audioContext && this.audioContext.state === 'running') {\r\n            this.audioContext.suspend();\r\n        }\r\n    }\r\n\r\n    // Pause speech\r\n    public pause(): void {\r\n        if (this.audioContext && this.audioContext.state === 'running') {\r\n            this.audioContext.suspend();\r\n        }\r\n    }\r\n\r\n    // Resume speech\r\n    public resume(): void {\r\n        if (this.audioContext && this.audioContext.state === 'suspended') {\r\n            this.audioContext.resume();\r\n        }\r\n    }\r\n\r\n    // Get service status\r\n    public getStatus(): { supported: boolean; voices: number; ready: boolean } {\r\n        return {\r\n            supported: this.isSupported,\r\n            voices: this.voices.length,\r\n            ready: this.isSupported && !!this.audioContext\r\n        };\r\n    }\r\n\r\n    // Unlock audio context (required for browser security)\r\n    public async unlockAudio(): Promise<boolean> {\r\n        if (!this.audioContext) {\r\n            console.error('❌ No AudioContext to unlock');\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            if (this.audioContext.state === 'suspended') {\r\n                console.log('🔓 Unlocking AudioContext...');\r\n                await this.audioContext.resume();\r\n                console.log('✅ AudioContext unlocked! State:', this.audioContext.state);\r\n                return true;\r\n            } else {\r\n                console.log('✅ AudioContext already unlocked. State:', this.audioContext.state);\r\n                return true;\r\n            }\r\n        } catch (error) {\r\n            console.error('❌ Failed to unlock AudioContext:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Test method to verify audio is working\r\n    public async testAudio(): Promise<void> {\r\n        console.log('🧪 Coqui TTS: Testing audio...');\r\n        console.log('🧪 Service status:', this.getStatus());\r\n\r\n        if (!this.isSupported) {\r\n            console.error('🧪 Test failed: Service not supported');\r\n            return;\r\n        }\r\n\r\n        // First unlock audio if needed\r\n        await this.unlockAudio();\r\n\r\n        try {\r\n            // Test with a simple beep\r\n            const oscillator = this.audioContext!.createOscillator();\r\n            const gainNode = this.audioContext!.createGain();\r\n\r\n            oscillator.connect(gainNode);\r\n            gainNode.connect(this.audioContext!.destination);\r\n\r\n            oscillator.frequency.setValueAtTime(440, this.audioContext!.currentTime); // A4 note\r\n            oscillator.type = 'sine';\r\n\r\n            gainNode.gain.setValueAtTime(0.1, this.audioContext!.currentTime);\r\n\r\n            oscillator.start(this.audioContext!.currentTime);\r\n            oscillator.stop(this.audioContext!.currentTime + 0.5);\r\n\r\n            console.log('🧪 Test audio played successfully!');\r\n        } catch (error) {\r\n            console.error('🧪 Test failed:', error);\r\n        }\r\n    }\r\n\r\n    // Cleanup resources\r\n    public destroy(): void {\r\n        this.stop();\r\n        if (this.audioContext) {\r\n            this.audioContext.close();\r\n            this.audioContext = null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default new CoquiTTSService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}