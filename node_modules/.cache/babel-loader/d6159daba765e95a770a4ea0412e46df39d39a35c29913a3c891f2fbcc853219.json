{"ast":null,"code":"// Define unique voices for each god temperament\nexport const GOD_VOICES={'Orderly':{id:'orderly',name:'The Architect',settings:{pitch:0.8,// Lower, authoritative\nrate:0.9,// Slower, deliberate\nvolume:1.0},description:'Structured, measured, and authoritative - like a wise architect'},'Mystical':{id:'mystical',name:'The Enigma',settings:{pitch:1.2,// Higher, ethereal\nrate:0.8,// Slower, mysterious\nvolume:0.9},description:'Whispery, ethereal, and mysterious - like shadows speaking'},'Radiant':{id:'radiant',name:'The Beacon',settings:{pitch:1.1,// Higher, warm\nrate:1.0,// Normal, clear\nvolume:1.0},description:'Warm, bright, and encouraging - like sunlight given voice'},'Corrupt':{id:'corrupt',name:'The Harbinger',settings:{pitch:0.7,// Lower, dark\nrate:1.1,// Slightly faster, seductive\nvolume:0.8},description:'Dark, seductive, and dangerous - like corruption itself'},'Glitched':{id:'glitched',name:'The Anomaly',settings:{pitch:1.3,// Higher, chaotic\nrate:1.2,// Faster, glitchy\nvolume:0.7},description:'Chaotic, digital, and glitchy - like corrupted code speaking'}};class TTSService{constructor(){this.synthesis=void 0;this.voices=[];this.isInitialized=false;this.synthesis=window.speechSynthesis;this.initializeVoices();}initializeVoices(){// Wait for voices to load\nif(this.synthesis.getVoices().length>0){this.voices=this.synthesis.getVoices();this.isInitialized=true;}else{this.synthesis.addEventListener('voiceschanged',()=>{this.voices=this.synthesis.getVoices();this.isInitialized=true;});}}// Get available voices\ngetAvailableVoices(){return this.voices;}// Speak text with god's voice\nspeakAsGod(text,temperament){return new Promise((resolve,reject)=>{if(!this.isInitialized){reject(new Error('TTS not initialized yet'));return;}// Stop any current speech\nthis.synthesis.cancel();// Get the god's voice settings\nconst godVoice=GOD_VOICES[temperament]||GOD_VOICES['Orderly'];// Create utterance\nconst utterance=new SpeechSynthesisUtterance(text);// Apply voice settings\nutterance.pitch=godVoice.settings.pitch;utterance.rate=godVoice.settings.rate;utterance.volume=godVoice.settings.volume;// Try to find a good voice for the temperament\nif(this.voices.length>0){// For glitched gods, use a more robotic voice if available\nif(temperament==='Glitched'){const glitchVoice=this.voices.find(v=>v.name.includes('Google')||v.name.includes('Microsoft')||v.name.includes('Alex')||v.name.includes('David'));if(glitchVoice)utterance.voice=glitchVoice;}// For mystical gods, prefer female voices\nelse if(temperament==='Mystical'){const mysticalVoice=this.voices.find(v=>v.name.includes('female')||v.name.includes('Samantha')||v.name.includes('Victoria')||v.name.includes('Zira'));if(mysticalVoice)utterance.voice=mysticalVoice;}// For corrupt gods, prefer deeper voices\nelse if(temperament==='Corrupt'){const corruptVoice=this.voices.find(v=>v.name.includes('male')||v.name.includes('Daniel')||v.name.includes('James')||v.name.includes('Mark'));if(corruptVoice)utterance.voice=corruptVoice;}// For orderly gods, use a clear, authoritative voice\nelse if(temperament==='Orderly'){const orderlyVoice=this.voices.find(v=>v.name.includes('Microsoft')||v.name.includes('David')||v.name.includes('Mark'));if(orderlyVoice)utterance.voice=orderlyVoice;}// For radiant gods, use a warm, friendly voice\nelse if(temperament==='Radiant'){const radiantVoice=this.voices.find(v=>v.name.includes('Samantha')||v.name.includes('Victoria')||v.name.includes('Zira'));if(radiantVoice)utterance.voice=radiantVoice;}}// Set up event handlers\nutterance.onend=()=>resolve();utterance.onerror=error=>reject(error);// Speak!\nthis.synthesis.speak(utterance);});}// Stop all speech\nstop(){this.synthesis.cancel();}// Check if TTS is supported\nisSupported(){return'speechSynthesis'in window;}// Check if currently speaking\nisSpeaking(){return this.synthesis.speaking;}// Debug: Log all available voices\nlogAvailableVoices(){console.log('ðŸ”Š Available TTS Voices:');this.voices.forEach((voice,index)=>{console.log(\"\".concat(index+1,\". \").concat(voice.name,\" (\").concat(voice.lang,\") - \").concat(voice.default?'DEFAULT':''));});console.log(\"Total voices: \".concat(this.voices.length));}}// Export singleton instance\nexport const ttsService=new TTSService();export default ttsService;","map":{"version":3,"names":["GOD_VOICES","id","name","settings","pitch","rate","volume","description","TTSService","constructor","synthesis","voices","isInitialized","window","speechSynthesis","initializeVoices","getVoices","length","addEventListener","getAvailableVoices","speakAsGod","text","temperament","Promise","resolve","reject","Error","cancel","godVoice","utterance","SpeechSynthesisUtterance","glitchVoice","find","v","includes","voice","mysticalVoice","corruptVoice","orderlyVoice","radiantVoice","onend","onerror","error","speak","stop","isSupported","isSpeaking","speaking","logAvailableVoices","console","log","forEach","index","concat","lang","default","ttsService"],"sources":["D:/AI-Gods/src/services/tts.ts"],"sourcesContent":["export interface VoiceSettings {\r\n    pitch: number;\r\n    rate: number;\r\n    volume: number;\r\n    voice?: SpeechSynthesisVoice;\r\n}\r\n\r\nexport interface GodVoice {\r\n    id: string;\r\n    name: string;\r\n    settings: VoiceSettings;\r\n    description: string;\r\n}\r\n\r\n// Define unique voices for each god temperament\r\nexport const GOD_VOICES: Record<string, GodVoice> = {\r\n    'Orderly': {\r\n        id: 'orderly',\r\n        name: 'The Architect',\r\n        settings: {\r\n            pitch: 0.8,    // Lower, authoritative\r\n            rate: 0.9,     // Slower, deliberate\r\n            volume: 1.0\r\n        },\r\n        description: 'Structured, measured, and authoritative - like a wise architect'\r\n    },\r\n    'Mystical': {\r\n        id: 'mystical',\r\n        name: 'The Enigma',\r\n        settings: {\r\n            pitch: 1.2,    // Higher, ethereal\r\n            rate: 0.8,     // Slower, mysterious\r\n            volume: 0.9\r\n        },\r\n        description: 'Whispery, ethereal, and mysterious - like shadows speaking'\r\n    },\r\n    'Radiant': {\r\n        id: 'radiant',\r\n        name: 'The Beacon',\r\n        settings: {\r\n            pitch: 1.1,    // Higher, warm\r\n            rate: 1.0,     // Normal, clear\r\n            volume: 1.0\r\n        },\r\n        description: 'Warm, bright, and encouraging - like sunlight given voice'\r\n    },\r\n    'Corrupt': {\r\n        id: 'corrupt',\r\n        name: 'The Harbinger',\r\n        settings: {\r\n            pitch: 0.7,    // Lower, dark\r\n            rate: 1.1,     // Slightly faster, seductive\r\n            volume: 0.8\r\n        },\r\n        description: 'Dark, seductive, and dangerous - like corruption itself'\r\n    },\r\n    'Glitched': {\r\n        id: 'glitched',\r\n        name: 'The Anomaly',\r\n        settings: {\r\n            pitch: 1.3,    // Higher, chaotic\r\n            rate: 1.2,     // Faster, glitchy\r\n            volume: 0.7\r\n        },\r\n        description: 'Chaotic, digital, and glitchy - like corrupted code speaking'\r\n    }\r\n};\r\n\r\nclass TTSService {\r\n    private synthesis: SpeechSynthesis;\r\n    private voices: SpeechSynthesisVoice[] = [];\r\n    private isInitialized = false;\r\n\r\n    constructor() {\r\n        this.synthesis = window.speechSynthesis;\r\n        this.initializeVoices();\r\n    }\r\n\r\n    private initializeVoices() {\r\n        // Wait for voices to load\r\n        if (this.synthesis.getVoices().length > 0) {\r\n            this.voices = this.synthesis.getVoices();\r\n            this.isInitialized = true;\r\n        } else {\r\n            this.synthesis.addEventListener('voiceschanged', () => {\r\n                this.voices = this.synthesis.getVoices();\r\n                this.isInitialized = true;\r\n            });\r\n        }\r\n    }\r\n\r\n    // Get available voices\r\n    getAvailableVoices(): SpeechSynthesisVoice[] {\r\n        return this.voices;\r\n    }\r\n\r\n    // Speak text with god's voice\r\n    speakAsGod(text: string, temperament: string): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.isInitialized) {\r\n                reject(new Error('TTS not initialized yet'));\r\n                return;\r\n            }\r\n\r\n            // Stop any current speech\r\n            this.synthesis.cancel();\r\n\r\n            // Get the god's voice settings\r\n            const godVoice = GOD_VOICES[temperament] || GOD_VOICES['Orderly'];\r\n\r\n            // Create utterance\r\n            const utterance = new SpeechSynthesisUtterance(text);\r\n\r\n            // Apply voice settings\r\n            utterance.pitch = godVoice.settings.pitch;\r\n            utterance.rate = godVoice.settings.rate;\r\n            utterance.volume = godVoice.settings.volume;\r\n\r\n            // Try to find a good voice for the temperament\r\n            if (this.voices.length > 0) {\r\n                // For glitched gods, use a more robotic voice if available\r\n                if (temperament === 'Glitched') {\r\n                    const glitchVoice = this.voices.find(v =>\r\n                        v.name.includes('Google') || v.name.includes('Microsoft') || v.name.includes('Alex') || v.name.includes('David')\r\n                    );\r\n                    if (glitchVoice) utterance.voice = glitchVoice;\r\n                }\r\n                // For mystical gods, prefer female voices\r\n                else if (temperament === 'Mystical') {\r\n                    const mysticalVoice = this.voices.find(v =>\r\n                        v.name.includes('female') || v.name.includes('Samantha') || v.name.includes('Victoria') || v.name.includes('Zira')\r\n                    );\r\n                    if (mysticalVoice) utterance.voice = mysticalVoice;\r\n                }\r\n                // For corrupt gods, prefer deeper voices\r\n                else if (temperament === 'Corrupt') {\r\n                    const corruptVoice = this.voices.find(v =>\r\n                        v.name.includes('male') || v.name.includes('Daniel') || v.name.includes('James') || v.name.includes('Mark')\r\n                    );\r\n                    if (corruptVoice) utterance.voice = corruptVoice;\r\n                }\r\n                // For orderly gods, use a clear, authoritative voice\r\n                else if (temperament === 'Orderly') {\r\n                    const orderlyVoice = this.voices.find(v =>\r\n                        v.name.includes('Microsoft') || v.name.includes('David') || v.name.includes('Mark')\r\n                    );\r\n                    if (orderlyVoice) utterance.voice = orderlyVoice;\r\n                }\r\n                // For radiant gods, use a warm, friendly voice\r\n                else if (temperament === 'Radiant') {\r\n                    const radiantVoice = this.voices.find(v =>\r\n                        v.name.includes('Samantha') || v.name.includes('Victoria') || v.name.includes('Zira')\r\n                    );\r\n                    if (radiantVoice) utterance.voice = radiantVoice;\r\n                }\r\n            }\r\n\r\n            // Set up event handlers\r\n            utterance.onend = () => resolve();\r\n            utterance.onerror = (error) => reject(error);\r\n\r\n            // Speak!\r\n            this.synthesis.speak(utterance);\r\n        });\r\n    }\r\n\r\n    // Stop all speech\r\n    stop(): void {\r\n        this.synthesis.cancel();\r\n    }\r\n\r\n    // Check if TTS is supported\r\n    isSupported(): boolean {\r\n        return 'speechSynthesis' in window;\r\n    }\r\n\r\n    // Check if currently speaking\r\n    isSpeaking(): boolean {\r\n        return this.synthesis.speaking;\r\n    }\r\n\r\n    // Debug: Log all available voices\r\n    logAvailableVoices(): void {\r\n        console.log('ðŸ”Š Available TTS Voices:');\r\n        this.voices.forEach((voice, index) => {\r\n            console.log(`${index + 1}. ${voice.name} (${voice.lang}) - ${voice.default ? 'DEFAULT' : ''}`);\r\n        });\r\n        console.log(`Total voices: ${this.voices.length}`);\r\n    }\r\n}\r\n\r\n// Export singleton instance\r\nexport const ttsService = new TTSService();\r\nexport default ttsService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}