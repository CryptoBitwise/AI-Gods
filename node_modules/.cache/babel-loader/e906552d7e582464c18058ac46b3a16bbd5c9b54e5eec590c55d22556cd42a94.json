{"ast":null,"code":"import _objectSpread from\"D:/AI-Gods/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{memoryService}from'./memory';class PantheonCouncilService{constructor(){this.currentSession=null;this.isRunning=false;this.messageQueue=[];this.turnTimer=null;this.sessionTimer=null;// Predefined topics for the council\nthis.topics=[{id:'creation-vs-destruction',title:'The Balance of Creation and Destruction',description:'A philosophical debate about the necessity of both creation and destruction in the cosmic order.',category:'philosophy',complexity:'complex',gods:['orderly','corrupt','radiant'],prompts:['What is the true purpose of creation?','Is destruction always necessary for new creation?','How do we maintain balance between order and chaos?']},{id:'mortality-divinity',title:'The Nature of Mortality and Divinity',description:'Exploring the relationship between mortal existence and divine nature.',category:'divinity',complexity:'moderate',gods:['mystical','radiant','glitched'],prompts:['What makes a being truly divine?','Is mortality a curse or a blessing?','Can mortals achieve divinity?']},{id:'cosmic-order',title:'The Structure of Cosmic Order',description:'Debating the fundamental laws that govern reality itself.',category:'order',complexity:'complex',gods:['orderly','mystical','glitched'],prompts:['What are the fundamental laws of reality?','Is chaos necessary for order to exist?','How do we define cosmic justice?']},{id:'divine-intervention',title:'The Ethics of Divine Intervention',description:'When should gods interfere in mortal affairs?',category:'politics',complexity:'moderate',gods:['radiant','corrupt','orderly'],prompts:['When is divine intervention justified?','What are the consequences of godly interference?','Should gods remain distant or actively guide mortals?']},{id:'reality-nature',title:'The True Nature of Reality',description:'A deep philosophical exploration of what reality truly is.',category:'philosophy',complexity:'complex',gods:['mystical','glitched','radiant'],prompts:['What is the fundamental nature of existence?','Are we all part of a greater consciousness?','Is reality objective or subjective?']}];}// Get available topics\ngetTopics(){return this.topics;}// Get topics suitable for given gods\ngetTopicsForGods(gods){const godIds=gods.map(god=>god.temperament.toLowerCase());return this.topics.filter(topic=>topic.gods.some(godId=>godIds.includes(godId)));}// Start a new council session\nasync startCouncil(gods,topic){let settings=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};if(this.currentSession){throw new Error('A council session is already active');}if(gods.length<2){throw new Error('At least 2 gods are required for a council');}if(gods.length>6){throw new Error('Maximum 6 gods allowed in council');}const defaultSettings={maxParticipants:6,sessionDuration:30,turnLength:15,allowInterruptions:true,allowRituals:true,topicComplexity:'moderate',moodIntensity:'moderate'};const finalSettings=_objectSpread(_objectSpread({},defaultSettings),settings);const session={id:\"council-\".concat(Date.now()),gods,topic:topic.title,messages:[],status:'preparing',startTime:new Date(),settings:finalSettings};this.currentSession=session;this.isRunning=false;// Add opening message\nconst openingMessage={id:\"msg-\".concat(Date.now()),godId:'system',godName:'Council Herald',godTemperament:'neutral',content:\"The Pantheon Council is now in session. Topic: \\\"\".concat(topic.title,\"\\\". \").concat(gods.length,\" deities have gathered to discuss \").concat(topic.description),timestamp:new Date(),type:'speech',emotion:'neutral'};session.messages.push(openingMessage);// Initialize god memories for this session\nawait this.initializeSessionMemories(session);return session;}// Initialize memories for all gods in the session\nasync initializeSessionMemories(session){for(const god of session.gods){const memory=await memoryService.getGodMemory(god.id);if(memory){// Add council session memory\nawait memoryService.addMemory(god.id,{type:'interaction',content:\"Participating in Pantheon Council session \\\"\".concat(session.topic,\"\\\" with \").concat(session.gods.length-1,\" other deities\"),importance:8,tags:['council','pantheon','debate',session.topic.toLowerCase().replace(/\\s+/g,'-')],metadata:{sessionId:session.id,participants:session.gods.map(g=>g.id),topic:session.topic}});}}}// Start the council discussion\nasync startDiscussion(){if(!this.currentSession){throw new Error('No active council session');}if(this.isRunning){throw new Error('Council discussion is already running');}this.currentSession.status='active';this.isRunning=true;// Start the session timer\nthis.sessionTimer=setTimeout(()=>{this.endCouncil();},this.currentSession.settings.sessionDuration*60*1000);// Start the first turn\nawait this.nextTurn();}// Handle the next turn in the council\nasync nextTurn(){if(!this.currentSession||!this.isRunning)return;// Select next god to speak\nconst nextGod=this.selectNextSpeaker();if(!nextGod)return;// Generate AI response for the god\nconst response=await this.generateGodResponse(nextGod);if(response){this.currentSession.messages.push(response);this.messageQueue.push(response);// Trigger TTS if available\nthis.speakMessage(response);}// Schedule next turn\nthis.turnTimer=setTimeout(()=>{this.nextTurn();},this.currentSession.settings.turnLength*1000);}// Select the next god to speak\nselectNextSpeaker(){if(!this.currentSession)return null;const{gods,messages,settings}=this.currentSession;// Get the last few messages to see who has spoken recently\nconst recentSpeakers=messages.slice(-3).map(msg=>msg.godId).filter(id=>id!=='system');// Find gods who haven't spoken recently\nconst availableGods=gods.filter(god=>!recentSpeakers.includes(god.id));if(availableGods.length===0){// If all gods have spoken recently, pick randomly\nreturn gods[Math.floor(Math.random()*gods.length)];}// Pick from available gods, with some randomness\nreturn availableGods[Math.floor(Math.random()*availableGods.length)];}// Generate AI response for a god\nasync generateGodResponse(god){if(!this.currentSession)return null;try{// Get god's memory and personality\nconst memory=await memoryService.getGodMemory(god.id);const recentMessages=this.currentSession.messages.slice(-5);// Build context for AI\nconst context=this.buildAIContext(god,recentMessages);// Generate response using AI (placeholder for now)\nconst content=await this.callAI(god,context);if(!content)return null;const message={id:\"msg-\".concat(Date.now(),\"-\").concat(god.id),godId:god.id,godName:god.name,godTemperament:god.temperament,content,timestamp:new Date(),type:'speech',emotion:this.determineEmotion(content,god.temperament)};return message;}catch(error){console.error('Failed to generate god response:',error);return null;}}// Build context for AI generation\nbuildAIContext(god,recentMessages){var _this$currentSession,_this$currentSession2;const topic=((_this$currentSession=this.currentSession)===null||_this$currentSession===void 0?void 0:_this$currentSession.topic)||'';const otherGods=((_this$currentSession2=this.currentSession)===null||_this$currentSession2===void 0?void 0:_this$currentSession2.gods.filter(g=>g.id!==god.id))||[];let context=\"You are \".concat(god.name,\", the \").concat(god.domain,\". Your temperament is \").concat(god.temperament,\". \");context+=\"You are participating in a Pantheon Council discussion about: \\\"\".concat(topic,\"\\\". \");if(otherGods.length>0){context+=\"Other participants include: \".concat(otherGods.map(g=>g.name).join(', '),\". \");}if(recentMessages.length>0){context+=\"Recent discussion: \".concat(recentMessages.map(msg=>\"\".concat(msg.godName,\": \\\"\").concat(msg.content,\"\\\"\")).join(' '),\" \");}context+=\"Respond as \".concat(god.name,\" would, considering your domain (\").concat(god.domain,\") and temperament (\").concat(god.temperament,\"). \");context+=\"Keep your response under 200 words and make it engaging for the council.\";return context;}// Call AI service (placeholder - will be replaced with real AI)\nasync callAI(god,context){// For now, return a placeholder response\n// This will be replaced with actual AI calls when Ollama is set up\nconst responses={'Orderly':[\"As the embodiment of \".concat(god.domain,\", I must emphasize the importance of structure and order in this matter.\"),\"The principles of \".concat(god.domain,\" demand that we consider the systematic implications of our discussion.\"),\"From my divine perspective on \".concat(god.domain,\", I see clear patterns that we must acknowledge.\")],'Mystical':[\"The ancient wisdom of \".concat(god.domain,\" reveals deeper truths beyond our current understanding.\"),\"Through the mystical lens of \".concat(god.domain,\", I perceive connections that others might miss.\"),\"The cosmic forces of \".concat(god.domain,\" whisper secrets that we would do well to heed.\")],'Radiant':[\"The light of \".concat(god.domain,\" illuminates the path forward for us all.\"),\"Through the radiant power of \".concat(god.domain,\", I see hope and possibility in our discussion.\"),\"Let the divine energy of \".concat(god.domain,\" guide us toward enlightenment.\")],'Corrupt':[\"The dark truths of \".concat(god.domain,\" reveal the flaws in your arguments.\"),\"You speak of order, but \".concat(god.domain,\" shows us the beauty in chaos and corruption.\"),\"The corrupting influence of \".concat(god.domain,\" exposes the weaknesses in your position.\")],'Glitched':[\"ERROR: \".concat(god.domain,\" protocols indicate... *static* ... unexpected variables in the equation.\"),\"The glitched nature of \".concat(god.domain,\" suggests... *interference* ... alternative solutions.\"),\"*corruption* ... \".concat(god.domain,\" analysis reveals... *error* ... interesting anomalies.\")]};const godResponses=responses[god.temperament]||responses['Orderly'];return godResponses[Math.floor(Math.random()*godResponses.length)];}// Determine emotion from content and temperament\ndetermineEmotion(content,temperament){const lowerContent=content.toLowerCase();if(lowerContent.includes('laugh')||lowerContent.includes('amuse'))return'amused';if(lowerContent.includes('anger')||lowerContent.includes('rage')||lowerContent.includes('fury'))return'angry';if(lowerContent.includes('curious')||lowerContent.includes('wonder')||lowerContent.includes('question'))return'curious';if(lowerContent.includes('dismiss')||lowerContent.includes('ignore')||lowerContent.includes('trivial'))return'dismissive';if(lowerContent.includes('respect')||lowerContent.includes('honor')||lowerContent.includes('revere'))return'respectful';if(lowerContent.includes('threat')||lowerContent.includes('warning')||lowerContent.includes('danger'))return'threatening';return'neutral';}// Speak message using TTS\nspeakMessage(message){// This will integrate with the TTS service\nconsole.log(\"\\uD83C\\uDFA4 \".concat(message.godName,\": \").concat(message.content));}// Pause the council\npauseCouncil(){if(this.turnTimer){clearTimeout(this.turnTimer);this.turnTimer=null;}if(this.currentSession){this.currentSession.status='paused';}this.isRunning=false;}// Resume the council\nresumeCouncil(){if(this.currentSession&&this.currentSession.status==='paused'){this.currentSession.status='active';this.isRunning=true;this.nextTurn();}}// End the council\nendCouncil(){if(this.turnTimer){clearTimeout(this.turnTimer);this.turnTimer=null;}if(this.sessionTimer){clearTimeout(this.sessionTimer);this.sessionTimer=null;}if(this.currentSession){this.currentSession.status='concluded';this.currentSession.endTime=new Date();// Add closing message\nconst closingMessage={id:\"msg-\".concat(Date.now()),godId:'system',godName:'Council Herald',godTemperament:'neutral',content:\"The Pantheon Council session \\\"\".concat(this.currentSession.topic,\"\\\" has concluded. \").concat(this.currentSession.messages.length-1,\" divine insights were shared.\"),timestamp:new Date(),type:'speech',emotion:'neutral'};this.currentSession.messages.push(closingMessage);}this.isRunning=false;}// Get current session\ngetCurrentSession(){return this.currentSession;}// Get session history\ngetSessionHistory(){// This would load from storage\nreturn[];}// Add a manual message (for user interaction)\naddManualMessage(godId,content){if(!this.currentSession)return;const god=this.currentSession.gods.find(g=>g.id===godId);if(!god)return;const message={id:\"msg-\".concat(Date.now(),\"-\").concat(godId),godId,godName:god.name,godTemperament:god.temperament,content,timestamp:new Date(),type:'speech',emotion:this.determineEmotion(content,god.temperament)};this.currentSession.messages.push(message);this.speakMessage(message);}// Get message queue (for real-time updates)\ngetMessageQueue(){return[...this.messageQueue];}// Clear message queue\nclearMessageQueue(){this.messageQueue=[];}}// Export singleton instance\nexport const pantheonCouncilService=new PantheonCouncilService();export default pantheonCouncilService;","map":{"version":3,"names":["memoryService","PantheonCouncilService","constructor","currentSession","isRunning","messageQueue","turnTimer","sessionTimer","topics","id","title","description","category","complexity","gods","prompts","getTopics","getTopicsForGods","godIds","map","god","temperament","toLowerCase","filter","topic","some","godId","includes","startCouncil","settings","arguments","length","undefined","Error","defaultSettings","maxParticipants","sessionDuration","turnLength","allowInterruptions","allowRituals","topicComplexity","moodIntensity","finalSettings","_objectSpread","session","concat","Date","now","messages","status","startTime","openingMessage","godName","godTemperament","content","timestamp","type","emotion","push","initializeSessionMemories","memory","getGodMemory","addMemory","importance","tags","replace","metadata","sessionId","participants","g","startDiscussion","setTimeout","endCouncil","nextTurn","nextGod","selectNextSpeaker","response","generateGodResponse","speakMessage","recentSpeakers","slice","msg","availableGods","Math","floor","random","recentMessages","context","buildAIContext","callAI","message","name","determineEmotion","error","console","_this$currentSession","_this$currentSession2","otherGods","domain","join","responses","godResponses","lowerContent","log","pauseCouncil","clearTimeout","resumeCouncil","endTime","closingMessage","getCurrentSession","getSessionHistory","addManualMessage","find","getMessageQueue","clearMessageQueue","pantheonCouncilService"],"sources":["D:/AI-Gods/src/services/pantheonCouncil.ts"],"sourcesContent":["import { God } from '../types/gods';\r\nimport { memoryService } from './memory';\r\n\r\nexport interface CouncilSession {\r\n  id: string;\r\n  gods: God[];\r\n  topic: string;\r\n  messages: CouncilMessage[];\r\n  status: 'preparing' | 'active' | 'paused' | 'concluded';\r\n  startTime: Date;\r\n  endTime?: Date;\r\n  settings: CouncilSettings;\r\n}\r\n\r\nexport interface CouncilMessage {\r\n  id: string;\r\n  godId: string;\r\n  godName: string;\r\n  godTemperament: string;\r\n  content: string;\r\n  timestamp: Date;\r\n  type: 'speech' | 'reaction' | 'ritual' | 'interruption';\r\n  targetGodId?: string; // If addressing a specific god\r\n  emotion: 'neutral' | 'amused' | 'angry' | 'curious' | 'dismissive' | 'respectful' | 'threatening';\r\n}\r\n\r\nexport interface CouncilSettings {\r\n  maxParticipants: number;\r\n  sessionDuration: number; // minutes\r\n  turnLength: number; // seconds\r\n  allowInterruptions: boolean;\r\n  allowRituals: boolean;\r\n  topicComplexity: 'simple' | 'moderate' | 'complex';\r\n  moodIntensity: 'calm' | 'moderate' | 'intense';\r\n}\r\n\r\nexport interface CouncilTopic {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  category: 'philosophy' | 'politics' | 'creation' | 'destruction' | 'mortality' | 'divinity' | 'chaos' | 'order';\r\n  complexity: 'simple' | 'moderate' | 'complex';\r\n  gods: string[]; // God IDs that would be interested\r\n  prompts: string[];\r\n}\r\n\r\nclass PantheonCouncilService {\r\n  private currentSession: CouncilSession | null = null;\r\n  private isRunning = false;\r\n  private messageQueue: CouncilMessage[] = [];\r\n  private turnTimer: NodeJS.Timeout | null = null;\r\n  private sessionTimer: NodeJS.Timeout | null = null;\r\n\r\n  // Predefined topics for the council\r\n  private topics: CouncilTopic[] = [\r\n    {\r\n      id: 'creation-vs-destruction',\r\n      title: 'The Balance of Creation and Destruction',\r\n      description: 'A philosophical debate about the necessity of both creation and destruction in the cosmic order.',\r\n      category: 'philosophy',\r\n      complexity: 'complex',\r\n      gods: ['orderly', 'corrupt', 'radiant'],\r\n      prompts: [\r\n        'What is the true purpose of creation?',\r\n        'Is destruction always necessary for new creation?',\r\n        'How do we maintain balance between order and chaos?'\r\n      ]\r\n    },\r\n    {\r\n      id: 'mortality-divinity',\r\n      title: 'The Nature of Mortality and Divinity',\r\n      description: 'Exploring the relationship between mortal existence and divine nature.',\r\n      category: 'divinity',\r\n      complexity: 'moderate',\r\n      gods: ['mystical', 'radiant', 'glitched'],\r\n      prompts: [\r\n        'What makes a being truly divine?',\r\n        'Is mortality a curse or a blessing?',\r\n        'Can mortals achieve divinity?'\r\n      ]\r\n    },\r\n    {\r\n      id: 'cosmic-order',\r\n      title: 'The Structure of Cosmic Order',\r\n      description: 'Debating the fundamental laws that govern reality itself.',\r\n      category: 'order',\r\n      complexity: 'complex',\r\n      gods: ['orderly', 'mystical', 'glitched'],\r\n      prompts: [\r\n        'What are the fundamental laws of reality?',\r\n        'Is chaos necessary for order to exist?',\r\n        'How do we define cosmic justice?'\r\n      ]\r\n    },\r\n    {\r\n      id: 'divine-intervention',\r\n      title: 'The Ethics of Divine Intervention',\r\n      description: 'When should gods interfere in mortal affairs?',\r\n      category: 'politics',\r\n      complexity: 'moderate',\r\n      gods: ['radiant', 'corrupt', 'orderly'],\r\n      prompts: [\r\n        'When is divine intervention justified?',\r\n        'What are the consequences of godly interference?',\r\n        'Should gods remain distant or actively guide mortals?'\r\n      ]\r\n    },\r\n    {\r\n      id: 'reality-nature',\r\n      title: 'The True Nature of Reality',\r\n      description: 'A deep philosophical exploration of what reality truly is.',\r\n      category: 'philosophy',\r\n      complexity: 'complex',\r\n      gods: ['mystical', 'glitched', 'radiant'],\r\n      prompts: [\r\n        'What is the fundamental nature of existence?',\r\n        'Are we all part of a greater consciousness?',\r\n        'Is reality objective or subjective?'\r\n      ]\r\n    }\r\n  ];\r\n\r\n  // Get available topics\r\n  public getTopics(): CouncilTopic[] {\r\n    return this.topics;\r\n  }\r\n\r\n  // Get topics suitable for given gods\r\n  public getTopicsForGods(gods: God[]): CouncilTopic[] {\r\n    const godIds = gods.map(god => god.temperament.toLowerCase());\r\n    return this.topics.filter(topic =>\r\n      topic.gods.some(godId => godIds.includes(godId))\r\n    );\r\n  }\r\n\r\n  // Start a new council session\r\n  public async startCouncil(\r\n    gods: God[],\r\n    topic: CouncilTopic,\r\n    settings: Partial<CouncilSettings> = {}\r\n  ): Promise<CouncilSession> {\r\n    if (this.currentSession) {\r\n      throw new Error('A council session is already active');\r\n    }\r\n\r\n    if (gods.length < 2) {\r\n      throw new Error('At least 2 gods are required for a council');\r\n    }\r\n\r\n    if (gods.length > 6) {\r\n      throw new Error('Maximum 6 gods allowed in council');\r\n    }\r\n\r\n    const defaultSettings: CouncilSettings = {\r\n      maxParticipants: 6,\r\n      sessionDuration: 30,\r\n      turnLength: 15,\r\n      allowInterruptions: true,\r\n      allowRituals: true,\r\n      topicComplexity: 'moderate',\r\n      moodIntensity: 'moderate'\r\n    };\r\n\r\n    const finalSettings = { ...defaultSettings, ...settings };\r\n\r\n    const session: CouncilSession = {\r\n      id: `council-${Date.now()}`,\r\n      gods,\r\n      topic: topic.title,\r\n      messages: [],\r\n      status: 'preparing',\r\n      startTime: new Date(),\r\n      settings: finalSettings\r\n    };\r\n\r\n    this.currentSession = session;\r\n    this.isRunning = false;\r\n\r\n    // Add opening message\r\n    const openingMessage: CouncilMessage = {\r\n      id: `msg-${Date.now()}`,\r\n      godId: 'system',\r\n      godName: 'Council Herald',\r\n      godTemperament: 'neutral',\r\n      content: `The Pantheon Council is now in session. Topic: \"${topic.title}\". ${gods.length} deities have gathered to discuss ${topic.description}`,\r\n      timestamp: new Date(),\r\n      type: 'speech',\r\n      emotion: 'neutral'\r\n    };\r\n\r\n    session.messages.push(openingMessage);\r\n\r\n    // Initialize god memories for this session\r\n    await this.initializeSessionMemories(session);\r\n\r\n    return session;\r\n  }\r\n\r\n  // Initialize memories for all gods in the session\r\n  private async initializeSessionMemories(session: CouncilSession): Promise<void> {\r\n    for (const god of session.gods) {\r\n      const memory = await memoryService.getGodMemory(god.id);\r\n      if (memory) {\r\n        // Add council session memory\r\n        await memoryService.addMemory(god.id, {\r\n          type: 'interaction',\r\n          content: `Participating in Pantheon Council session \"${session.topic}\" with ${session.gods.length - 1} other deities`,\r\n          importance: 8,\r\n          tags: ['council', 'pantheon', 'debate', session.topic.toLowerCase().replace(/\\s+/g, '-')],\r\n          metadata: {\r\n            sessionId: session.id,\r\n            participants: session.gods.map(g => g.id),\r\n            topic: session.topic\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  // Start the council discussion\r\n  public async startDiscussion(): Promise<void> {\r\n    if (!this.currentSession) {\r\n      throw new Error('No active council session');\r\n    }\r\n\r\n    if (this.isRunning) {\r\n      throw new Error('Council discussion is already running');\r\n    }\r\n\r\n    this.currentSession.status = 'active';\r\n    this.isRunning = true;\r\n\r\n    // Start the session timer\r\n    this.sessionTimer = setTimeout(() => {\r\n      this.endCouncil();\r\n    }, this.currentSession.settings.sessionDuration * 60 * 1000);\r\n\r\n    // Start the first turn\r\n    await this.nextTurn();\r\n  }\r\n\r\n  // Handle the next turn in the council\r\n  private async nextTurn(): Promise<void> {\r\n    if (!this.currentSession || !this.isRunning) return;\r\n\r\n    // Select next god to speak\r\n    const nextGod = this.selectNextSpeaker();\r\n    if (!nextGod) return;\r\n\r\n    // Generate AI response for the god\r\n    const response = await this.generateGodResponse(nextGod);\r\n\r\n    if (response) {\r\n      this.currentSession.messages.push(response);\r\n      this.messageQueue.push(response);\r\n\r\n      // Trigger TTS if available\r\n      this.speakMessage(response);\r\n    }\r\n\r\n    // Schedule next turn\r\n    this.turnTimer = setTimeout(() => {\r\n      this.nextTurn();\r\n    }, this.currentSession.settings.turnLength * 1000);\r\n  }\r\n\r\n  // Select the next god to speak\r\n  private selectNextSpeaker(): God | null {\r\n    if (!this.currentSession) return null;\r\n\r\n    const { gods, messages, settings } = this.currentSession;\r\n\r\n    // Get the last few messages to see who has spoken recently\r\n    const recentSpeakers = messages\r\n      .slice(-3)\r\n      .map(msg => msg.godId)\r\n      .filter(id => id !== 'system');\r\n\r\n    // Find gods who haven't spoken recently\r\n    const availableGods = gods.filter(god =>\r\n      !recentSpeakers.includes(god.id)\r\n    );\r\n\r\n    if (availableGods.length === 0) {\r\n      // If all gods have spoken recently, pick randomly\r\n      return gods[Math.floor(Math.random() * gods.length)];\r\n    }\r\n\r\n    // Pick from available gods, with some randomness\r\n    return availableGods[Math.floor(Math.random() * availableGods.length)];\r\n  }\r\n\r\n  // Generate AI response for a god\r\n  private async generateGodResponse(god: God): Promise<CouncilMessage | null> {\r\n    if (!this.currentSession) return null;\r\n\r\n    try {\r\n      // Get god's memory and personality\r\n      const memory = await memoryService.getGodMemory(god.id);\r\n      const recentMessages = this.currentSession.messages.slice(-5);\r\n\r\n      // Build context for AI\r\n      const context = this.buildAIContext(god, recentMessages);\r\n\r\n      // Generate response using AI (placeholder for now)\r\n      const content = await this.callAI(god, context);\r\n\r\n      if (!content) return null;\r\n\r\n      const message: CouncilMessage = {\r\n        id: `msg-${Date.now()}-${god.id}`,\r\n        godId: god.id,\r\n        godName: god.name,\r\n        godTemperament: god.temperament,\r\n        content,\r\n        timestamp: new Date(),\r\n        type: 'speech',\r\n        emotion: this.determineEmotion(content, god.temperament)\r\n      };\r\n\r\n      return message;\r\n    } catch (error) {\r\n      console.error('Failed to generate god response:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Build context for AI generation\r\n  private buildAIContext(god: God, recentMessages: CouncilMessage[]): string {\r\n    const topic = this.currentSession?.topic || '';\r\n    const otherGods = this.currentSession?.gods.filter(g => g.id !== god.id) || [];\r\n\r\n    let context = `You are ${god.name}, the ${god.domain}. Your temperament is ${god.temperament}. `;\r\n    context += `You are participating in a Pantheon Council discussion about: \"${topic}\". `;\r\n\r\n    if (otherGods.length > 0) {\r\n      context += `Other participants include: ${otherGods.map(g => g.name).join(', ')}. `;\r\n    }\r\n\r\n    if (recentMessages.length > 0) {\r\n      context += `Recent discussion: ${recentMessages.map(msg =>\r\n        `${msg.godName}: \"${msg.content}\"`\r\n      ).join(' ')} `;\r\n    }\r\n\r\n    context += `Respond as ${god.name} would, considering your domain (${god.domain}) and temperament (${god.temperament}). `;\r\n    context += `Keep your response under 200 words and make it engaging for the council.`;\r\n\r\n    return context;\r\n  }\r\n\r\n  // Call AI service (placeholder - will be replaced with real AI)\r\n  private async callAI(god: God, context: string): Promise<string | null> {\r\n    // For now, return a placeholder response\r\n    // This will be replaced with actual AI calls when Ollama is set up\r\n    const responses = {\r\n      'Orderly': [\r\n        `As the embodiment of ${god.domain}, I must emphasize the importance of structure and order in this matter.`,\r\n        `The principles of ${god.domain} demand that we consider the systematic implications of our discussion.`,\r\n        `From my divine perspective on ${god.domain}, I see clear patterns that we must acknowledge.`\r\n      ],\r\n      'Mystical': [\r\n        `The ancient wisdom of ${god.domain} reveals deeper truths beyond our current understanding.`,\r\n        `Through the mystical lens of ${god.domain}, I perceive connections that others might miss.`,\r\n        `The cosmic forces of ${god.domain} whisper secrets that we would do well to heed.`\r\n      ],\r\n      'Radiant': [\r\n        `The light of ${god.domain} illuminates the path forward for us all.`,\r\n        `Through the radiant power of ${god.domain}, I see hope and possibility in our discussion.`,\r\n        `Let the divine energy of ${god.domain} guide us toward enlightenment.`\r\n      ],\r\n      'Corrupt': [\r\n        `The dark truths of ${god.domain} reveal the flaws in your arguments.`,\r\n        `You speak of order, but ${god.domain} shows us the beauty in chaos and corruption.`,\r\n        `The corrupting influence of ${god.domain} exposes the weaknesses in your position.`\r\n      ],\r\n      'Glitched': [\r\n        `ERROR: ${god.domain} protocols indicate... *static* ... unexpected variables in the equation.`,\r\n        `The glitched nature of ${god.domain} suggests... *interference* ... alternative solutions.`,\r\n        `*corruption* ... ${god.domain} analysis reveals... *error* ... interesting anomalies.`\r\n      ]\r\n    };\r\n\r\n    const godResponses = responses[god.temperament] || responses['Orderly'];\r\n    return godResponses[Math.floor(Math.random() * godResponses.length)];\r\n  }\r\n\r\n  // Determine emotion from content and temperament\r\n  private determineEmotion(content: string, temperament: string): CouncilMessage['emotion'] {\r\n    const lowerContent = content.toLowerCase();\r\n\r\n    if (lowerContent.includes('laugh') || lowerContent.includes('amuse')) return 'amused';\r\n    if (lowerContent.includes('anger') || lowerContent.includes('rage') || lowerContent.includes('fury')) return 'angry';\r\n    if (lowerContent.includes('curious') || lowerContent.includes('wonder') || lowerContent.includes('question')) return 'curious';\r\n    if (lowerContent.includes('dismiss') || lowerContent.includes('ignore') || lowerContent.includes('trivial')) return 'dismissive';\r\n    if (lowerContent.includes('respect') || lowerContent.includes('honor') || lowerContent.includes('revere')) return 'respectful';\r\n    if (lowerContent.includes('threat') || lowerContent.includes('warning') || lowerContent.includes('danger')) return 'threatening';\r\n\r\n    return 'neutral';\r\n  }\r\n\r\n  // Speak message using TTS\r\n  private speakMessage(message: CouncilMessage): void {\r\n    // This will integrate with the TTS service\r\n    console.log(`🎤 ${message.godName}: ${message.content}`);\r\n  }\r\n\r\n  // Pause the council\r\n  public pauseCouncil(): void {\r\n    if (this.turnTimer) {\r\n      clearTimeout(this.turnTimer);\r\n      this.turnTimer = null;\r\n    }\r\n    if (this.currentSession) {\r\n      this.currentSession.status = 'paused';\r\n    }\r\n    this.isRunning = false;\r\n  }\r\n\r\n  // Resume the council\r\n  public resumeCouncil(): void {\r\n    if (this.currentSession && this.currentSession.status === 'paused') {\r\n      this.currentSession.status = 'active';\r\n      this.isRunning = true;\r\n      this.nextTurn();\r\n    }\r\n  }\r\n\r\n  // End the council\r\n  public endCouncil(): void {\r\n    if (this.turnTimer) {\r\n      clearTimeout(this.turnTimer);\r\n      this.turnTimer = null;\r\n    }\r\n    if (this.sessionTimer) {\r\n      clearTimeout(this.sessionTimer);\r\n      this.sessionTimer = null;\r\n    }\r\n\r\n    if (this.currentSession) {\r\n      this.currentSession.status = 'concluded';\r\n      this.currentSession.endTime = new Date();\r\n\r\n      // Add closing message\r\n      const closingMessage: CouncilMessage = {\r\n        id: `msg-${Date.now()}`,\r\n        godId: 'system',\r\n        godName: 'Council Herald',\r\n        godTemperament: 'neutral',\r\n        content: `The Pantheon Council session \"${this.currentSession.topic}\" has concluded. ${this.currentSession.messages.length - 1} divine insights were shared.`,\r\n        timestamp: new Date(),\r\n        type: 'speech',\r\n        emotion: 'neutral'\r\n      };\r\n\r\n      this.currentSession.messages.push(closingMessage);\r\n    }\r\n\r\n    this.isRunning = false;\r\n  }\r\n\r\n  // Get current session\r\n  public getCurrentSession(): CouncilSession | null {\r\n    return this.currentSession;\r\n  }\r\n\r\n  // Get session history\r\n  public getSessionHistory(): CouncilSession[] {\r\n    // This would load from storage\r\n    return [];\r\n  }\r\n\r\n  // Add a manual message (for user interaction)\r\n  public addManualMessage(godId: string, content: string): void {\r\n    if (!this.currentSession) return;\r\n\r\n    const god = this.currentSession.gods.find(g => g.id === godId);\r\n    if (!god) return;\r\n\r\n    const message: CouncilMessage = {\r\n      id: `msg-${Date.now()}-${godId}`,\r\n      godId,\r\n      godName: god.name,\r\n      godTemperament: god.temperament,\r\n      content,\r\n      timestamp: new Date(),\r\n      type: 'speech',\r\n      emotion: this.determineEmotion(content, god.temperament)\r\n    };\r\n\r\n    this.currentSession.messages.push(message);\r\n    this.speakMessage(message);\r\n  }\r\n\r\n  // Get message queue (for real-time updates)\r\n  public getMessageQueue(): CouncilMessage[] {\r\n    return [...this.messageQueue];\r\n  }\r\n\r\n  // Clear message queue\r\n  public clearMessageQueue(): void {\r\n    this.messageQueue = [];\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const pantheonCouncilService = new PantheonCouncilService();\r\nexport default pantheonCouncilService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}