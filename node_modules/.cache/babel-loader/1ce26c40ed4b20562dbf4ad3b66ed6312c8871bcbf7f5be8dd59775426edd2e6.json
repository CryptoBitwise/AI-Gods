{"ast":null,"code":"// Chat storage service for persisting conversations\n\nclass ChatStorageService {\n  constructor() {\n    this.STORAGE_KEY = 'ai_gods_chats';\n    this.MAX_SESSIONS_PER_GOD = 10;\n  }\n  // Keep last 10 sessions per god\n\n  // Get all chat sessions for a specific god\n  getChatSessions(godId) {\n    try {\n      const stored = localStorage.getItem(this.STORAGE_KEY);\n      if (!stored) return [];\n      const allSessions = JSON.parse(stored);\n      return allSessions.filter(session => session.godId === godId).sort((a, b) => new Date(b.lastUpdated).getTime() - new Date(a.lastUpdated).getTime());\n    } catch (error) {\n      console.error('Error loading chat sessions:', error);\n      return [];\n    }\n  }\n\n  // Get the most recent chat session for a god\n  getCurrentSession(godId) {\n    const sessions = this.getChatSessions(godId);\n    return sessions.length > 0 ? sessions[0] : null;\n  }\n\n  // Add a new message to the current session\n  addMessage(godId, message) {\n    try {\n      const stored = localStorage.getItem(this.STORAGE_KEY);\n      let allSessions = stored ? JSON.parse(stored) : [];\n\n      // Find or create current session\n      let currentSession = allSessions.find(session => session.godId === godId);\n      if (!currentSession) {\n        currentSession = {\n          id: this.generateSessionId(),\n          godId,\n          messages: [],\n          lastUpdated: new Date(),\n          totalMessages: 0\n        };\n        allSessions.push(currentSession);\n      }\n\n      // Add the new message\n      const newMessage = {\n        ...message,\n        id: this.generateMessageId(),\n        timestamp: new Date()\n      };\n      currentSession.messages.push(newMessage);\n      currentSession.lastUpdated = new Date();\n      currentSession.totalMessages = currentSession.messages.length;\n\n      // Clean up old sessions if we have too many\n      this.cleanupOldSessions(allSessions, godId);\n\n      // Save back to localStorage\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(allSessions));\n      console.log(`💾 Chat saved: ${currentSession.messages.length} messages for ${godId}`);\n    } catch (error) {\n      console.error('Error saving chat message:', error);\n    }\n  }\n\n  // Start a new chat session for a god\n  startNewSession(godId) {\n    try {\n      const stored = localStorage.getItem(this.STORAGE_KEY);\n      let allSessions = stored ? JSON.parse(stored) : [];\n      const newSession = {\n        id: this.generateSessionId(),\n        godId,\n        messages: [],\n        lastUpdated: new Date(),\n        totalMessages: 0\n      };\n      allSessions.push(newSession);\n      this.cleanupOldSessions(allSessions, godId);\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(allSessions));\n      console.log(`🆕 New chat session started for ${godId}`);\n      return newSession;\n    } catch (error) {\n      console.error('Error starting new session:', error);\n      return {\n        id: this.generateSessionId(),\n        godId,\n        messages: [],\n        lastUpdated: new Date(),\n        totalMessages: 0\n      };\n    }\n  }\n\n  // Clear all chat sessions for a specific god\n  clearChatHistory(godId) {\n    try {\n      const stored = localStorage.getItem(this.STORAGE_KEY);\n      if (!stored) return;\n      let allSessions = JSON.parse(stored);\n      allSessions = allSessions.filter(session => session.godId !== godId);\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(allSessions));\n      console.log(`🗑️ Chat history cleared for ${godId}`);\n    } catch (error) {\n      console.error('Error clearing chat history:', error);\n    }\n  }\n\n  // Clear all chat history\n  clearAllChats() {\n    try {\n      localStorage.removeItem(this.STORAGE_KEY);\n      console.log('🗑️ All chat history cleared');\n    } catch (error) {\n      console.error('Error clearing all chats:', error);\n    }\n  }\n\n  // Get chat statistics\n  getChatStats() {\n    try {\n      const stored = localStorage.getItem(this.STORAGE_KEY);\n      if (!stored) return {\n        totalSessions: 0,\n        totalMessages: 0,\n        godsWithChats: []\n      };\n      const allSessions = JSON.parse(stored);\n      const godsWithChats = Array.from(new Set(allSessions.map(session => session.godId)));\n      const totalMessages = allSessions.reduce((sum, session) => sum + session.totalMessages, 0);\n      return {\n        totalSessions: allSessions.length,\n        totalMessages,\n        godsWithChats\n      };\n    } catch (error) {\n      console.error('Error getting chat stats:', error);\n      return {\n        totalSessions: 0,\n        totalMessages: 0,\n        godsWithChats: []\n      };\n    }\n  }\n\n  // Export chat data for backup\n  exportChats() {\n    try {\n      const stored = localStorage.getItem(this.STORAGE_KEY);\n      return stored || '[]';\n    } catch (error) {\n      console.error('Error exporting chats:', error);\n      return '[]';\n    }\n  }\n\n  // Import chat data from backup\n  importChats(chatData) {\n    try {\n      const parsed = JSON.parse(chatData);\n      if (Array.isArray(parsed)) {\n        localStorage.setItem(this.STORAGE_KEY, chatData);\n        console.log('📥 Chat data imported successfully');\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Error importing chats:', error);\n      return false;\n    }\n  }\n  generateSessionId() {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n  generateMessageId() {\n    return `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n  cleanupOldSessions(allSessions, godId) {\n    const godSessions = allSessions.filter(session => session.godId === godId);\n    if (godSessions.length > this.MAX_SESSIONS_PER_GOD) {\n      // Remove oldest sessions beyond the limit\n      const sessionsToRemove = godSessions.sort((a, b) => new Date(a.lastUpdated).getTime() - new Date(b.lastUpdated).getTime()).slice(0, godSessions.length - this.MAX_SESSIONS_PER_GOD);\n      sessionsToRemove.forEach(session => {\n        const index = allSessions.findIndex(s => s.id === session.id);\n        if (index > -1) {\n          allSessions.splice(index, 1);\n        }\n      });\n    }\n  }\n}\nexport default new ChatStorageService();","map":{"version":3,"names":["ChatStorageService","constructor","STORAGE_KEY","MAX_SESSIONS_PER_GOD","getChatSessions","godId","stored","localStorage","getItem","allSessions","JSON","parse","filter","session","sort","a","b","Date","lastUpdated","getTime","error","console","getCurrentSession","sessions","length","addMessage","message","currentSession","find","id","generateSessionId","messages","totalMessages","push","newMessage","generateMessageId","timestamp","cleanupOldSessions","setItem","stringify","log","startNewSession","newSession","clearChatHistory","clearAllChats","removeItem","getChatStats","totalSessions","godsWithChats","Array","from","Set","map","reduce","sum","exportChats","importChats","chatData","parsed","isArray","now","Math","random","toString","substr","godSessions","sessionsToRemove","slice","forEach","index","findIndex","s","splice"],"sources":["D:/AI-Gods/src/services/chatStorage.ts"],"sourcesContent":["// Chat storage service for persisting conversations\r\nimport { God } from '../types/gods';\r\n\r\nexport interface ChatMessage {\r\n    id: string;\r\n    role: 'user' | 'assistant';\r\n    content: string;\r\n    timestamp: Date;\r\n    godId: string;\r\n}\r\n\r\nexport interface ChatSession {\r\n    id: string;\r\n    godId: string;\r\n    messages: ChatMessage[];\r\n    lastUpdated: Date;\r\n    totalMessages: number;\r\n}\r\n\r\nclass ChatStorageService {\r\n    private readonly STORAGE_KEY = 'ai_gods_chats';\r\n    private readonly MAX_SESSIONS_PER_GOD = 10; // Keep last 10 sessions per god\r\n\r\n    // Get all chat sessions for a specific god\r\n    public getChatSessions(godId: string): ChatSession[] {\r\n        try {\r\n            const stored = localStorage.getItem(this.STORAGE_KEY);\r\n            if (!stored) return [];\r\n\r\n            const allSessions: ChatSession[] = JSON.parse(stored);\r\n            return allSessions\r\n                .filter(session => session.godId === godId)\r\n                .sort((a, b) => new Date(b.lastUpdated).getTime() - new Date(a.lastUpdated).getTime());\r\n        } catch (error) {\r\n            console.error('Error loading chat sessions:', error);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    // Get the most recent chat session for a god\r\n    public getCurrentSession(godId: string): ChatSession | null {\r\n        const sessions = this.getChatSessions(godId);\r\n        return sessions.length > 0 ? sessions[0] : null;\r\n    }\r\n\r\n    // Add a new message to the current session\r\n    public addMessage(godId: string, message: Omit<ChatMessage, 'id' | 'timestamp'>): void {\r\n        try {\r\n            const stored = localStorage.getItem(this.STORAGE_KEY);\r\n            let allSessions: ChatSession[] = stored ? JSON.parse(stored) : [];\r\n\r\n            // Find or create current session\r\n            let currentSession = allSessions.find(session => session.godId === godId);\r\n\r\n            if (!currentSession) {\r\n                currentSession = {\r\n                    id: this.generateSessionId(),\r\n                    godId,\r\n                    messages: [],\r\n                    lastUpdated: new Date(),\r\n                    totalMessages: 0\r\n                };\r\n                allSessions.push(currentSession);\r\n            }\r\n\r\n            // Add the new message\r\n            const newMessage: ChatMessage = {\r\n                ...message,\r\n                id: this.generateMessageId(),\r\n                timestamp: new Date()\r\n            };\r\n\r\n            currentSession.messages.push(newMessage);\r\n            currentSession.lastUpdated = new Date();\r\n            currentSession.totalMessages = currentSession.messages.length;\r\n\r\n            // Clean up old sessions if we have too many\r\n            this.cleanupOldSessions(allSessions, godId);\r\n\r\n            // Save back to localStorage\r\n            localStorage.setItem(this.STORAGE_KEY, JSON.stringify(allSessions));\r\n\r\n            console.log(`💾 Chat saved: ${currentSession.messages.length} messages for ${godId}`);\r\n        } catch (error) {\r\n            console.error('Error saving chat message:', error);\r\n        }\r\n    }\r\n\r\n    // Start a new chat session for a god\r\n    public startNewSession(godId: string): ChatSession {\r\n        try {\r\n            const stored = localStorage.getItem(this.STORAGE_KEY);\r\n            let allSessions: ChatSession[] = stored ? JSON.parse(stored) : [];\r\n\r\n            const newSession: ChatSession = {\r\n                id: this.generateSessionId(),\r\n                godId,\r\n                messages: [],\r\n                lastUpdated: new Date(),\r\n                totalMessages: 0\r\n            };\r\n\r\n            allSessions.push(newSession);\r\n            this.cleanupOldSessions(allSessions, godId);\r\n\r\n            localStorage.setItem(this.STORAGE_KEY, JSON.stringify(allSessions));\r\n\r\n            console.log(`🆕 New chat session started for ${godId}`);\r\n            return newSession;\r\n        } catch (error) {\r\n            console.error('Error starting new session:', error);\r\n            return {\r\n                id: this.generateSessionId(),\r\n                godId,\r\n                messages: [],\r\n                lastUpdated: new Date(),\r\n                totalMessages: 0\r\n            };\r\n        }\r\n    }\r\n\r\n    // Clear all chat sessions for a specific god\r\n        public clearChatHistory(godId: string): void {\r\n        try {\r\n            const stored = localStorage.getItem(this.STORAGE_KEY);\r\n            if (!stored) return;\r\n\r\n            let allSessions: ChatSession[] = JSON.parse(stored);\r\n            allSessions = allSessions.filter(session => session.godId !== godId);\r\n            \r\n            localStorage.setItem(this.STORAGE_KEY, JSON.stringify(allSessions));\r\n            console.log(`🗑️ Chat history cleared for ${godId}`);\r\n        } catch (error) {\r\n            console.error('Error clearing chat history:', error);\r\n        }\r\n    }\r\n\r\n    // Clear all chat history\r\n    public clearAllChats(): void {\r\n        try {\r\n            localStorage.removeItem(this.STORAGE_KEY);\r\n            console.log('🗑️ All chat history cleared');\r\n        } catch (error) {\r\n            console.error('Error clearing all chats:', error);\r\n        }\r\n    }\r\n\r\n    // Get chat statistics\r\n    public getChatStats(): { totalSessions: number; totalMessages: number; godsWithChats: string[] } {\r\n        try {\r\n            const stored = localStorage.getItem(this.STORAGE_KEY);\r\n            if (!stored) return { totalSessions: 0, totalMessages: 0, godsWithChats: [] };\r\n\r\n            const allSessions: ChatSession[] = JSON.parse(stored);\r\n            const godsWithChats = Array.from(new Set(allSessions.map(session => session.godId)));\r\n            const totalMessages = allSessions.reduce((sum, session) => sum + session.totalMessages, 0);\r\n\r\n            return {\r\n                totalSessions: allSessions.length,\r\n                totalMessages,\r\n                godsWithChats\r\n            };\r\n        } catch (error) {\r\n            console.error('Error getting chat stats:', error);\r\n            return { totalSessions: 0, totalMessages: 0, godsWithChats: [] };\r\n        }\r\n    }\r\n\r\n    // Export chat data for backup\r\n    public exportChats(): string {\r\n        try {\r\n            const stored = localStorage.getItem(this.STORAGE_KEY);\r\n            return stored || '[]';\r\n        } catch (error) {\r\n            console.error('Error exporting chats:', error);\r\n            return '[]';\r\n        }\r\n    }\r\n\r\n    // Import chat data from backup\r\n    public importChats(chatData: string): boolean {\r\n        try {\r\n            const parsed = JSON.parse(chatData);\r\n            if (Array.isArray(parsed)) {\r\n                localStorage.setItem(this.STORAGE_KEY, chatData);\r\n                console.log('📥 Chat data imported successfully');\r\n                return true;\r\n            }\r\n            return false;\r\n        } catch (error) {\r\n            console.error('Error importing chats:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private generateSessionId(): string {\r\n        return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    }\r\n\r\n    private generateMessageId(): string {\r\n        return `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    }\r\n\r\n    private cleanupOldSessions(allSessions: ChatSession[], godId: string): void {\r\n        const godSessions = allSessions.filter(session => session.godId === godId);\r\n        if (godSessions.length > this.MAX_SESSIONS_PER_GOD) {\r\n            // Remove oldest sessions beyond the limit\r\n            const sessionsToRemove = godSessions\r\n                .sort((a, b) => new Date(a.lastUpdated).getTime() - new Date(b.lastUpdated).getTime())\r\n                .slice(0, godSessions.length - this.MAX_SESSIONS_PER_GOD);\r\n\r\n            sessionsToRemove.forEach(session => {\r\n                const index = allSessions.findIndex(s => s.id === session.id);\r\n                if (index > -1) {\r\n                    allSessions.splice(index, 1);\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default new ChatStorageService();\r\nexport type { ChatMessage, ChatSession };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}