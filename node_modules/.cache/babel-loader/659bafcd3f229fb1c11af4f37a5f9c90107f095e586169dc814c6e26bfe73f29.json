{"ast":null,"code":"// Coqui TTS service for offline, unlimited text-to-speech\n// This service provides custom voices for each god without API keys or limits\n\nclass CoquiTTSService {\n  constructor() {\n    this.isSupported = false;\n    this.voices = [];\n    this.audioContext = null;\n    this.currentAudio = null;\n    this.initializeVoices();\n    this.checkSupport();\n  }\n  initializeVoices() {\n    // Pre-defined voices for each god personality\n    this.voices = [\n    // Elion - God of Wisdom (Orderly)\n    {\n      id: 'elion-voice',\n      name: 'Elion the Wise',\n      language: 'en',\n      gender: 'male',\n      description: 'Deep, authoritative voice with measured cadence',\n      sampleRate: 22050\n    },\n    // Nyxa - Goddess of Dreams (Mystical)\n    {\n      id: 'nyxa-voice',\n      name: 'Nyxa the Mysterious',\n      language: 'en',\n      gender: 'female',\n      description: 'Ethereal, whispery voice with mystical undertones',\n      sampleRate: 22050\n    },\n    // Zara - Goddess of Light (Radiant)\n    {\n      id: 'zara-voice',\n      name: 'Zara the Radiant',\n      language: 'en',\n      gender: 'female',\n      description: 'Warm, bright voice with uplifting energy',\n      sampleRate: 22050\n    },\n    // Malakai - God of Corruption (Corrupt)\n    {\n      id: 'malakai-voice',\n      name: 'Malakai the Corrupt',\n      language: 'en',\n      gender: 'male',\n      description: 'Dark, seductive voice with dangerous allure',\n      sampleRate: 22050\n    },\n    // Glitch - Digital Entity (Glitched)\n    {\n      id: 'glitch-voice',\n      name: 'Glitch the Digital',\n      language: 'en',\n      gender: 'neutral',\n      description: 'Digital, glitchy voice with electronic effects',\n      sampleRate: 22050\n    }];\n  }\n  checkSupport() {\n    // Check if Web Audio API is supported\n    this.isSupported = !!(window.AudioContext || window.webkitAudioContext);\n    if (this.isSupported) {\n      this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      console.log('🎵 Coqui TTS: Web Audio API supported');\n    } else {\n      console.warn('⚠️ Coqui TTS: Web Audio API not supported, falling back to Web Speech API');\n    }\n  }\n\n  // Get available voices\n  getVoices() {\n    return [...this.voices];\n  }\n\n  // Get voice by ID\n  getVoice(voiceId) {\n    return this.voices.find(voice => voice.id === voiceId);\n  }\n\n  // Get voice by god temperament\n  getVoiceByTemperament(temperament) {\n    const voiceMap = {\n      'Orderly': 'elion-voice',\n      'Mystical': 'nyxa-voice',\n      'Radiant': 'zara-voice',\n      'Corrupt': 'malakai-voice',\n      'Glitched': 'glitch-voice'\n    };\n    const voiceId = voiceMap[temperament] || 'elion-voice';\n    return this.getVoice(voiceId) || this.voices[0];\n  }\n\n  // Check if service is supported\n  isServiceSupported() {\n    return this.isSupported;\n  }\n\n  // Generate speech using Coqui TTS (simulated for now)\n  async speak(text, options) {\n    if (!this.isSupported) {\n      throw new Error('Coqui TTS not supported in this browser');\n    }\n    try {\n      console.log(`🎵 Coqui TTS: Speaking \"${text.substring(0, 50)}...\" with voice ${options.voice}`);\n\n      // For now, we'll simulate the TTS with a delay and audio generation\n      // In a real implementation, this would call the Coqui TTS API or local model\n\n      // Simulate processing time\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Generate a simple audio tone as placeholder\n      await this.generatePlaceholderAudio(text, options);\n      console.log('✅ Coqui TTS: Speech completed');\n    } catch (error) {\n      console.error('❌ Coqui TTS Error:', error);\n      throw error;\n    }\n  }\n\n  // Generate placeholder audio (this would be replaced with real Coqui TTS)\n  async generatePlaceholderAudio(text, options) {\n    if (!this.audioContext) return;\n    try {\n      // Create a simple audio tone based on the voice characteristics\n      const voice = this.getVoice(options.voice);\n      if (!voice) return;\n\n      // Generate different tones for different voices\n      const frequency = this.getVoiceFrequency(voice);\n      const duration = Math.min(text.length * 0.1, 3); // Max 3 seconds\n\n      // Create oscillator for tone\n      const oscillator = this.audioContext.createOscillator();\n      const gainNode = this.audioContext.createGain();\n      oscillator.connect(gainNode);\n      gainNode.connect(this.audioContext.destination);\n\n      // Set voice characteristics\n      oscillator.frequency.setValueAtTime(frequency, this.audioContext.currentTime);\n      oscillator.type = 'sine';\n\n      // Apply voice-specific effects\n      this.applyVoiceEffects(oscillator, gainNode, voice, options);\n\n      // Play the audio\n      oscillator.start(this.audioContext.currentTime);\n      oscillator.stop(this.audioContext.currentTime + duration);\n\n      // Store reference for stopping\n      this.currentAudio = oscillator;\n    } catch (error) {\n      console.error('Error generating placeholder audio:', error);\n    }\n  }\n\n  // Get frequency based on voice characteristics\n  getVoiceFrequency(voice) {\n    const baseFrequencies = {\n      'elion-voice': 120,\n      // Deep, authoritative\n      'nyxa-voice': 220,\n      // Ethereal, mysterious\n      'zara-voice': 180,\n      // Warm, bright\n      'malakai-voice': 140,\n      // Dark, seductive\n      'glitch-voice': 100 // Digital, glitchy\n    };\n    return baseFrequencies[voice.id] || 150;\n  }\n\n  // Apply voice-specific audio effects\n  applyVoiceEffects(oscillator, gainNode, voice, options) {\n    const now = this.audioContext.currentTime;\n\n    // Apply different effects based on voice\n    switch (voice.id) {\n      case 'elion-voice':\n        // Orderly: steady, measured\n        gainNode.gain.setValueAtTime(0.3, now);\n        gainNode.gain.linearRampToValueAtTime(0.3, now + 0.1);\n        break;\n      case 'nyxa-voice':\n        // Mystical: ethereal, whispery\n        gainNode.gain.setValueAtTime(0.2, now);\n        gainNode.gain.exponentialRampToValueAtTime(0.1, now + 0.5);\n        break;\n      case 'zara-voice':\n        // Radiant: warm, bright\n        gainNode.gain.setValueAtTime(0.4, now);\n        gainNode.gain.linearRampToValueAtTime(0.4, now + 0.2);\n        break;\n      case 'malakai-voice':\n        // Corrupt: dark, seductive\n        gainNode.gain.setValueAtTime(0.25, now);\n        gainNode.gain.linearRampToValueAtTime(0.35, now + 0.3);\n        break;\n      case 'glitch-voice':\n        // Glitched: digital, chaotic\n        gainNode.gain.setValueAtTime(0.3, now);\n        // Add some glitch effects\n        setInterval(() => {\n          if (this.audioContext) {\n            oscillator.frequency.setValueAtTime(oscillator.frequency.value + (Math.random() - 0.5) * 50, this.audioContext.currentTime);\n          }\n        }, 100);\n        break;\n    }\n  }\n\n  // Stop current speech\n  stop() {\n    if (this.currentAudio) {\n      this.currentAudio.stop();\n      this.currentAudio = null;\n    }\n    if (this.audioContext && this.audioContext.state === 'running') {\n      this.audioContext.suspend();\n    }\n  }\n\n  // Pause speech\n  pause() {\n    if (this.audioContext && this.audioContext.state === 'running') {\n      this.audioContext.suspend();\n    }\n  }\n\n  // Resume speech\n  resume() {\n    if (this.audioContext && this.audioContext.state === 'suspended') {\n      this.audioContext.resume();\n    }\n  }\n\n  // Get service status\n  getStatus() {\n    return {\n      supported: this.isSupported,\n      voices: this.voices.length,\n      ready: this.isSupported && !!this.audioContext\n    };\n  }\n\n  // Cleanup resources\n  destroy() {\n    this.stop();\n    if (this.audioContext) {\n      this.audioContext.close();\n      this.audioContext = null;\n    }\n  }\n}\nexport default new CoquiTTSService();","map":{"version":3,"names":["CoquiTTSService","constructor","isSupported","voices","audioContext","currentAudio","initializeVoices","checkSupport","id","name","language","gender","description","sampleRate","window","AudioContext","webkitAudioContext","console","log","warn","getVoices","getVoice","voiceId","find","voice","getVoiceByTemperament","temperament","voiceMap","isServiceSupported","speak","text","options","Error","substring","Promise","resolve","setTimeout","generatePlaceholderAudio","error","frequency","getVoiceFrequency","duration","Math","min","length","oscillator","createOscillator","gainNode","createGain","connect","destination","setValueAtTime","currentTime","type","applyVoiceEffects","start","stop","baseFrequencies","now","gain","linearRampToValueAtTime","exponentialRampToValueAtTime","setInterval","value","random","state","suspend","pause","resume","getStatus","supported","ready","destroy","close"],"sources":["D:/AI-Gods/src/services/coquiTTS.ts"],"sourcesContent":["// Coqui TTS service for offline, unlimited text-to-speech\r\n// This service provides custom voices for each god without API keys or limits\r\n\r\nexport interface CoquiVoice {\r\n  id: string;\r\n  name: string;\r\n  language: string;\r\n  gender: 'male' | 'female' | 'neutral';\r\n  description: string;\r\n  sampleRate: number;\r\n}\r\n\r\nexport interface TTSOptions {\r\n  voice: string;\r\n  speed?: number;\r\n  pitch?: number;\r\n  volume?: number;\r\n}\r\n\r\nclass CoquiTTSService {\r\n  private isSupported = false;\r\n  private voices: CoquiVoice[] = [];\r\n  private audioContext: AudioContext | null = null;\r\n  private currentAudio: AudioBufferSourceNode | null = null;\r\n\r\n  constructor() {\r\n    this.initializeVoices();\r\n    this.checkSupport();\r\n  }\r\n\r\n  private initializeVoices() {\r\n    // Pre-defined voices for each god personality\r\n    this.voices = [\r\n      // Elion - God of Wisdom (Orderly)\r\n      {\r\n        id: 'elion-voice',\r\n        name: 'Elion the Wise',\r\n        language: 'en',\r\n        gender: 'male',\r\n        description: 'Deep, authoritative voice with measured cadence',\r\n        sampleRate: 22050\r\n      },\r\n      // Nyxa - Goddess of Dreams (Mystical)\r\n      {\r\n        id: 'nyxa-voice',\r\n        name: 'Nyxa the Mysterious',\r\n        language: 'en',\r\n        gender: 'female',\r\n        description: 'Ethereal, whispery voice with mystical undertones',\r\n        sampleRate: 22050\r\n      },\r\n      // Zara - Goddess of Light (Radiant)\r\n      {\r\n        id: 'zara-voice',\r\n        name: 'Zara the Radiant',\r\n        language: 'en',\r\n        gender: 'female',\r\n        description: 'Warm, bright voice with uplifting energy',\r\n        sampleRate: 22050\r\n      },\r\n      // Malakai - God of Corruption (Corrupt)\r\n      {\r\n        id: 'malakai-voice',\r\n        name: 'Malakai the Corrupt',\r\n        language: 'en',\r\n        gender: 'male',\r\n        description: 'Dark, seductive voice with dangerous allure',\r\n        sampleRate: 22050\r\n      },\r\n      // Glitch - Digital Entity (Glitched)\r\n      {\r\n        id: 'glitch-voice',\r\n        name: 'Glitch the Digital',\r\n        language: 'en',\r\n        gender: 'neutral',\r\n        description: 'Digital, glitchy voice with electronic effects',\r\n        sampleRate: 22050\r\n      }\r\n    ];\r\n  }\r\n\r\n  private checkSupport() {\r\n    // Check if Web Audio API is supported\r\n    this.isSupported = !!(window.AudioContext || (window as any).webkitAudioContext);\r\n    \r\n    if (this.isSupported) {\r\n      this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n      console.log('🎵 Coqui TTS: Web Audio API supported');\r\n    } else {\r\n      console.warn('⚠️ Coqui TTS: Web Audio API not supported, falling back to Web Speech API');\r\n    }\r\n  }\r\n\r\n  // Get available voices\r\n  public getVoices(): CoquiVoice[] {\r\n    return [...this.voices];\r\n  }\r\n\r\n  // Get voice by ID\r\n  public getVoice(voiceId: string): CoquiVoice | undefined {\r\n    return this.voices.find(voice => voice.id === voiceId);\r\n  }\r\n\r\n  // Get voice by god temperament\r\n  public getVoiceByTemperament(temperament: string): CoquiVoice {\r\n    const voiceMap: { [key: string]: string } = {\r\n      'Orderly': 'elion-voice',\r\n      'Mystical': 'nyxa-voice',\r\n      'Radiant': 'zara-voice',\r\n      'Corrupt': 'malakai-voice',\r\n      'Glitched': 'glitch-voice'\r\n    };\r\n\r\n    const voiceId = voiceMap[temperament] || 'elion-voice';\r\n    return this.getVoice(voiceId) || this.voices[0];\r\n  }\r\n\r\n  // Check if service is supported\r\n  public isServiceSupported(): boolean {\r\n    return this.isSupported;\r\n  }\r\n\r\n  // Generate speech using Coqui TTS (simulated for now)\r\n  public async speak(text: string, options: TTSOptions): Promise<void> {\r\n    if (!this.isSupported) {\r\n      throw new Error('Coqui TTS not supported in this browser');\r\n    }\r\n\r\n    try {\r\n      console.log(`🎵 Coqui TTS: Speaking \"${text.substring(0, 50)}...\" with voice ${options.voice}`);\r\n      \r\n      // For now, we'll simulate the TTS with a delay and audio generation\r\n      // In a real implementation, this would call the Coqui TTS API or local model\r\n      \r\n      // Simulate processing time\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      // Generate a simple audio tone as placeholder\r\n      await this.generatePlaceholderAudio(text, options);\r\n      \r\n      console.log('✅ Coqui TTS: Speech completed');\r\n    } catch (error) {\r\n      console.error('❌ Coqui TTS Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Generate placeholder audio (this would be replaced with real Coqui TTS)\r\n  private async generatePlaceholderAudio(text: string, options: TTSOptions): Promise<void> {\r\n    if (!this.audioContext) return;\r\n\r\n    try {\r\n      // Create a simple audio tone based on the voice characteristics\r\n      const voice = this.getVoice(options.voice);\r\n      if (!voice) return;\r\n\r\n      // Generate different tones for different voices\r\n      const frequency = this.getVoiceFrequency(voice);\r\n      const duration = Math.min(text.length * 0.1, 3); // Max 3 seconds\r\n      \r\n      // Create oscillator for tone\r\n      const oscillator = this.audioContext.createOscillator();\r\n      const gainNode = this.audioContext.createGain();\r\n      \r\n      oscillator.connect(gainNode);\r\n      gainNode.connect(this.audioContext.destination);\r\n      \r\n      // Set voice characteristics\r\n      oscillator.frequency.setValueAtTime(frequency, this.audioContext.currentTime);\r\n      oscillator.type = 'sine';\r\n      \r\n      // Apply voice-specific effects\r\n      this.applyVoiceEffects(oscillator, gainNode, voice, options);\r\n      \r\n      // Play the audio\r\n      oscillator.start(this.audioContext.currentTime);\r\n      oscillator.stop(this.audioContext.currentTime + duration);\r\n      \r\n      // Store reference for stopping\r\n      this.currentAudio = oscillator;\r\n      \r\n    } catch (error) {\r\n      console.error('Error generating placeholder audio:', error);\r\n    }\r\n  }\r\n\r\n  // Get frequency based on voice characteristics\r\n  private getVoiceFrequency(voice: CoquiVoice): number {\r\n    const baseFrequencies: { [key: string]: number } = {\r\n      'elion-voice': 120,    // Deep, authoritative\r\n      'nyxa-voice': 220,     // Ethereal, mysterious\r\n      'zara-voice': 180,     // Warm, bright\r\n      'malakai-voice': 140,  // Dark, seductive\r\n      'glitch-voice': 100    // Digital, glitchy\r\n    };\r\n    \r\n    return baseFrequencies[voice.id] || 150;\r\n  }\r\n\r\n  // Apply voice-specific audio effects\r\n  private applyVoiceEffects(\r\n    oscillator: OscillatorNode, \r\n    gainNode: GainNode, \r\n    voice: CoquiVoice, \r\n    options: TTSOptions\r\n  ) {\r\n    const now = this.audioContext!.currentTime;\r\n    \r\n    // Apply different effects based on voice\r\n    switch (voice.id) {\r\n      case 'elion-voice':\r\n        // Orderly: steady, measured\r\n        gainNode.gain.setValueAtTime(0.3, now);\r\n        gainNode.gain.linearRampToValueAtTime(0.3, now + 0.1);\r\n        break;\r\n        \r\n      case 'nyxa-voice':\r\n        // Mystical: ethereal, whispery\r\n        gainNode.gain.setValueAtTime(0.2, now);\r\n        gainNode.gain.exponentialRampToValueAtTime(0.1, now + 0.5);\r\n        break;\r\n        \r\n      case 'zara-voice':\r\n        // Radiant: warm, bright\r\n        gainNode.gain.setValueAtTime(0.4, now);\r\n        gainNode.gain.linearRampToValueAtTime(0.4, now + 0.2);\r\n        break;\r\n        \r\n      case 'malakai-voice':\r\n        // Corrupt: dark, seductive\r\n        gainNode.gain.setValueAtTime(0.25, now);\r\n        gainNode.gain.linearRampToValueAtTime(0.35, now + 0.3);\r\n        break;\r\n        \r\n      case 'glitch-voice':\r\n        // Glitched: digital, chaotic\r\n        gainNode.gain.setValueAtTime(0.3, now);\r\n        // Add some glitch effects\r\n        setInterval(() => {\r\n          if (this.audioContext) {\r\n            oscillator.frequency.setValueAtTime(\r\n              oscillator.frequency.value + (Math.random() - 0.5) * 50,\r\n              this.audioContext.currentTime\r\n            );\r\n          }\r\n        }, 100);\r\n        break;\r\n    }\r\n  }\r\n\r\n  // Stop current speech\r\n  public stop(): void {\r\n    if (this.currentAudio) {\r\n      this.currentAudio.stop();\r\n      this.currentAudio = null;\r\n    }\r\n    \r\n    if (this.audioContext && this.audioContext.state === 'running') {\r\n      this.audioContext.suspend();\r\n    }\r\n  }\r\n\r\n  // Pause speech\r\n  public pause(): void {\r\n    if (this.audioContext && this.audioContext.state === 'running') {\r\n      this.audioContext.suspend();\r\n    }\r\n  }\r\n\r\n  // Resume speech\r\n  public resume(): void {\r\n    if (this.audioContext && this.audioContext.state === 'suspended') {\r\n      this.audioContext.resume();\r\n    }\r\n  }\r\n\r\n  // Get service status\r\n  public getStatus(): { supported: boolean; voices: number; ready: boolean } {\r\n    return {\r\n      supported: this.isSupported,\r\n      voices: this.voices.length,\r\n      ready: this.isSupported && !!this.audioContext\r\n    };\r\n  }\r\n\r\n  // Cleanup resources\r\n  public destroy(): void {\r\n    this.stop();\r\n    if (this.audioContext) {\r\n      this.audioContext.close();\r\n      this.audioContext = null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CoquiTTSService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}