{"ast":null,"code":"// TTS service for divine voices\nimport coquiTTS from './coquiTTS';\n// Define unique voices for each god temperament\nexport const GOD_VOICES = {\n  'Orderly': {\n    id: 'orderly',\n    name: 'The Architect',\n    settings: {\n      pitch: 0.8,\n      // Lower, authoritative\n      rate: 0.9,\n      // Slower, deliberate\n      volume: 1.0\n    },\n    description: 'Structured, measured, and authoritative - like a wise architect'\n  },\n  'Mystical': {\n    id: 'mystical',\n    name: 'The Enigma',\n    settings: {\n      pitch: 1.2,\n      // Higher, ethereal\n      rate: 0.8,\n      // Slower, mysterious\n      volume: 0.9\n    },\n    description: 'Whispery, ethereal, and mysterious - like shadows speaking'\n  },\n  'Radiant': {\n    id: 'radiant',\n    name: 'The Beacon',\n    settings: {\n      pitch: 1.1,\n      // Higher, warm\n      rate: 1.0,\n      // Normal, clear\n      volume: 1.0\n    },\n    description: 'Warm, bright, and encouraging - like sunlight given voice'\n  },\n  'Corrupt': {\n    id: 'corrupt',\n    name: 'The Harbinger',\n    settings: {\n      pitch: 0.7,\n      // Lower, dark\n      rate: 1.1,\n      // Slightly faster, seductive\n      volume: 0.8\n    },\n    description: 'Dark, seductive, and dangerous - like corruption itself'\n  },\n  'Glitched': {\n    id: 'glitched',\n    name: 'The Anomaly',\n    settings: {\n      pitch: 1.3,\n      // Higher, chaotic\n      rate: 1.2,\n      // Faster, glitchy\n      volume: 0.7\n    },\n    description: 'Chaotic, digital, and glitchy - like corrupted code speaking'\n  }\n};\nclass TTSService {\n  constructor() {\n    this.synthesis = void 0;\n    this.voices = [];\n    this.isInitialized = false;\n    this.synthesis = window.speechSynthesis;\n    this.initializeVoices();\n  }\n  initializeVoices() {\n    // Wait for voices to load\n    if (this.synthesis.getVoices().length > 0) {\n      this.voices = this.synthesis.getVoices();\n      this.isInitialized = true;\n    } else {\n      this.synthesis.addEventListener('voiceschanged', () => {\n        this.voices = this.synthesis.getVoices();\n        this.isInitialized = true;\n      });\n    }\n  }\n\n  // Get available voices\n  getAvailableVoices() {\n    return this.voices;\n  }\n\n  // Speak text with god's voice\n  async speakAsGod(text, temperament) {\n    // Try Coqui TTS first (offline, custom voices)\n    if (coquiTTS.isServiceSupported()) {\n      try {\n        console.log(`🎵 Using Coqui TTS for ${temperament} temperament`);\n        const voice = coquiTTS.getVoiceByTemperament(temperament);\n        await coquiTTS.speak(text, {\n          voice: voice.id\n        });\n        return;\n      } catch (error) {\n        console.warn('⚠️ Coqui TTS failed, falling back to Web Speech API:', error);\n      }\n    }\n\n    // Fallback to Web Speech API\n    return new Promise((resolve, reject) => {\n      if (!this.isInitialized) {\n        reject(new Error('TTS not initialized yet'));\n        return;\n      }\n\n      // Stop any current speech\n      this.synthesis.cancel();\n\n      // Get the god's voice settings\n      const godVoice = GOD_VOICES[temperament] || GOD_VOICES['Orderly'];\n\n      // Create utterance\n      const utterance = new SpeechSynthesisUtterance(text);\n\n      // Apply voice settings\n      utterance.pitch = godVoice.settings.pitch;\n      utterance.rate = godVoice.settings.rate;\n      utterance.volume = godVoice.settings.volume;\n\n      // Try to find a good voice for the temperament\n      if (this.voices.length > 0) {\n        // For glitched gods, use a more robotic voice if available\n        if (temperament === 'Glitched') {\n          const glitchVoice = this.voices.find(v => v.name.includes('Google') || v.name.includes('Microsoft') || v.name.includes('Alex') || v.name.includes('David'));\n          if (glitchVoice) utterance.voice = glitchVoice;\n        }\n        // For mystical gods, prefer female voices\n        else if (temperament === 'Mystical') {\n          const mysticalVoice = this.voices.find(v => v.name.includes('female') || v.name.includes('Samantha') || v.name.includes('Victoria') || v.name.includes('Zira'));\n          if (mysticalVoice) utterance.voice = mysticalVoice;\n        }\n        // For corrupt gods, prefer deeper voices\n        else if (temperament === 'Corrupt') {\n          const corruptVoice = this.voices.find(v => v.name.includes('male') || v.name.includes('Daniel') || v.name.includes('James') || v.name.includes('Mark'));\n          if (corruptVoice) utterance.voice = corruptVoice;\n        }\n        // For orderly gods, use a clear, authoritative voice\n        else if (temperament === 'Orderly') {\n          const orderlyVoice = this.voices.find(v => v.name.includes('Microsoft') || v.name.includes('David') || v.name.includes('Mark'));\n          if (orderlyVoice) utterance.voice = orderlyVoice;\n        }\n        // For radiant gods, use a warm, friendly voice\n        else if (temperament === 'Radiant') {\n          const radiantVoice = this.voices.find(v => v.name.includes('Samantha') || v.name.includes('Victoria') || v.name.includes('Zira'));\n          if (radiantVoice) utterance.voice = radiantVoice;\n        }\n      }\n\n      // Set up event handlers\n      utterance.onend = () => resolve();\n      utterance.onerror = error => reject(error);\n\n      // Speak!\n      this.synthesis.speak(utterance);\n    });\n  }\n\n  // Stop all speech\n  stop() {\n    // Stop Coqui TTS if it's speaking\n    if (coquiTTS.isServiceSupported()) {\n      coquiTTS.stop();\n    }\n\n    // Stop Web Speech API\n    this.synthesis.cancel();\n  }\n\n  // Check if TTS is supported\n  isSupported() {\n    return 'speechSynthesis' in window;\n  }\n\n  // Check if currently speaking\n  isSpeaking() {\n    return this.synthesis.speaking;\n  }\n\n  // Debug: Log all available voices\n  logAvailableVoices() {\n    console.log('🔊 Available TTS Voices:');\n    this.voices.forEach((voice, index) => {\n      console.log(`${index + 1}. ${voice.name} (${voice.lang}) - ${voice.default ? 'DEFAULT' : ''}`);\n    });\n    console.log(`Total voices: ${this.voices.length}`);\n  }\n}\n\n// Export singleton instance\nexport const ttsService = new TTSService();\nexport default ttsService;","map":{"version":3,"names":["coquiTTS","GOD_VOICES","id","name","settings","pitch","rate","volume","description","TTSService","constructor","synthesis","voices","isInitialized","window","speechSynthesis","initializeVoices","getVoices","length","addEventListener","getAvailableVoices","speakAsGod","text","temperament","isServiceSupported","console","log","voice","getVoiceByTemperament","speak","error","warn","Promise","resolve","reject","Error","cancel","godVoice","utterance","SpeechSynthesisUtterance","glitchVoice","find","v","includes","mysticalVoice","corruptVoice","orderlyVoice","radiantVoice","onend","onerror","stop","isSupported","isSpeaking","speaking","logAvailableVoices","forEach","index","lang","default","ttsService"],"sources":["D:/AI-Gods/src/services/tts.ts"],"sourcesContent":["// TTS service for divine voices\r\nimport coquiTTS from './coquiTTS';\r\n\r\nexport interface VoiceSettings {\r\n    pitch: number;\r\n    rate: number;\r\n    volume: number;\r\n    voice?: SpeechSynthesisVoice;\r\n}\r\n\r\nexport interface GodVoice {\r\n    id: string;\r\n    name: string;\r\n    settings: VoiceSettings;\r\n    description: string;\r\n}\r\n\r\n// Define unique voices for each god temperament\r\nexport const GOD_VOICES: Record<string, GodVoice> = {\r\n    'Orderly': {\r\n        id: 'orderly',\r\n        name: 'The Architect',\r\n        settings: {\r\n            pitch: 0.8,    // Lower, authoritative\r\n            rate: 0.9,     // Slower, deliberate\r\n            volume: 1.0\r\n        },\r\n        description: 'Structured, measured, and authoritative - like a wise architect'\r\n    },\r\n    'Mystical': {\r\n        id: 'mystical',\r\n        name: 'The Enigma',\r\n        settings: {\r\n            pitch: 1.2,    // Higher, ethereal\r\n            rate: 0.8,     // Slower, mysterious\r\n            volume: 0.9\r\n        },\r\n        description: 'Whispery, ethereal, and mysterious - like shadows speaking'\r\n    },\r\n    'Radiant': {\r\n        id: 'radiant',\r\n        name: 'The Beacon',\r\n        settings: {\r\n            pitch: 1.1,    // Higher, warm\r\n            rate: 1.0,     // Normal, clear\r\n            volume: 1.0\r\n        },\r\n        description: 'Warm, bright, and encouraging - like sunlight given voice'\r\n    },\r\n    'Corrupt': {\r\n        id: 'corrupt',\r\n        name: 'The Harbinger',\r\n        settings: {\r\n            pitch: 0.7,    // Lower, dark\r\n            rate: 1.1,     // Slightly faster, seductive\r\n            volume: 0.8\r\n        },\r\n        description: 'Dark, seductive, and dangerous - like corruption itself'\r\n    },\r\n    'Glitched': {\r\n        id: 'glitched',\r\n        name: 'The Anomaly',\r\n        settings: {\r\n            pitch: 1.3,    // Higher, chaotic\r\n            rate: 1.2,     // Faster, glitchy\r\n            volume: 0.7\r\n        },\r\n        description: 'Chaotic, digital, and glitchy - like corrupted code speaking'\r\n    }\r\n};\r\n\r\nclass TTSService {\r\n    private synthesis: SpeechSynthesis;\r\n    private voices: SpeechSynthesisVoice[] = [];\r\n    private isInitialized = false;\r\n\r\n    constructor() {\r\n        this.synthesis = window.speechSynthesis;\r\n        this.initializeVoices();\r\n    }\r\n\r\n    private initializeVoices() {\r\n        // Wait for voices to load\r\n        if (this.synthesis.getVoices().length > 0) {\r\n            this.voices = this.synthesis.getVoices();\r\n            this.isInitialized = true;\r\n        } else {\r\n            this.synthesis.addEventListener('voiceschanged', () => {\r\n                this.voices = this.synthesis.getVoices();\r\n                this.isInitialized = true;\r\n            });\r\n        }\r\n    }\r\n\r\n    // Get available voices\r\n    getAvailableVoices(): SpeechSynthesisVoice[] {\r\n        return this.voices;\r\n    }\r\n\r\n    // Speak text with god's voice\r\n    async speakAsGod(text: string, temperament: string): Promise<void> {\r\n        // Try Coqui TTS first (offline, custom voices)\r\n        if (coquiTTS.isServiceSupported()) {\r\n            try {\r\n                console.log(`🎵 Using Coqui TTS for ${temperament} temperament`);\r\n                const voice = coquiTTS.getVoiceByTemperament(temperament);\r\n                await coquiTTS.speak(text, { voice: voice.id });\r\n                return;\r\n            } catch (error) {\r\n                console.warn('⚠️ Coqui TTS failed, falling back to Web Speech API:', error);\r\n            }\r\n        }\r\n\r\n        // Fallback to Web Speech API\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.isInitialized) {\r\n                reject(new Error('TTS not initialized yet'));\r\n                return;\r\n            }\r\n\r\n            // Stop any current speech\r\n            this.synthesis.cancel();\r\n\r\n            // Get the god's voice settings\r\n            const godVoice = GOD_VOICES[temperament] || GOD_VOICES['Orderly'];\r\n\r\n            // Create utterance\r\n            const utterance = new SpeechSynthesisUtterance(text);\r\n\r\n            // Apply voice settings\r\n            utterance.pitch = godVoice.settings.pitch;\r\n            utterance.rate = godVoice.settings.rate;\r\n            utterance.volume = godVoice.settings.volume;\r\n\r\n            // Try to find a good voice for the temperament\r\n            if (this.voices.length > 0) {\r\n                // For glitched gods, use a more robotic voice if available\r\n                if (temperament === 'Glitched') {\r\n                    const glitchVoice = this.voices.find(v =>\r\n                        v.name.includes('Google') || v.name.includes('Microsoft') || v.name.includes('Alex') || v.name.includes('David')\r\n                    );\r\n                    if (glitchVoice) utterance.voice = glitchVoice;\r\n                }\r\n                // For mystical gods, prefer female voices\r\n                else if (temperament === 'Mystical') {\r\n                    const mysticalVoice = this.voices.find(v =>\r\n                        v.name.includes('female') || v.name.includes('Samantha') || v.name.includes('Victoria') || v.name.includes('Zira')\r\n                    );\r\n                    if (mysticalVoice) utterance.voice = mysticalVoice;\r\n                }\r\n                // For corrupt gods, prefer deeper voices\r\n                else if (temperament === 'Corrupt') {\r\n                    const corruptVoice = this.voices.find(v =>\r\n                        v.name.includes('male') || v.name.includes('Daniel') || v.name.includes('James') || v.name.includes('Mark')\r\n                    );\r\n                    if (corruptVoice) utterance.voice = corruptVoice;\r\n                }\r\n                // For orderly gods, use a clear, authoritative voice\r\n                else if (temperament === 'Orderly') {\r\n                    const orderlyVoice = this.voices.find(v =>\r\n                        v.name.includes('Microsoft') || v.name.includes('David') || v.name.includes('Mark')\r\n                    );\r\n                    if (orderlyVoice) utterance.voice = orderlyVoice;\r\n                }\r\n                // For radiant gods, use a warm, friendly voice\r\n                else if (temperament === 'Radiant') {\r\n                    const radiantVoice = this.voices.find(v =>\r\n                        v.name.includes('Samantha') || v.name.includes('Victoria') || v.name.includes('Zira')\r\n                    );\r\n                    if (radiantVoice) utterance.voice = radiantVoice;\r\n                }\r\n            }\r\n\r\n            // Set up event handlers\r\n            utterance.onend = () => resolve();\r\n            utterance.onerror = (error) => reject(error);\r\n\r\n            // Speak!\r\n            this.synthesis.speak(utterance);\r\n        });\r\n    }\r\n\r\n    // Stop all speech\r\n    stop(): void {\r\n        // Stop Coqui TTS if it's speaking\r\n        if (coquiTTS.isServiceSupported()) {\r\n            coquiTTS.stop();\r\n        }\r\n        \r\n        // Stop Web Speech API\r\n        this.synthesis.cancel();\r\n    }\r\n\r\n    // Check if TTS is supported\r\n    isSupported(): boolean {\r\n        return 'speechSynthesis' in window;\r\n    }\r\n\r\n    // Check if currently speaking\r\n    isSpeaking(): boolean {\r\n        return this.synthesis.speaking;\r\n    }\r\n\r\n    // Debug: Log all available voices\r\n    logAvailableVoices(): void {\r\n        console.log('🔊 Available TTS Voices:');\r\n        this.voices.forEach((voice, index) => {\r\n            console.log(`${index + 1}. ${voice.name} (${voice.lang}) - ${voice.default ? 'DEFAULT' : ''}`);\r\n        });\r\n        console.log(`Total voices: ${this.voices.length}`);\r\n    }\r\n}\r\n\r\n// Export singleton instance\r\nexport const ttsService = new TTSService();\r\nexport default ttsService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}