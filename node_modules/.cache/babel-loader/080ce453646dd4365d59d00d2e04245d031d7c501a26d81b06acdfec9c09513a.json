{"ast":null,"code":"// Define unique voices for each god temperament\nexport const GOD_VOICES = {\n  'Orderly': {\n    id: 'orderly',\n    name: 'The Architect',\n    settings: {\n      pitch: 0.8,\n      // Lower, authoritative\n      rate: 0.9,\n      // Slower, deliberate\n      volume: 1.0\n    },\n    description: 'Structured, measured, and authoritative - like a wise architect'\n  },\n  'Mystical': {\n    id: 'mystical',\n    name: 'The Enigma',\n    settings: {\n      pitch: 1.2,\n      // Higher, ethereal\n      rate: 0.8,\n      // Slower, mysterious\n      volume: 0.9\n    },\n    description: 'Whispery, ethereal, and mysterious - like shadows speaking'\n  },\n  'Radiant': {\n    id: 'radiant',\n    name: 'The Beacon',\n    settings: {\n      pitch: 1.1,\n      // Higher, warm\n      rate: 1.0,\n      // Normal, clear\n      volume: 1.0\n    },\n    description: 'Warm, bright, and encouraging - like sunlight given voice'\n  },\n  'Corrupt': {\n    id: 'corrupt',\n    name: 'The Harbinger',\n    settings: {\n      pitch: 0.7,\n      // Lower, dark\n      rate: 1.1,\n      // Slightly faster, seductive\n      volume: 0.8\n    },\n    description: 'Dark, seductive, and dangerous - like corruption itself'\n  },\n  'Glitched': {\n    id: 'glitched',\n    name: 'The Anomaly',\n    settings: {\n      pitch: 1.3,\n      // Higher, chaotic\n      rate: 1.2,\n      // Faster, glitchy\n      volume: 0.7\n    },\n    description: 'Chaotic, digital, and glitchy - like corrupted code speaking'\n  }\n};\nclass TTSService {\n  constructor() {\n    this.synthesis = void 0;\n    this.voices = [];\n    this.isInitialized = false;\n    this.synthesis = window.speechSynthesis;\n    this.initializeVoices();\n  }\n  initializeVoices() {\n    // Wait for voices to load\n    if (this.synthesis.getVoices().length > 0) {\n      this.voices = this.synthesis.getVoices();\n      this.isInitialized = true;\n    } else {\n      this.synthesis.addEventListener('voiceschanged', () => {\n        this.voices = this.synthesis.getVoices();\n        this.isInitialized = true;\n      });\n    }\n  }\n\n  // Get available voices\n  getAvailableVoices() {\n    return this.voices;\n  }\n\n  // Speak text with god's voice\n  speakAsGod(text, temperament) {\n    return new Promise((resolve, reject) => {\n      if (!this.isInitialized) {\n        reject(new Error('TTS not initialized yet'));\n        return;\n      }\n\n      // Stop any current speech\n      this.synthesis.cancel();\n\n      // Get the god's voice settings\n      const godVoice = GOD_VOICES[temperament] || GOD_VOICES['Orderly'];\n\n      // Create utterance\n      const utterance = new SpeechSynthesisUtterance(text);\n\n      // Apply voice settings\n      utterance.pitch = godVoice.settings.pitch;\n      utterance.rate = godVoice.settings.rate;\n      utterance.volume = godVoice.settings.volume;\n\n      // Try to find a good voice for the temperament\n      if (this.voices.length > 0) {\n        // For glitched gods, use a more robotic voice if available\n        if (temperament === 'Glitched') {\n          const glitchVoice = this.voices.find(v => v.name.includes('Google') || v.name.includes('Microsoft') || v.name.includes('Alex'));\n          if (glitchVoice) utterance.voice = glitchVoice;\n        }\n        // For mystical gods, prefer female voices\n        else if (temperament === 'Mystical') {\n          const mysticalVoice = this.voices.find(v => v.name.includes('female') || v.name.includes('Samantha') || v.name.includes('Victoria'));\n          if (mysticalVoice) utterance.voice = mysticalVoice;\n        }\n        // For corrupt gods, prefer deeper voices\n        else if (temperament === 'Corrupt') {\n          const corruptVoice = this.voices.find(v => v.name.includes('male') || v.name.includes('Daniel') || v.name.includes('James'));\n          if (corruptVoice) utterance.voice = corruptVoice;\n        }\n      }\n\n      // Set up event handlers\n      utterance.onend = () => resolve();\n      utterance.onerror = error => reject(error);\n\n      // Speak!\n      this.synthesis.speak(utterance);\n    });\n  }\n\n  // Stop all speech\n  stop() {\n    this.synthesis.cancel();\n  }\n\n  // Check if TTS is supported\n  isSupported() {\n    return 'speechSynthesis' in window;\n  }\n\n  // Check if currently speaking\n  isSpeaking() {\n    return this.synthesis.speaking;\n  }\n}\n\n// Export singleton instance\nexport const ttsService = new TTSService();\nexport default ttsService;","map":{"version":3,"names":["GOD_VOICES","id","name","settings","pitch","rate","volume","description","TTSService","constructor","synthesis","voices","isInitialized","window","speechSynthesis","initializeVoices","getVoices","length","addEventListener","getAvailableVoices","speakAsGod","text","temperament","Promise","resolve","reject","Error","cancel","godVoice","utterance","SpeechSynthesisUtterance","glitchVoice","find","v","includes","voice","mysticalVoice","corruptVoice","onend","onerror","error","speak","stop","isSupported","isSpeaking","speaking","ttsService"],"sources":["D:/AI-Gods/src/services/tts.ts"],"sourcesContent":["export interface VoiceSettings {\r\n  pitch: number;\r\n  rate: number;\r\n  volume: number;\r\n  voice?: SpeechSynthesisVoice;\r\n}\r\n\r\nexport interface GodVoice {\r\n  id: string;\r\n  name: string;\r\n  settings: VoiceSettings;\r\n  description: string;\r\n}\r\n\r\n// Define unique voices for each god temperament\r\nexport const GOD_VOICES: Record<string, GodVoice> = {\r\n  'Orderly': {\r\n    id: 'orderly',\r\n    name: 'The Architect',\r\n    settings: {\r\n      pitch: 0.8,    // Lower, authoritative\r\n      rate: 0.9,     // Slower, deliberate\r\n      volume: 1.0\r\n    },\r\n    description: 'Structured, measured, and authoritative - like a wise architect'\r\n  },\r\n  'Mystical': {\r\n    id: 'mystical', \r\n    name: 'The Enigma',\r\n    settings: {\r\n      pitch: 1.2,    // Higher, ethereal\r\n      rate: 0.8,     // Slower, mysterious\r\n      volume: 0.9\r\n    },\r\n    description: 'Whispery, ethereal, and mysterious - like shadows speaking'\r\n  },\r\n  'Radiant': {\r\n    id: 'radiant',\r\n    name: 'The Beacon',\r\n    settings: {\r\n      pitch: 1.1,    // Higher, warm\r\n      rate: 1.0,     // Normal, clear\r\n      volume: 1.0\r\n    },\r\n    description: 'Warm, bright, and encouraging - like sunlight given voice'\r\n  },\r\n  'Corrupt': {\r\n    id: 'corrupt',\r\n    name: 'The Harbinger',\r\n    settings: {\r\n      pitch: 0.7,    // Lower, dark\r\n      rate: 1.1,     // Slightly faster, seductive\r\n      volume: 0.8\r\n    },\r\n    description: 'Dark, seductive, and dangerous - like corruption itself'\r\n  },\r\n  'Glitched': {\r\n    id: 'glitched',\r\n    name: 'The Anomaly',\r\n    settings: {\r\n      pitch: 1.3,    // Higher, chaotic\r\n      rate: 1.2,     // Faster, glitchy\r\n      volume: 0.7\r\n    },\r\n    description: 'Chaotic, digital, and glitchy - like corrupted code speaking'\r\n  }\r\n};\r\n\r\nclass TTSService {\r\n  private synthesis: SpeechSynthesis;\r\n  private voices: SpeechSynthesisVoice[] = [];\r\n  private isInitialized = false;\r\n\r\n  constructor() {\r\n    this.synthesis = window.speechSynthesis;\r\n    this.initializeVoices();\r\n  }\r\n\r\n  private initializeVoices() {\r\n    // Wait for voices to load\r\n    if (this.synthesis.getVoices().length > 0) {\r\n      this.voices = this.synthesis.getVoices();\r\n      this.isInitialized = true;\r\n    } else {\r\n      this.synthesis.addEventListener('voiceschanged', () => {\r\n        this.voices = this.synthesis.getVoices();\r\n        this.isInitialized = true;\r\n      });\r\n    }\r\n  }\r\n\r\n  // Get available voices\r\n  getAvailableVoices(): SpeechSynthesisVoice[] {\r\n    return this.voices;\r\n  }\r\n\r\n  // Speak text with god's voice\r\n  speakAsGod(text: string, temperament: string): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      if (!this.isInitialized) {\r\n        reject(new Error('TTS not initialized yet'));\r\n        return;\r\n      }\r\n\r\n      // Stop any current speech\r\n      this.synthesis.cancel();\r\n\r\n      // Get the god's voice settings\r\n      const godVoice = GOD_VOICES[temperament] || GOD_VOICES['Orderly'];\r\n      \r\n      // Create utterance\r\n      const utterance = new SpeechSynthesisUtterance(text);\r\n      \r\n      // Apply voice settings\r\n      utterance.pitch = godVoice.settings.pitch;\r\n      utterance.rate = godVoice.settings.rate;\r\n      utterance.volume = godVoice.settings.volume;\r\n      \r\n      // Try to find a good voice for the temperament\r\n      if (this.voices.length > 0) {\r\n        // For glitched gods, use a more robotic voice if available\r\n        if (temperament === 'Glitched') {\r\n          const glitchVoice = this.voices.find(v => \r\n            v.name.includes('Google') || v.name.includes('Microsoft') || v.name.includes('Alex')\r\n          );\r\n          if (glitchVoice) utterance.voice = glitchVoice;\r\n        }\r\n        // For mystical gods, prefer female voices\r\n        else if (temperament === 'Mystical') {\r\n          const mysticalVoice = this.voices.find(v => \r\n            v.name.includes('female') || v.name.includes('Samantha') || v.name.includes('Victoria')\r\n          );\r\n          if (mysticalVoice) utterance.voice = mysticalVoice;\r\n        }\r\n        // For corrupt gods, prefer deeper voices\r\n        else if (temperament === 'Corrupt') {\r\n          const corruptVoice = this.voices.find(v => \r\n            v.name.includes('male') || v.name.includes('Daniel') || v.name.includes('James')\r\n          );\r\n          if (corruptVoice) utterance.voice = corruptVoice;\r\n        }\r\n      }\r\n\r\n      // Set up event handlers\r\n      utterance.onend = () => resolve();\r\n      utterance.onerror = (error) => reject(error);\r\n\r\n      // Speak!\r\n      this.synthesis.speak(utterance);\r\n    });\r\n  }\r\n\r\n  // Stop all speech\r\n  stop(): void {\r\n    this.synthesis.cancel();\r\n  }\r\n\r\n  // Check if TTS is supported\r\n  isSupported(): boolean {\r\n    return 'speechSynthesis' in window;\r\n  }\r\n\r\n  // Check if currently speaking\r\n  isSpeaking(): boolean {\r\n    return this.synthesis.speaking;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const ttsService = new TTSService();\r\nexport default ttsService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}