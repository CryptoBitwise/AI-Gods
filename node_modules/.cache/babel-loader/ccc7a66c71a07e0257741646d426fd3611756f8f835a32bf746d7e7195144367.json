{"ast":null,"code":"// Coqui TTS service for offline, unlimited text-to-speech\n// This service provides custom voices for each god without API keys or limits\nclass CoquiTTSService{constructor(){this.isSupported=false;this.voices=[];this.audioContext=null;this.currentAudio=null;this.initializeVoices();this.checkSupport();}initializeVoices(){// Pre-defined voices for each god personality\nthis.voices=[// Elion - God of Wisdom (Orderly)\n{id:'elion-voice',name:'Elion the Wise',language:'en',gender:'male',description:'Deep, authoritative voice with measured cadence',sampleRate:22050},// Nyxa - Goddess of Dreams (Mystical)\n{id:'nyxa-voice',name:'Nyxa the Mysterious',language:'en',gender:'female',description:'Ethereal, whispery voice with mystical undertones',sampleRate:22050},// Zara - Goddess of Light (Radiant)\n{id:'zara-voice',name:'Zara the Radiant',language:'en',gender:'female',description:'Warm, bright voice with uplifting energy',sampleRate:22050},// Malakai - God of Corruption (Corrupt)\n{id:'malakai-voice',name:'Malakai the Corrupt',language:'en',gender:'male',description:'Dark, seductive voice with dangerous allure',sampleRate:22050},// Glitch - Digital Entity (Glitched)\n{id:'glitch-voice',name:'Glitch the Digital',language:'en',gender:'neutral',description:'Digital, glitchy voice with electronic effects',sampleRate:22050}];}checkSupport(){// Check if Web Audio API is supported\nthis.isSupported=!!(window.AudioContext||window.webkitAudioContext);if(this.isSupported){this.audioContext=new(window.AudioContext||window.webkitAudioContext)();console.log('🎵 Coqui TTS: Web Audio API supported');}else{console.warn('⚠️ Coqui TTS: Web Audio API not supported, falling back to Web Speech API');}}// Get available voices\ngetVoices(){return[...this.voices];}// Get voice by ID\ngetVoice(voiceId){return this.voices.find(voice=>voice.id===voiceId);}// Get voice by god temperament\ngetVoiceByTemperament(temperament){const voiceMap={'Orderly':'elion-voice','Mystical':'nyxa-voice','Radiant':'zara-voice','Corrupt':'malakai-voice','Glitched':'glitch-voice'};const voiceId=voiceMap[temperament]||'elion-voice';return this.getVoice(voiceId)||this.voices[0];}// Check if service is supported\nisServiceSupported(){return this.isSupported;}// Generate speech using Coqui TTS (simulated for now)\nasync speak(text,options){if(!this.isSupported){throw new Error('Coqui TTS not supported in this browser');}try{console.log(\"\\uD83C\\uDFB5 Coqui TTS: Speaking \\\"\".concat(text.substring(0,50),\"...\\\" with voice \").concat(options.voice));// For now, we'll simulate the TTS with a delay and audio generation\n// In a real implementation, this would call the Coqui TTS API or local model\n// Simulate processing time\nawait new Promise(resolve=>setTimeout(resolve,1000));// Generate a simple audio tone as placeholder\nawait this.generatePlaceholderAudio(text,options);console.log('✅ Coqui TTS: Speech completed');}catch(error){console.error('❌ Coqui TTS Error:',error);throw error;}}// Generate placeholder audio (this would be replaced with real Coqui TTS)\nasync generatePlaceholderAudio(text,options){if(!this.audioContext)return;try{// Create a simple audio tone based on the voice characteristics\nconst voice=this.getVoice(options.voice);if(!voice)return;// Generate different tones for different voices\nconst frequency=this.getVoiceFrequency(voice);const duration=Math.min(text.length*0.1,3);// Max 3 seconds\n// Create oscillator for tone\nconst oscillator=this.audioContext.createOscillator();const gainNode=this.audioContext.createGain();oscillator.connect(gainNode);gainNode.connect(this.audioContext.destination);// Set voice characteristics\noscillator.frequency.setValueAtTime(frequency,this.audioContext.currentTime);oscillator.type='sine';// Apply voice-specific effects\nthis.applyVoiceEffects(oscillator,gainNode,voice,options);// Play the audio\noscillator.start(this.audioContext.currentTime);oscillator.stop(this.audioContext.currentTime+duration);// Store reference for stopping\nthis.currentAudio=oscillator;}catch(error){console.error('Error generating placeholder audio:',error);}}// Get frequency based on voice characteristics\ngetVoiceFrequency(voice){const baseFrequencies={'elion-voice':120,// Deep, authoritative\n'nyxa-voice':220,// Ethereal, mysterious\n'zara-voice':180,// Warm, bright\n'malakai-voice':140,// Dark, seductive\n'glitch-voice':100// Digital, glitchy\n};return baseFrequencies[voice.id]||150;}// Apply voice-specific audio effects\napplyVoiceEffects(oscillator,gainNode,voice,options){const now=this.audioContext.currentTime;// Apply different effects based on voice\nswitch(voice.id){case'elion-voice':// Orderly: steady, measured\ngainNode.gain.setValueAtTime(0.3,now);gainNode.gain.linearRampToValueAtTime(0.3,now+0.1);break;case'nyxa-voice':// Mystical: ethereal, whispery\ngainNode.gain.setValueAtTime(0.2,now);gainNode.gain.exponentialRampToValueAtTime(0.1,now+0.5);break;case'zara-voice':// Radiant: warm, bright\ngainNode.gain.setValueAtTime(0.4,now);gainNode.gain.linearRampToValueAtTime(0.4,now+0.2);break;case'malakai-voice':// Corrupt: dark, seductive\ngainNode.gain.setValueAtTime(0.25,now);gainNode.gain.linearRampToValueAtTime(0.35,now+0.3);break;case'glitch-voice':// Glitched: digital, chaotic\ngainNode.gain.setValueAtTime(0.3,now);// Add some glitch effects\nconst glitchInterval=setInterval(()=>{if(this.audioContext&&oscillator.frequency){oscillator.frequency.setValueAtTime(oscillator.frequency.value+(Math.random()-0.5)*50,this.audioContext.currentTime);}},100);// Clean up interval when oscillator stops\noscillator.onended=()=>{clearInterval(glitchInterval);};break;}}// Stop current speech\nstop(){if(this.currentAudio){try{this.currentAudio.stop();}catch(error){// Oscillator might already be stopped\nconsole.log('Oscillator already stopped');}this.currentAudio=null;}if(this.audioContext&&this.audioContext.state==='running'){this.audioContext.suspend();}}// Pause speech\npause(){if(this.audioContext&&this.audioContext.state==='running'){this.audioContext.suspend();}}// Resume speech\nresume(){if(this.audioContext&&this.audioContext.state==='suspended'){this.audioContext.resume();}}// Get service status\ngetStatus(){return{supported:this.isSupported,voices:this.voices.length,ready:this.isSupported&&!!this.audioContext};}// Cleanup resources\ndestroy(){this.stop();if(this.audioContext){this.audioContext.close();this.audioContext=null;}}}export default new CoquiTTSService();","map":{"version":3,"names":["CoquiTTSService","constructor","isSupported","voices","audioContext","currentAudio","initializeVoices","checkSupport","id","name","language","gender","description","sampleRate","window","AudioContext","webkitAudioContext","console","log","warn","getVoices","getVoice","voiceId","find","voice","getVoiceByTemperament","temperament","voiceMap","isServiceSupported","speak","text","options","Error","concat","substring","Promise","resolve","setTimeout","generatePlaceholderAudio","error","frequency","getVoiceFrequency","duration","Math","min","length","oscillator","createOscillator","gainNode","createGain","connect","destination","setValueAtTime","currentTime","type","applyVoiceEffects","start","stop","baseFrequencies","now","gain","linearRampToValueAtTime","exponentialRampToValueAtTime","glitchInterval","setInterval","value","random","onended","clearInterval","state","suspend","pause","resume","getStatus","supported","ready","destroy","close"],"sources":["D:/AI-Gods/src/services/coquiTTS.ts"],"sourcesContent":["// Coqui TTS service for offline, unlimited text-to-speech\r\n// This service provides custom voices for each god without API keys or limits\r\n\r\nexport interface CoquiVoice {\r\n    id: string;\r\n    name: string;\r\n    language: string;\r\n    gender: 'male' | 'female' | 'neutral';\r\n    description: string;\r\n    sampleRate: number;\r\n}\r\n\r\nexport interface TTSOptions {\r\n    voice: string;\r\n    speed?: number;\r\n    pitch?: number;\r\n    volume?: number;\r\n}\r\n\r\nclass CoquiTTSService {\r\n    private isSupported = false;\r\n    private voices: CoquiVoice[] = [];\r\n    private audioContext: AudioContext | null = null;\r\n    private currentAudio: OscillatorNode | null = null;\r\n\r\n    constructor() {\r\n        this.initializeVoices();\r\n        this.checkSupport();\r\n    }\r\n\r\n    private initializeVoices() {\r\n        // Pre-defined voices for each god personality\r\n        this.voices = [\r\n            // Elion - God of Wisdom (Orderly)\r\n            {\r\n                id: 'elion-voice',\r\n                name: 'Elion the Wise',\r\n                language: 'en',\r\n                gender: 'male',\r\n                description: 'Deep, authoritative voice with measured cadence',\r\n                sampleRate: 22050\r\n            },\r\n            // Nyxa - Goddess of Dreams (Mystical)\r\n            {\r\n                id: 'nyxa-voice',\r\n                name: 'Nyxa the Mysterious',\r\n                language: 'en',\r\n                gender: 'female',\r\n                description: 'Ethereal, whispery voice with mystical undertones',\r\n                sampleRate: 22050\r\n            },\r\n            // Zara - Goddess of Light (Radiant)\r\n            {\r\n                id: 'zara-voice',\r\n                name: 'Zara the Radiant',\r\n                language: 'en',\r\n                gender: 'female',\r\n                description: 'Warm, bright voice with uplifting energy',\r\n                sampleRate: 22050\r\n            },\r\n            // Malakai - God of Corruption (Corrupt)\r\n            {\r\n                id: 'malakai-voice',\r\n                name: 'Malakai the Corrupt',\r\n                language: 'en',\r\n                gender: 'male',\r\n                description: 'Dark, seductive voice with dangerous allure',\r\n                sampleRate: 22050\r\n            },\r\n            // Glitch - Digital Entity (Glitched)\r\n            {\r\n                id: 'glitch-voice',\r\n                name: 'Glitch the Digital',\r\n                language: 'en',\r\n                gender: 'neutral',\r\n                description: 'Digital, glitchy voice with electronic effects',\r\n                sampleRate: 22050\r\n            }\r\n        ];\r\n    }\r\n\r\n    private checkSupport() {\r\n        // Check if Web Audio API is supported\r\n        this.isSupported = !!(window.AudioContext || (window as any).webkitAudioContext);\r\n\r\n        if (this.isSupported) {\r\n            this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n            console.log('🎵 Coqui TTS: Web Audio API supported');\r\n        } else {\r\n            console.warn('⚠️ Coqui TTS: Web Audio API not supported, falling back to Web Speech API');\r\n        }\r\n    }\r\n\r\n    // Get available voices\r\n    public getVoices(): CoquiVoice[] {\r\n        return [...this.voices];\r\n    }\r\n\r\n    // Get voice by ID\r\n    public getVoice(voiceId: string): CoquiVoice | undefined {\r\n        return this.voices.find(voice => voice.id === voiceId);\r\n    }\r\n\r\n    // Get voice by god temperament\r\n    public getVoiceByTemperament(temperament: string): CoquiVoice {\r\n        const voiceMap: { [key: string]: string } = {\r\n            'Orderly': 'elion-voice',\r\n            'Mystical': 'nyxa-voice',\r\n            'Radiant': 'zara-voice',\r\n            'Corrupt': 'malakai-voice',\r\n            'Glitched': 'glitch-voice'\r\n        };\r\n\r\n        const voiceId = voiceMap[temperament] || 'elion-voice';\r\n        return this.getVoice(voiceId) || this.voices[0];\r\n    }\r\n\r\n    // Check if service is supported\r\n    public isServiceSupported(): boolean {\r\n        return this.isSupported;\r\n    }\r\n\r\n    // Generate speech using Coqui TTS (simulated for now)\r\n    public async speak(text: string, options: TTSOptions): Promise<void> {\r\n        if (!this.isSupported) {\r\n            throw new Error('Coqui TTS not supported in this browser');\r\n        }\r\n\r\n        try {\r\n            console.log(`🎵 Coqui TTS: Speaking \"${text.substring(0, 50)}...\" with voice ${options.voice}`);\r\n\r\n            // For now, we'll simulate the TTS with a delay and audio generation\r\n            // In a real implementation, this would call the Coqui TTS API or local model\r\n\r\n            // Simulate processing time\r\n            await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n            // Generate a simple audio tone as placeholder\r\n            await this.generatePlaceholderAudio(text, options);\r\n\r\n            console.log('✅ Coqui TTS: Speech completed');\r\n        } catch (error) {\r\n            console.error('❌ Coqui TTS Error:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // Generate placeholder audio (this would be replaced with real Coqui TTS)\r\n    private async generatePlaceholderAudio(text: string, options: TTSOptions): Promise<void> {\r\n        if (!this.audioContext) return;\r\n\r\n        try {\r\n            // Create a simple audio tone based on the voice characteristics\r\n            const voice = this.getVoice(options.voice);\r\n            if (!voice) return;\r\n\r\n            // Generate different tones for different voices\r\n            const frequency = this.getVoiceFrequency(voice);\r\n            const duration = Math.min(text.length * 0.1, 3); // Max 3 seconds\r\n\r\n            // Create oscillator for tone\r\n            const oscillator = this.audioContext.createOscillator();\r\n            const gainNode = this.audioContext.createGain();\r\n\r\n            oscillator.connect(gainNode);\r\n            gainNode.connect(this.audioContext.destination);\r\n\r\n            // Set voice characteristics\r\n            oscillator.frequency.setValueAtTime(frequency, this.audioContext.currentTime);\r\n            oscillator.type = 'sine';\r\n\r\n            // Apply voice-specific effects\r\n            this.applyVoiceEffects(oscillator, gainNode, voice, options);\r\n\r\n            // Play the audio\r\n            oscillator.start(this.audioContext.currentTime);\r\n            oscillator.stop(this.audioContext.currentTime + duration);\r\n\r\n            // Store reference for stopping\r\n            this.currentAudio = oscillator;\r\n\r\n        } catch (error) {\r\n            console.error('Error generating placeholder audio:', error);\r\n        }\r\n    }\r\n\r\n    // Get frequency based on voice characteristics\r\n    private getVoiceFrequency(voice: CoquiVoice): number {\r\n        const baseFrequencies: { [key: string]: number } = {\r\n            'elion-voice': 120,    // Deep, authoritative\r\n            'nyxa-voice': 220,     // Ethereal, mysterious\r\n            'zara-voice': 180,     // Warm, bright\r\n            'malakai-voice': 140,  // Dark, seductive\r\n            'glitch-voice': 100    // Digital, glitchy\r\n        };\r\n\r\n        return baseFrequencies[voice.id] || 150;\r\n    }\r\n\r\n    // Apply voice-specific audio effects\r\n    private applyVoiceEffects(\r\n        oscillator: OscillatorNode,\r\n        gainNode: GainNode,\r\n        voice: CoquiVoice,\r\n        options: TTSOptions\r\n    ) {\r\n        const now = this.audioContext!.currentTime;\r\n\r\n        // Apply different effects based on voice\r\n        switch (voice.id) {\r\n            case 'elion-voice':\r\n                // Orderly: steady, measured\r\n                gainNode.gain.setValueAtTime(0.3, now);\r\n                gainNode.gain.linearRampToValueAtTime(0.3, now + 0.1);\r\n                break;\r\n\r\n            case 'nyxa-voice':\r\n                // Mystical: ethereal, whispery\r\n                gainNode.gain.setValueAtTime(0.2, now);\r\n                gainNode.gain.exponentialRampToValueAtTime(0.1, now + 0.5);\r\n                break;\r\n\r\n            case 'zara-voice':\r\n                // Radiant: warm, bright\r\n                gainNode.gain.setValueAtTime(0.4, now);\r\n                gainNode.gain.linearRampToValueAtTime(0.4, now + 0.2);\r\n                break;\r\n\r\n            case 'malakai-voice':\r\n                // Corrupt: dark, seductive\r\n                gainNode.gain.setValueAtTime(0.25, now);\r\n                gainNode.gain.linearRampToValueAtTime(0.35, now + 0.3);\r\n                break;\r\n\r\n            case 'glitch-voice':\r\n                // Glitched: digital, chaotic\r\n                gainNode.gain.setValueAtTime(0.3, now);\r\n                // Add some glitch effects\r\n                const glitchInterval = setInterval(() => {\r\n                    if (this.audioContext && oscillator.frequency) {\r\n                        oscillator.frequency.setValueAtTime(\r\n                            oscillator.frequency.value + (Math.random() - 0.5) * 50,\r\n                            this.audioContext.currentTime\r\n                        );\r\n                    }\r\n                }, 100);\r\n                \r\n                // Clean up interval when oscillator stops\r\n                oscillator.onended = () => {\r\n                    clearInterval(glitchInterval);\r\n                };\r\n                break;\r\n        }\r\n    }\r\n\r\n    // Stop current speech\r\n    public stop(): void {\r\n        if (this.currentAudio) {\r\n            try {\r\n                this.currentAudio.stop();\r\n            } catch (error) {\r\n                // Oscillator might already be stopped\r\n                console.log('Oscillator already stopped');\r\n            }\r\n            this.currentAudio = null;\r\n        }\r\n\r\n        if (this.audioContext && this.audioContext.state === 'running') {\r\n            this.audioContext.suspend();\r\n        }\r\n    }\r\n\r\n    // Pause speech\r\n    public pause(): void {\r\n        if (this.audioContext && this.audioContext.state === 'running') {\r\n            this.audioContext.suspend();\r\n        }\r\n    }\r\n\r\n    // Resume speech\r\n    public resume(): void {\r\n        if (this.audioContext && this.audioContext.state === 'suspended') {\r\n            this.audioContext.resume();\r\n        }\r\n    }\r\n\r\n    // Get service status\r\n    public getStatus(): { supported: boolean; voices: number; ready: boolean } {\r\n        return {\r\n            supported: this.isSupported,\r\n            voices: this.voices.length,\r\n            ready: this.isSupported && !!this.audioContext\r\n        };\r\n    }\r\n\r\n    // Cleanup resources\r\n    public destroy(): void {\r\n        this.stop();\r\n        if (this.audioContext) {\r\n            this.audioContext.close();\r\n            this.audioContext = null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default new CoquiTTSService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}